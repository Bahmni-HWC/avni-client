diff --git a/node_modules/react-native-image-picker/.circleci/config.yml b/node_modules/react-native-image-picker/.circleci/config.yml
deleted file mode 100644
index 79eb651..0000000
--- a/node_modules/react-native-image-picker/.circleci/config.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-aliases:
-  - &save-cache-yarn
-    key: yarn-packages-{{ checksum "yarn.lock" }}
-    paths:
-      - ~/.cache/yarn
-  - &restore-cache-yarn
-    name: Restore Yarn Package Cache
-    keys:
-      - yarn-packages-{{ checksum "yarn.lock" }}
-
-defaults: &defaults
-  working_directory: ~/react-native-image-picker
-  docker:
-    - image: circleci/node:10
-
-version: 2
-jobs:
-  build:
-    <<: *defaults
-    steps:
-      - checkout
-      - restore_cache: *restore-cache-yarn
-      - run:
-          name: Yarn Install
-          command: |
-            yarn install --frozen-lockfile --no-progress --non-interactive --cache-folder ~/.cache/yarn
-      - run:
-          name: Flow
-          command: |
-            yarn flow
-      - save_cache: *save-cache-yarn
diff --git a/node_modules/react-native-image-picker/.flowconfig b/node_modules/react-native-image-picker/.flowconfig
deleted file mode 100644
index f5ccd8b..0000000
--- a/node_modules/react-native-image-picker/.flowconfig
+++ /dev/null
@@ -1,69 +0,0 @@
-[ignore]
-; We fork some components by platform
-.*/*[.]android.js
-
-; Ignore "BUCK" generated dirs
-<PROJECT_ROOT>/\.buckd/
-
-; Ignore unexpected extra "@providesModule"
-.*/node_modules/.*/node_modules/fbjs/.*
-
-; Ignore duplicate module providers
-; For RN Apps installed via npm, "Libraries" folder is inside
-; "node_modules/react-native" but in the source repo it is in the root
-.*/Libraries/react-native/React.js
-
-; Ignore polyfills
-.*/Libraries/polyfills/.*
-
-; Ignore metro
-.*/node_modules/metro/.*
-
-[include]
-
-[libs]
-node_modules/react-native/Libraries/react-native/react-native-interface.js
-node_modules/react-native/flow/
-
-[options]
-emoji=true
-
-esproposal.optional_chaining=enable
-esproposal.nullish_coalescing=enable
-
-module.system=haste
-module.system.haste.use_name_reducers=true
-# get basename
-module.system.haste.name_reducers='^.*/\([a-zA-Z0-9$_.-]+\.js\(\.flow\)?\)$' -> '\1'
-# strip .js or .js.flow suffix
-module.system.haste.name_reducers='^\(.*\)\.js\(\.flow\)?$' -> '\1'
-# strip .ios suffix
-module.system.haste.name_reducers='^\(.*\)\.ios$' -> '\1'
-module.system.haste.name_reducers='^\(.*\)\.android$' -> '\1'
-module.system.haste.name_reducers='^\(.*\)\.native$' -> '\1'
-module.system.haste.paths.blacklist=.*/__tests__/.*
-module.system.haste.paths.blacklist=.*/__mocks__/.*
-module.system.haste.paths.blacklist=<PROJECT_ROOT>/node_modules/react-native/Libraries/Animated/src/polyfills/.*
-module.system.haste.paths.whitelist=<PROJECT_ROOT>/node_modules/react-native/Libraries/.*
-
-munge_underscores=true
-
-module.name_mapper='^[./a-zA-Z0-9$_-]+\.\(bmp\|gif\|jpg\|jpeg\|png\|psd\|svg\|webp\|m4v\|mov\|mp4\|mpeg\|mpg\|webm\|aac\|aiff\|caf\|m4a\|mp3\|wav\|html\|pdf\)$' -> 'RelativeImageStub'
-
-module.file_ext=.js
-module.file_ext=.jsx
-module.file_ext=.json
-module.file_ext=.native.js
-
-suppress_type=$FlowIssue
-suppress_type=$FlowFixMe
-suppress_type=$FlowFixMeProps
-suppress_type=$FlowFixMeState
-
-suppress_comment=\\(.\\|\n\\)*\\$FlowFixMe\\($\\|[^(]\\|(\\(<VERSION>\\)? *\\(site=[a-z,_]*react_native[a-z,_]*\\)?)\\)
-suppress_comment=\\(.\\|\n\\)*\\$FlowIssue\\((\\(<VERSION>\\)? *\\(site=[a-z,_]*react_native[a-z,_]*\\)?)\\)?:? #[0-9]+
-suppress_comment=\\(.\\|\n\\)*\\$FlowFixedInNextDeploy
-suppress_comment=\\(.\\|\n\\)*\\$FlowExpectedError
-
-[version]
-^0.82.0
diff --git a/node_modules/react-native-image-picker/.github/ISSUE_TEMPLATE.md b/node_modules/react-native-image-picker/.github/ISSUE_TEMPLATE.md
deleted file mode 100644
index b88d34d..0000000
--- a/node_modules/react-native-image-picker/.github/ISSUE_TEMPLATE.md
+++ /dev/null
@@ -1,23 +0,0 @@
-* Please read the following carefully before opening a new issue.
-Your issue may be closed if it does not provide the information required by this template.
-
---- Delete everything above this line ---
-
-### Description
-
-Explain what you did, what you expected to happen, and what actually happens.
-
-### How to repeat issue and example
-
-Your explanation here and source code or link
-
-### Solution
-
-What needs to be done to address this issue? Ideally, provide a pull request with a fix.
-
-### Additional Information
-
-* React Native version: [FILL THIS OUT: Be specific, filling out "latest" here is not enough.]
-* Platform: [FILL THIS OUT: iOS, Android, or both?]
-* Development Operating System: [FILL THIS OUT: Are you developing on MacOS, Linux, or Windows?]
-* Dev tools: [FILL THIS OUT: Xcode or Android Studio version, iOS or Android SDK version, if applicable] navigation crash for Android
diff --git a/node_modules/react-native-image-picker/.github/PULL_REQUEST_TEMPLATE.md b/node_modules/react-native-image-picker/.github/PULL_REQUEST_TEMPLATE.md
deleted file mode 100644
index e27fdca..0000000
--- a/node_modules/react-native-image-picker/.github/PULL_REQUEST_TEMPLATE.md
+++ /dev/null
@@ -1,18 +0,0 @@
-Thanks for submitting a PR! Please read these instructions carefully:
-
-- [ ] Explain the **motivation** for making this change.
-- [ ] Provide a **test plan** demonstrating that the code is solid.
-- [ ] Match the **code formatting** of the rest of the codebase.
-- [ ] Target the `master` branch, NOT a "stable" branch.
-
-## Motivation (required)
-
-What existing problem does the pull request solve?
-
-## Test Plan (required)
-
-A good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI or updates the website. See [What is a Test Plan?][1] to learn more.  
-
-If you have added code that should be tested, add tests.
-
-[1]: https://medium.com/@martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9
diff --git a/node_modules/react-native-image-picker/.prettierrc b/node_modules/react-native-image-picker/.prettierrc
deleted file mode 100644
index f208ee0..0000000
--- a/node_modules/react-native-image-picker/.prettierrc
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-  "trailingComma": "all",
-  "singleQuote": true,
-  "arrowParens": "always"
-}
diff --git a/node_modules/react-native-image-picker/.watchmanconfig b/node_modules/react-native-image-picker/.watchmanconfig
deleted file mode 100644
index 5d6eeaa..0000000
--- a/node_modules/react-native-image-picker/.watchmanconfig
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "ignore_dirs": [".git", "node_modules", "example"]
-}
diff --git a/node_modules/react-native-image-picker/LICENSE.md b/node_modules/react-native-image-picker/LICENSE.md
index 0de5bd5..d902153 100644
--- a/node_modules/react-native-image-picker/LICENSE.md
+++ b/node_modules/react-native-image-picker/LICENSE.md
@@ -1,6 +1,6 @@
-The MIT License (MIT)
+MIT License
 
-Copyright (c) 2015 Marc Shilling
+Copyright (c) 2015-present, Facebook, Inc.
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/node_modules/react-native-image-picker/README.md b/node_modules/react-native-image-picker/README.md
index dae1208..360f6ef 100644
--- a/node_modules/react-native-image-picker/README.md
+++ b/node_modules/react-native-image-picker/README.md
@@ -1,99 +1,137 @@
 # React Native Image Picker
 
-[![npm version](https://badge.fury.io/js/react-native-image-picker.svg)](https://badge.fury.io/js/react-native-image-picker)
-[![npm](https://img.shields.io/npm/dt/react-native-image-picker.svg)](https://npmcharts.com/compare/react-native-image-picker?minimal=true)
-![MIT](https://img.shields.io/dub/l/vibe-d.svg)
-![Platform - Android and iOS](https://img.shields.io/badge/platform-Android%20%7C%20iOS-yellow.svg)
-[![Gitter chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/react-native-image-picker/Lobby)
+A React Native module that allows you to select a photo/video from the device library or camera.
 
-A React Native module that allows you to use native UI to select a photo/video from the device library or directly from the camera, like so:
+<p align="center">
+  <img src="https://img.shields.io/npm/dw/react-native-image-picker" />
+  <img src="https://img.shields.io/npm/v/react-native-image-picker" />
+</p>
 
-| iOS                                                                                                                   | Android                                                                                                                       |
-| --------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- |
-| <img title="iOS" src="https://github.com/react-community/react-native-image-picker/blob/master/images/ios-image.png"> | <img title="Android" src="https://github.com/react-community/react-native-image-picker/blob/master/images/android-image.png"> |
+### Make sure you're reading the doc applicable to your version, for example if your using version 3.8.0 go to tag 3.8.0 and read those docs. This doc is always that of main branch.
 
-#### _Before you open an issue_
+### Also read version release notes for any breaking changes especially if you're updating the major version.
 
-This library started as a basic bridge of the native iOS image picker, and I want to keep it that way. As such, functionality beyond what the native `UIImagePickerController` supports will not be supported here. **Multiple image selection, more control over the crop tool, and landscape support** are things missing from the native iOS functionality - **not issues with my library**. If you need these things, [react-native-image-crop-picker](https://github.com/ivpusic/react-native-image-crop-picker) might be a better choice for you.
-
-## Getting Started
+# Install
 
 ```
 yarn add react-native-image-picker
+
+# RN >= 0.60
+cd ios && pod install
+
+# RN < 0.60
 react-native link react-native-image-picker
 ```
 
-You will also need to add `UsageDescription` on iOS and some permissions on Android, refer to the [Install doc](docs/Install.md).
-
-## Usage
-
-```javascript
-import ImagePicker from 'react-native-image-picker';
-
-// More info on all the options is below in the API Reference... just some common use cases shown here
-const options = {
-  title: 'Select Avatar',
-  customButtons: [{ name: 'fb', title: 'Choose Photo from Facebook' }],
-  storageOptions: {
-    skipBackup: true,
-    path: 'images',
-  },
-};
-
-/**
- * The first arg is the options object for customization (it can also be null or omitted for default options),
- * The second arg is the callback which sends object: response (more info in the API Reference)
- */
-ImagePicker.showImagePicker(options, (response) => {
-  console.log('Response = ', response);
-
-  if (response.didCancel) {
-    console.log('User cancelled image picker');
-  } else if (response.error) {
-    console.log('ImagePicker Error: ', response.error);
-  } else if (response.customButton) {
-    console.log('User tapped custom button: ', response.customButton);
-  } else {
-    const source = { uri: response.uri };
-
-    // You can also display the image using data:
-    // const source = { uri: 'data:image/jpeg;base64,' + response.data };
-
-    this.setState({
-      avatarSource: source,
-    });
-  }
-});
-```
+## Post-install Steps
+
+### iOS
+
+Add the appropriate keys to your Info.plist,
+
+If you are allowing user to select image/video from photos, add `NSPhotoLibraryUsageDescription`.
+
+If you are allowing user to capture image add `NSCameraUsageDescription` key also.
+
+If you are allowing user to capture video add `NSCameraUsageDescription` add `NSMicrophoneUsageDescription` key also.
 
-Then later, if you want to display this image in your render() method:
+### Android
 
-```javascript
-<Image source={this.state.avatarSource} style={styles.uploadAvatar} />
+No permissions required (`saveToPhotos` requires permission [check](#note-on-file-storage)).
+
+Note: This library does not require Manifest.permission.CAMERA, if your app declares as using this permission in manifest then you have to obtain the permission before using `launchCamera`.
+
+# API Reference
+
+## Methods
+
+```js
+import {launchCamera, launchImageLibrary} from 'react-native-image-picker';
 ```
 
-### Directly Launching the Camera or Image Library
+### `launchCamera()`
 
-To Launch the Camera or Image Library directly (skipping the alert dialog) you can
-do the following:
+Launch camera to take photo or video.
 
-```javascript
-// Launch Camera:
-ImagePicker.launchCamera(options, (response) => {
-  // Same code as in above section!
-});
+```js
+launchCamera(options?, callback);
 
-// Open Image Library:
-ImagePicker.launchImageLibrary(options, (response) => {
-  // Same code as in above section!
-});
+// You can also use as a promise without 'callback':
+const result = await launchCamera(options?);
 ```
 
-#### Notes
+See [Options](#options) for further information on `options`.
+
+The `callback` will be called with a response object, refer to [The Response Object](#the-response-object).
 
-On iOS, don't assume that the absolute uri returned will persist. See [#107](/../../issues/107)
+### `launchImageLibrary`
+
+Launch gallery to pick image or video.
+
+```js
+launchImageLibrary(options?, callback)
+
+// You can also use as a promise without 'callback':
+const result = await launchImageLibrary(options?);
+```
 
-For more, read the [API Reference](docs/Reference.md).
+See [Options](#options) for further information on `options`.
+
+The `callback` will be called with a response object, refer to [The Response Object](#the-response-object).
+
+## Options
+
+| Option         | iOS | Android | Description                                                                                                                               |
+| -------------- | --- | ------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
+| mediaType      | OK  | OK      | 'photo' or 'video' or 'mixed'(mixed supported only for launchImageLibrary, to pick an photo or video)                                     |
+| maxWidth       | OK  | OK      | To resize the image                                                                                                                       |
+| maxHeight      | OK  | OK      | To resize the image                                                                                                                       |
+| videoQuality   | OK  | OK      | 'low', 'medium', or 'high' on iOS, 'low' or 'high' on Android                                                                             |
+| durationLimit  | OK  | OK      | Video max duration in seconds                                                                                                             |
+| quality        | OK  | OK      | 0 to 1, photos                                                                                                                            |
+| cameraType     | OK  | OK      | 'back' or 'front'. May not be supported in few android devices                                                                            |
+| includeBase64  | OK  | OK      | If true, creates base64 string of the image (Avoid using on large image files due to performance)                                         |                                                   |
+| includeExtra   | OK  | OK      | If true, will include extra data which requires library permissions to be requested (i.e. exif data)                                      |
+| saveToPhotos   | OK  | OK      | (Boolean) Only for launchCamera, saves the image/video file captured to public photo                                                      |
+| selectionLimit | OK  | OK      | Default is `1`, use `0` to allow any number of files. Only iOS version >= 14 support `0` and also it supports providing any integer value |
+| presentationStyle | OK  | NO      | Controls how the picker is presented. 'pageSheet', 'fullScreen', 'pageSheet', 'formSheet', 'popover', 'overFullScreen', 'overCurrentContext'. Default is 'currentContext' |
+
+## The Response Object
+
+| key          | iOS | Android | Description                                                         |
+| ------------ | --- | ------- | ------------------------------------------------------------------- |
+| didCancel    | OK  | OK      | `true` if the user cancelled the process                            |
+| errorCode    | OK  | OK      | Check [ErrorCode](#ErrorCode) for all error codes                   |
+| errorMessage | OK  | OK      | Description of the error, use it for debug purpose only             |
+| assets       | OK  | OK      | Array of the selected media, [refer to Asset Object](#Asset-Object) |
+
+## Asset Object
+
+| key       | iOS | Android | Photo/Video | Requires Permissions | Description               |
+| --------- | --- | ------- | ----------- | -------------------- | ------------------------- |
+| base64    | OK  | OK      | PHOTO ONLY  | NO                   | The base64 string of the image (photos only) |
+| uri       | OK  | OK      | BOTH        | NO                   | The file uri in app specific cache storage. Except when picking **video from Android gallery** where you will get read only content uri, to get file uri in this case copy the file to app specific storage using any react-native library |
+| width     | OK  | OK      | BOTH        | NO                   | Asset dimensions                |
+| height    | OK  | OK      | BOTH        | NO                   | Asset dimensions                |
+| fileSize  | OK  | OK      | BOTH        | NO                   | The file size                                 |
+| type      | OK  | OK      | BOTH        | NO                   | The file type                                 |
+| fileName  | OK  | OK      | BOTH        | NO                   | The file name                                 |
+| duration  | OK  | OK      | VIDEO ONLY  | NO                   | The selected video duration in seconds        |
+| bitrate   | --- | OK      | VIDEO ONLY  | NO                   | The average bitrate (in bits/sec) of the selected video, if available. (Android only) |
+| timestamp | OK  | OK      | BOTH        | YES                  | Timestamp of the asset. Only included if 'includeExtra' is true |
+| id        | OK  | OK      | BOTH        | YES                  | local identifier of the photo or video. On Android, this is the same as fileName |
+
+## Note on file storage
+
+Image/video captured via camera will be stored in temporary folder so will be deleted any time, so don't expect it to persist. Use `saveToPhotos: true` (default is false) to save the file in the public photos. `saveToPhotos` requires WRITE_EXTERNAL_STORAGE permission on Android 28 and below (You have to obtain the permission, the library does not).
+
+## ErrorCode
+
+| Code               | Description                                       |
+| ------------------ | ------------------------------------------------- |
+| camera_unavailable | camera not available on device                    |
+| permission         | Permission not satisfied                          |
+| others             | other errors (check errorMessage for description) |
 
 ## License
 
diff --git a/node_modules/react-native-image-picker/android/build.gradle b/node_modules/react-native-image-picker/android/build.gradle
index 9243315..4fc31f6 100644
--- a/node_modules/react-native-image-picker/android/build.gradle
+++ b/node_modules/react-native-image-picker/android/build.gradle
@@ -1,65 +1,25 @@
-import groovy.json.JsonSlurper
-
-def computeVersionName() {
-    // dynamically retrieve version from package.json
-    def slurper = new JsonSlurper()
-    def json = slurper.parse(file('../package.json'), "utf-8")
-    return json.version
-}
-
-buildscript {
-    repositories {
-        google()
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.4'
-    }
-}
-
 apply plugin: 'com.android.library'
 
-def DEFAULT_COMPILE_SDK_VERSION = 27
-def DEFAULT_BUILD_TOOLS_VERSION = "27.0.3"
-def DEFAULT_TARGET_SDK_VERSION = 26
-
 android {
-    compileSdkVersion rootProject.hasProperty('compileSdkVersion') ? rootProject.compileSdkVersion : DEFAULT_COMPILE_SDK_VERSION
-    buildToolsVersion rootProject.hasProperty('buildToolsVersion') ? rootProject.buildToolsVersion : DEFAULT_BUILD_TOOLS_VERSION
+    compileSdkVersion rootProject.ext.compileSdkVersion
 
     defaultConfig {
-        minSdkVersion 16
-        targetSdkVersion rootProject.hasProperty('targetSdkVersion') ? rootProject.targetSdkVersion : DEFAULT_TARGET_SDK_VERSION
+        minSdkVersion 21
+        targetSdkVersion rootProject.ext.targetSdkVersion
         versionCode 1
-        versionName computeVersionName()
-    }
-    lintOptions {
-        abortOnError false
+        versionName "1.0"
     }
-}
 
-repositories {
-    mavenCentral()
-    google()
-    maven {
-        url "$projectDir/../Example/node_modules/react-native/android"
-    }
-    maven {
-        url "$projectDir/../../react-native/android"
+    buildTypes {
+        release {
+            minifyEnabled false
+        }
     }
+
 }
 
 dependencies {
-    implementation "com.facebook.react:react-native:+"  // From node_modules
-
-    testImplementation "junit:junit:4.10"
-    testImplementation "org.assertj:assertj-core:1.7.0"
-    testImplementation "org.robolectric:robolectric:3.3.2"
-
-    testImplementation "org.easytesting:fest-assert-core:${FEST_ASSERT_CORE_VERSION}"
-    testImplementation "org.powermock:powermock-api-mockito:${POWERMOCK_VERSION}"
-    testImplementation "org.powermock:powermock-module-junit4-rule:${POWERMOCK_VERSION}"
-    testImplementation "org.powermock:powermock-classloading-xstream:${POWERMOCK_VERSION}"
-    testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
+    implementation "com.facebook.react:react-native:+"
+    implementation "androidx.core:core:1.3.1"
+    implementation "androidx.exifinterface:exifinterface:1.3.1"
 }
diff --git a/node_modules/react-native-image-picker/android/build/generated/source/buildConfig/debug/com/imagepicker/BuildConfig.java b/node_modules/react-native-image-picker/android/build/generated/source/buildConfig/debug/com/imagepicker/BuildConfig.java
new file mode 100644
index 0000000..92e7a0e
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/generated/source/buildConfig/debug/com/imagepicker/BuildConfig.java
@@ -0,0 +1,13 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.imagepicker;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String APPLICATION_ID = "com.imagepicker";
+  public static final String BUILD_TYPE = "debug";
+  public static final String FLAVOR = "";
+  public static final int VERSION_CODE = 1;
+  public static final String VERSION_NAME = "1.0";
+}
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml b/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..76b1b5c
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.imagepicker"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="21"
+        android:targetSdkVersion="30" />
+
+    <application>
+        <provider
+            android:name="com.imagepicker.ImagePickerProvider"
+            android:authorities="dollar_openBracket_applicationId_closeBracket.imagepickerprovider"
+            android:exported="false"
+            android:grantUriPermissions="true" >
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/imagepicker_provider_paths" />
+        </provider>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output.json b/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output.json
new file mode 100644
index 0000000..1e4ea78
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/aapt_friendly_merged_manifests/debug/processDebugManifest/aapt/output.json
@@ -0,0 +1 @@
+[{"outputType":{"type":"AAPT_FRIENDLY_MERGED_MANIFESTS"},"apkInfo":{"type":"MAIN","splits":[],"versionCode":1,"versionName":"1.0","enabled":true,"outputFile":"react-native-image-picker-debug.aar","fullName":"debug","baseName":"debug"},"path":"AndroidManifest.xml","properties":{"packageId":"com.imagepicker","split":""}}]
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json b/node_modules/react-native-image-picker/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/compile_only_not_namespaced_r_class_jar/debug/generateDebugRFile/R.jar b/node_modules/react-native-image-picker/android/build/intermediates/compile_only_not_namespaced_r_class_jar/debug/generateDebugRFile/R.jar
new file mode 100644
index 0000000..7fe1d66
Binary files /dev/null and b/node_modules/react-native-image-picker/android/build/intermediates/compile_only_not_namespaced_r_class_jar/debug/generateDebugRFile/R.jar differ
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/compile-file-map.properties b/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..bfa9dbc
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
@@ -0,0 +1,2 @@
+#Tue Jun 21 17:04:36 IST 2022
+/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/res/xml/imagepicker_provider_paths.xml=/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/build/intermediates/packaged_res/debug/xml/imagepicker_provider_paths.xml
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/merger.xml b/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/merger.xml
new file mode 100644
index 0000000..149bb36
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/incremental/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/res"/><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/build/generated/res/rs/debug"/><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/build/generated/res/resValues/debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/res"><file name="imagepicker_provider_paths" path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/res/xml/imagepicker_provider_paths.xml" qualifiers="" type="xml"/></source><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/build/generated/res/rs/debug"/><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/build/generated/res/resValues/debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/debug/res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="/Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/debug/res"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/imagepicker/ImagePickerProvider.class b/node_modules/react-native-image-picker/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/imagepicker/ImagePickerProvider.class
new file mode 100644
index 0000000..34f19a7
Binary files /dev/null and b/node_modules/react-native-image-picker/android/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/imagepicker/ImagePickerProvider.class differ
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/library_manifest/debug/AndroidManifest.xml b/node_modules/react-native-image-picker/android/build/intermediates/library_manifest/debug/AndroidManifest.xml
new file mode 100644
index 0000000..4e800e5
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/library_manifest/debug/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.imagepicker"
+    android:versionCode="1"
+    android:versionName="1.0" >
+
+    <uses-sdk
+        android:minSdkVersion="21"
+        android:targetSdkVersion="30" />
+
+    <application>
+        <provider
+            android:name="com.imagepicker.ImagePickerProvider"
+            android:authorities="${applicationId}.imagepickerprovider"
+            android:exported="false"
+            android:grantUriPermissions="true" >
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/imagepicker_provider_paths" />
+        </provider>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/merged_manifests/debug/output.json b/node_modules/react-native-image-picker/android/build/intermediates/merged_manifests/debug/output.json
new file mode 100644
index 0000000..3758899
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/merged_manifests/debug/output.json
@@ -0,0 +1 @@
+[{"outputType":{"type":"MERGED_MANIFESTS"},"apkInfo":{"type":"MAIN","splits":[],"versionCode":1,"versionName":"1.0","enabled":true,"outputFile":"react-native-image-picker-debug.aar","fullName":"debug","baseName":"debug"},"path":"../../library_manifest/debug/AndroidManifest.xml","properties":{"packageId":"com.imagepicker","split":""}}]
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/packaged_res/debug/xml/imagepicker_provider_paths.xml b/node_modules/react-native-image-picker/android/build/intermediates/packaged_res/debug/xml/imagepicker_provider_paths.xml
new file mode 100644
index 0000000..ce57598
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/packaged_res/debug/xml/imagepicker_provider_paths.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths>
+  <cache-path name="cacheDir" path="." />
+</paths>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/res/symbol-table-with-package/debug/package-aware-r.txt b/node_modules/react-native-image-picker/android/build/intermediates/res/symbol-table-with-package/debug/package-aware-r.txt
new file mode 100644
index 0000000..44f9ac2
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/res/symbol-table-with-package/debug/package-aware-r.txt
@@ -0,0 +1,1329 @@
+com.imagepicker
+anim abc_fade_in
+anim abc_fade_out
+anim abc_grow_fade_in_from_bottom
+anim abc_popup_enter
+anim abc_popup_exit
+anim abc_shrink_fade_out_from_bottom
+anim abc_slide_in_bottom
+anim abc_slide_in_top
+anim abc_slide_out_bottom
+anim abc_slide_out_top
+anim abc_tooltip_enter
+anim abc_tooltip_exit
+anim catalyst_fade_in
+anim catalyst_fade_out
+anim catalyst_push_up_in
+anim catalyst_push_up_out
+anim catalyst_slide_down
+anim catalyst_slide_up
+attr actionBarDivider
+attr actionBarItemBackground
+attr actionBarPopupTheme
+attr actionBarSize
+attr actionBarSplitStyle
+attr actionBarStyle
+attr actionBarTabBarStyle
+attr actionBarTabStyle
+attr actionBarTabTextStyle
+attr actionBarTheme
+attr actionBarWidgetTheme
+attr actionButtonStyle
+attr actionDropDownStyle
+attr actionLayout
+attr actionMenuTextAppearance
+attr actionMenuTextColor
+attr actionModeBackground
+attr actionModeCloseButtonStyle
+attr actionModeCloseDrawable
+attr actionModeCopyDrawable
+attr actionModeCutDrawable
+attr actionModeFindDrawable
+attr actionModePasteDrawable
+attr actionModePopupWindowStyle
+attr actionModeSelectAllDrawable
+attr actionModeShareDrawable
+attr actionModeSplitBackground
+attr actionModeStyle
+attr actionModeWebSearchDrawable
+attr actionOverflowButtonStyle
+attr actionOverflowMenuStyle
+attr actionProviderClass
+attr actionViewClass
+attr activityChooserViewStyle
+attr actualImageResource
+attr actualImageScaleType
+attr actualImageUri
+attr alertDialogButtonGroupStyle
+attr alertDialogCenterButtons
+attr alertDialogStyle
+attr alertDialogTheme
+attr allowStacking
+attr alpha
+attr alphabeticModifiers
+attr arrowHeadLength
+attr arrowShaftLength
+attr autoCompleteTextViewStyle
+attr autoSizeMaxTextSize
+attr autoSizeMinTextSize
+attr autoSizePresetSizes
+attr autoSizeStepGranularity
+attr autoSizeTextType
+attr background
+attr backgroundImage
+attr backgroundSplit
+attr backgroundStacked
+attr backgroundTint
+attr backgroundTintMode
+attr barLength
+attr borderlessButtonStyle
+attr buttonBarButtonStyle
+attr buttonBarNegativeButtonStyle
+attr buttonBarNeutralButtonStyle
+attr buttonBarPositiveButtonStyle
+attr buttonBarStyle
+attr buttonGravity
+attr buttonIconDimen
+attr buttonPanelSideLayout
+attr buttonStyle
+attr buttonStyleSmall
+attr buttonTint
+attr buttonTintMode
+attr checkboxStyle
+attr checkedTextViewStyle
+attr closeIcon
+attr closeItemLayout
+attr collapseContentDescription
+attr collapseIcon
+attr color
+attr colorAccent
+attr colorBackgroundFloating
+attr colorButtonNormal
+attr colorControlActivated
+attr colorControlHighlight
+attr colorControlNormal
+attr colorError
+attr colorPrimary
+attr colorPrimaryDark
+attr colorSwitchThumbNormal
+attr commitIcon
+attr contentDescription
+attr contentInsetEnd
+attr contentInsetEndWithActions
+attr contentInsetLeft
+attr contentInsetRight
+attr contentInsetStart
+attr contentInsetStartWithNavigation
+attr controlBackground
+attr coordinatorLayoutStyle
+attr customNavigationLayout
+attr defaultQueryHint
+attr dialogCornerRadius
+attr dialogPreferredPadding
+attr dialogTheme
+attr displayOptions
+attr divider
+attr dividerHorizontal
+attr dividerPadding
+attr dividerVertical
+attr drawableSize
+attr drawerArrowStyle
+attr dropDownListViewStyle
+attr dropdownListPreferredItemHeight
+attr editTextBackground
+attr editTextColor
+attr editTextStyle
+attr elevation
+attr expandActivityOverflowButtonDrawable
+attr fadeDuration
+attr failureImage
+attr failureImageScaleType
+attr firstBaselineToTopHeight
+attr font
+attr fontFamily
+attr fontProviderAuthority
+attr fontProviderCerts
+attr fontProviderFetchStrategy
+attr fontProviderFetchTimeout
+attr fontProviderPackage
+attr fontProviderQuery
+attr fontStyle
+attr fontVariationSettings
+attr fontWeight
+attr gapBetweenBars
+attr goIcon
+attr height
+attr hideOnContentScroll
+attr homeAsUpIndicator
+attr homeLayout
+attr icon
+attr iconTint
+attr iconTintMode
+attr iconifiedByDefault
+attr imageButtonStyle
+attr indeterminateProgressStyle
+attr initialActivityCount
+attr isLightTheme
+attr itemPadding
+attr keylines
+attr lastBaselineToBottomHeight
+attr layout
+attr layout_anchor
+attr layout_anchorGravity
+attr layout_behavior
+attr layout_dodgeInsetEdges
+attr layout_insetEdge
+attr layout_keyline
+attr lineHeight
+attr listChoiceBackgroundIndicator
+attr listDividerAlertDialog
+attr listItemLayout
+attr listLayout
+attr listMenuViewStyle
+attr listPopupWindowStyle
+attr listPreferredItemHeight
+attr listPreferredItemHeightLarge
+attr listPreferredItemHeightSmall
+attr listPreferredItemPaddingLeft
+attr listPreferredItemPaddingRight
+attr logo
+attr logoDescription
+attr maxButtonHeight
+attr measureWithLargestChild
+attr multiChoiceItemLayout
+attr navigationContentDescription
+attr navigationIcon
+attr navigationMode
+attr numericModifiers
+attr overlapAnchor
+attr overlayImage
+attr paddingBottomNoButtons
+attr paddingEnd
+attr paddingStart
+attr paddingTopNoTitle
+attr panelBackground
+attr panelMenuListTheme
+attr panelMenuListWidth
+attr placeholderImage
+attr placeholderImageScaleType
+attr popupMenuStyle
+attr popupTheme
+attr popupWindowStyle
+attr preserveIconSpacing
+attr pressedStateOverlayImage
+attr progressBarAutoRotateInterval
+attr progressBarImage
+attr progressBarImageScaleType
+attr progressBarPadding
+attr progressBarStyle
+attr queryBackground
+attr queryHint
+attr radioButtonStyle
+attr ratingBarStyle
+attr ratingBarStyleIndicator
+attr ratingBarStyleSmall
+attr retryImage
+attr retryImageScaleType
+attr roundAsCircle
+attr roundBottomEnd
+attr roundBottomLeft
+attr roundBottomRight
+attr roundBottomStart
+attr roundTopEnd
+attr roundTopLeft
+attr roundTopRight
+attr roundTopStart
+attr roundWithOverlayColor
+attr roundedCornerRadius
+attr roundingBorderColor
+attr roundingBorderPadding
+attr roundingBorderWidth
+attr searchHintIcon
+attr searchIcon
+attr searchViewStyle
+attr seekBarStyle
+attr selectableItemBackground
+attr selectableItemBackgroundBorderless
+attr showAsAction
+attr showDividers
+attr showText
+attr showTitle
+attr singleChoiceItemLayout
+attr spinBars
+attr spinnerDropDownItemStyle
+attr spinnerStyle
+attr splitTrack
+attr srcCompat
+attr state_above_anchor
+attr statusBarBackground
+attr subMenuArrow
+attr submitBackground
+attr subtitle
+attr subtitleTextAppearance
+attr subtitleTextColor
+attr subtitleTextStyle
+attr suggestionRowLayout
+attr switchMinWidth
+attr switchPadding
+attr switchStyle
+attr switchTextAppearance
+attr textAllCaps
+attr textAppearanceLargePopupMenu
+attr textAppearanceListItem
+attr textAppearanceListItemSecondary
+attr textAppearanceListItemSmall
+attr textAppearancePopupMenuHeader
+attr textAppearanceSearchResultSubtitle
+attr textAppearanceSearchResultTitle
+attr textAppearanceSmallPopupMenu
+attr textColorAlertDialogListItem
+attr textColorSearchUrl
+attr theme
+attr thickness
+attr thumbTextPadding
+attr thumbTint
+attr thumbTintMode
+attr tickMark
+attr tickMarkTint
+attr tickMarkTintMode
+attr tint
+attr tintMode
+attr title
+attr titleMargin
+attr titleMarginBottom
+attr titleMarginEnd
+attr titleMarginStart
+attr titleMarginTop
+attr titleMargins
+attr titleTextAppearance
+attr titleTextColor
+attr titleTextStyle
+attr toolbarNavigationButtonStyle
+attr toolbarStyle
+attr tooltipForegroundColor
+attr tooltipFrameBackground
+attr tooltipText
+attr track
+attr trackTint
+attr trackTintMode
+attr ttcIndex
+attr viewAspectRatio
+attr viewInflaterClass
+attr voiceIcon
+attr windowActionBar
+attr windowActionBarOverlay
+attr windowActionModeOverlay
+attr windowFixedHeightMajor
+attr windowFixedHeightMinor
+attr windowFixedWidthMajor
+attr windowFixedWidthMinor
+attr windowMinWidthMajor
+attr windowMinWidthMinor
+attr windowNoTitle
+bool abc_action_bar_embed_tabs
+bool abc_allow_stacked_button_bar
+bool abc_config_actionMenuItemAllCaps
+color abc_background_cache_hint_selector_material_dark
+color abc_background_cache_hint_selector_material_light
+color abc_btn_colored_borderless_text_material
+color abc_btn_colored_text_material
+color abc_color_highlight_material
+color abc_hint_foreground_material_dark
+color abc_hint_foreground_material_light
+color abc_input_method_navigation_guard
+color abc_primary_text_disable_only_material_dark
+color abc_primary_text_disable_only_material_light
+color abc_primary_text_material_dark
+color abc_primary_text_material_light
+color abc_search_url_text
+color abc_search_url_text_normal
+color abc_search_url_text_pressed
+color abc_search_url_text_selected
+color abc_secondary_text_material_dark
+color abc_secondary_text_material_light
+color abc_tint_btn_checkable
+color abc_tint_default
+color abc_tint_edittext
+color abc_tint_seek_thumb
+color abc_tint_spinner
+color abc_tint_switch_track
+color accent_material_dark
+color accent_material_light
+color androidx_core_ripple_material_light
+color androidx_core_secondary_text_default_material_light
+color background_floating_material_dark
+color background_floating_material_light
+color background_material_dark
+color background_material_light
+color bright_foreground_disabled_material_dark
+color bright_foreground_disabled_material_light
+color bright_foreground_inverse_material_dark
+color bright_foreground_inverse_material_light
+color bright_foreground_material_dark
+color bright_foreground_material_light
+color button_material_dark
+color button_material_light
+color catalyst_redbox_background
+color dim_foreground_disabled_material_dark
+color dim_foreground_disabled_material_light
+color dim_foreground_material_dark
+color dim_foreground_material_light
+color error_color_material_dark
+color error_color_material_light
+color foreground_material_dark
+color foreground_material_light
+color highlighted_text_material_dark
+color highlighted_text_material_light
+color material_blue_grey_800
+color material_blue_grey_900
+color material_blue_grey_950
+color material_deep_teal_200
+color material_deep_teal_500
+color material_grey_100
+color material_grey_300
+color material_grey_50
+color material_grey_600
+color material_grey_800
+color material_grey_850
+color material_grey_900
+color notification_action_color_filter
+color notification_icon_bg_color
+color primary_dark_material_dark
+color primary_dark_material_light
+color primary_material_dark
+color primary_material_light
+color primary_text_default_material_dark
+color primary_text_default_material_light
+color primary_text_disabled_material_dark
+color primary_text_disabled_material_light
+color ripple_material_dark
+color ripple_material_light
+color secondary_text_default_material_dark
+color secondary_text_default_material_light
+color secondary_text_disabled_material_dark
+color secondary_text_disabled_material_light
+color switch_thumb_disabled_material_dark
+color switch_thumb_disabled_material_light
+color switch_thumb_material_dark
+color switch_thumb_material_light
+color switch_thumb_normal_material_dark
+color switch_thumb_normal_material_light
+color tooltip_background_dark
+color tooltip_background_light
+dimen abc_action_bar_content_inset_material
+dimen abc_action_bar_content_inset_with_nav
+dimen abc_action_bar_default_height_material
+dimen abc_action_bar_default_padding_end_material
+dimen abc_action_bar_default_padding_start_material
+dimen abc_action_bar_elevation_material
+dimen abc_action_bar_icon_vertical_padding_material
+dimen abc_action_bar_overflow_padding_end_material
+dimen abc_action_bar_overflow_padding_start_material
+dimen abc_action_bar_stacked_max_height
+dimen abc_action_bar_stacked_tab_max_width
+dimen abc_action_bar_subtitle_bottom_margin_material
+dimen abc_action_bar_subtitle_top_margin_material
+dimen abc_action_button_min_height_material
+dimen abc_action_button_min_width_material
+dimen abc_action_button_min_width_overflow_material
+dimen abc_alert_dialog_button_bar_height
+dimen abc_alert_dialog_button_dimen
+dimen abc_button_inset_horizontal_material
+dimen abc_button_inset_vertical_material
+dimen abc_button_padding_horizontal_material
+dimen abc_button_padding_vertical_material
+dimen abc_cascading_menus_min_smallest_width
+dimen abc_config_prefDialogWidth
+dimen abc_control_corner_material
+dimen abc_control_inset_material
+dimen abc_control_padding_material
+dimen abc_dialog_corner_radius_material
+dimen abc_dialog_fixed_height_major
+dimen abc_dialog_fixed_height_minor
+dimen abc_dialog_fixed_width_major
+dimen abc_dialog_fixed_width_minor
+dimen abc_dialog_list_padding_bottom_no_buttons
+dimen abc_dialog_list_padding_top_no_title
+dimen abc_dialog_min_width_major
+dimen abc_dialog_min_width_minor
+dimen abc_dialog_padding_material
+dimen abc_dialog_padding_top_material
+dimen abc_dialog_title_divider_material
+dimen abc_disabled_alpha_material_dark
+dimen abc_disabled_alpha_material_light
+dimen abc_dropdownitem_icon_width
+dimen abc_dropdownitem_text_padding_left
+dimen abc_dropdownitem_text_padding_right
+dimen abc_edit_text_inset_bottom_material
+dimen abc_edit_text_inset_horizontal_material
+dimen abc_edit_text_inset_top_material
+dimen abc_floating_window_z
+dimen abc_list_item_padding_horizontal_material
+dimen abc_panel_menu_list_width
+dimen abc_progress_bar_height_material
+dimen abc_search_view_preferred_height
+dimen abc_search_view_preferred_width
+dimen abc_seekbar_track_background_height_material
+dimen abc_seekbar_track_progress_height_material
+dimen abc_select_dialog_padding_start_material
+dimen abc_switch_padding
+dimen abc_text_size_body_1_material
+dimen abc_text_size_body_2_material
+dimen abc_text_size_button_material
+dimen abc_text_size_caption_material
+dimen abc_text_size_display_1_material
+dimen abc_text_size_display_2_material
+dimen abc_text_size_display_3_material
+dimen abc_text_size_display_4_material
+dimen abc_text_size_headline_material
+dimen abc_text_size_large_material
+dimen abc_text_size_medium_material
+dimen abc_text_size_menu_header_material
+dimen abc_text_size_menu_material
+dimen abc_text_size_small_material
+dimen abc_text_size_subhead_material
+dimen abc_text_size_subtitle_material_toolbar
+dimen abc_text_size_title_material
+dimen abc_text_size_title_material_toolbar
+dimen compat_button_inset_horizontal_material
+dimen compat_button_inset_vertical_material
+dimen compat_button_padding_horizontal_material
+dimen compat_button_padding_vertical_material
+dimen compat_control_corner_material
+dimen compat_notification_large_icon_max_height
+dimen compat_notification_large_icon_max_width
+dimen disabled_alpha_material_dark
+dimen disabled_alpha_material_light
+dimen highlight_alpha_material_colored
+dimen highlight_alpha_material_dark
+dimen highlight_alpha_material_light
+dimen hint_alpha_material_dark
+dimen hint_alpha_material_light
+dimen hint_pressed_alpha_material_dark
+dimen hint_pressed_alpha_material_light
+dimen notification_action_icon_size
+dimen notification_action_text_size
+dimen notification_big_circle_margin
+dimen notification_content_margin_start
+dimen notification_large_icon_height
+dimen notification_large_icon_width
+dimen notification_main_column_padding_top
+dimen notification_media_narrow_margin
+dimen notification_right_icon_size
+dimen notification_right_side_padding_top
+dimen notification_small_icon_background_padding
+dimen notification_small_icon_size_as_large
+dimen notification_subtext_size
+dimen notification_top_pad
+dimen notification_top_pad_large_text
+dimen tooltip_corner_radius
+dimen tooltip_horizontal_padding
+dimen tooltip_margin
+dimen tooltip_precise_anchor_extra_offset
+dimen tooltip_precise_anchor_threshold
+dimen tooltip_vertical_padding
+dimen tooltip_y_offset_non_touch
+dimen tooltip_y_offset_touch
+drawable abc_ab_share_pack_mtrl_alpha
+drawable abc_action_bar_item_background_material
+drawable abc_btn_borderless_material
+drawable abc_btn_check_material
+drawable abc_btn_check_to_on_mtrl_000
+drawable abc_btn_check_to_on_mtrl_015
+drawable abc_btn_colored_material
+drawable abc_btn_default_mtrl_shape
+drawable abc_btn_radio_material
+drawable abc_btn_radio_to_on_mtrl_000
+drawable abc_btn_radio_to_on_mtrl_015
+drawable abc_btn_switch_to_on_mtrl_00001
+drawable abc_btn_switch_to_on_mtrl_00012
+drawable abc_cab_background_internal_bg
+drawable abc_cab_background_top_material
+drawable abc_cab_background_top_mtrl_alpha
+drawable abc_control_background_material
+drawable abc_dialog_material_background
+drawable abc_edit_text_material
+drawable abc_ic_ab_back_material
+drawable abc_ic_arrow_drop_right_black_24dp
+drawable abc_ic_clear_material
+drawable abc_ic_commit_search_api_mtrl_alpha
+drawable abc_ic_go_search_api_material
+drawable abc_ic_menu_copy_mtrl_am_alpha
+drawable abc_ic_menu_cut_mtrl_alpha
+drawable abc_ic_menu_overflow_material
+drawable abc_ic_menu_paste_mtrl_am_alpha
+drawable abc_ic_menu_selectall_mtrl_alpha
+drawable abc_ic_menu_share_mtrl_alpha
+drawable abc_ic_search_api_material
+drawable abc_ic_star_black_16dp
+drawable abc_ic_star_black_36dp
+drawable abc_ic_star_black_48dp
+drawable abc_ic_star_half_black_16dp
+drawable abc_ic_star_half_black_36dp
+drawable abc_ic_star_half_black_48dp
+drawable abc_ic_voice_search_api_material
+drawable abc_item_background_holo_dark
+drawable abc_item_background_holo_light
+drawable abc_list_divider_material
+drawable abc_list_divider_mtrl_alpha
+drawable abc_list_focused_holo
+drawable abc_list_longpressed_holo
+drawable abc_list_pressed_holo_dark
+drawable abc_list_pressed_holo_light
+drawable abc_list_selector_background_transition_holo_dark
+drawable abc_list_selector_background_transition_holo_light
+drawable abc_list_selector_disabled_holo_dark
+drawable abc_list_selector_disabled_holo_light
+drawable abc_list_selector_holo_dark
+drawable abc_list_selector_holo_light
+drawable abc_menu_hardkey_panel_mtrl_mult
+drawable abc_popup_background_mtrl_mult
+drawable abc_ratingbar_indicator_material
+drawable abc_ratingbar_material
+drawable abc_ratingbar_small_material
+drawable abc_scrubber_control_off_mtrl_alpha
+drawable abc_scrubber_control_to_pressed_mtrl_000
+drawable abc_scrubber_control_to_pressed_mtrl_005
+drawable abc_scrubber_primary_mtrl_alpha
+drawable abc_scrubber_track_mtrl_alpha
+drawable abc_seekbar_thumb_material
+drawable abc_seekbar_tick_mark_material
+drawable abc_seekbar_track_material
+drawable abc_spinner_mtrl_am_alpha
+drawable abc_spinner_textfield_background_material
+drawable abc_switch_thumb_material
+drawable abc_switch_track_mtrl_alpha
+drawable abc_tab_indicator_material
+drawable abc_tab_indicator_mtrl_alpha
+drawable abc_text_cursor_material
+drawable abc_text_select_handle_left_mtrl_dark
+drawable abc_text_select_handle_left_mtrl_light
+drawable abc_text_select_handle_middle_mtrl_dark
+drawable abc_text_select_handle_middle_mtrl_light
+drawable abc_text_select_handle_right_mtrl_dark
+drawable abc_text_select_handle_right_mtrl_light
+drawable abc_textfield_activated_mtrl_alpha
+drawable abc_textfield_default_mtrl_alpha
+drawable abc_textfield_search_activated_mtrl_alpha
+drawable abc_textfield_search_default_mtrl_alpha
+drawable abc_textfield_search_material
+drawable abc_vector_test
+drawable notification_action_background
+drawable notification_bg
+drawable notification_bg_low
+drawable notification_bg_low_normal
+drawable notification_bg_low_pressed
+drawable notification_bg_normal
+drawable notification_bg_normal_pressed
+drawable notification_icon_background
+drawable notification_template_icon_bg
+drawable notification_template_icon_low_bg
+drawable notification_tile_bg
+drawable notify_panel_notification_icon_bg
+drawable redbox_top_border_background
+drawable tooltip_frame_dark
+drawable tooltip_frame_light
+id accessibility_action_clickable_span
+id accessibility_custom_action_0
+id accessibility_custom_action_1
+id accessibility_custom_action_10
+id accessibility_custom_action_11
+id accessibility_custom_action_12
+id accessibility_custom_action_13
+id accessibility_custom_action_14
+id accessibility_custom_action_15
+id accessibility_custom_action_16
+id accessibility_custom_action_17
+id accessibility_custom_action_18
+id accessibility_custom_action_19
+id accessibility_custom_action_2
+id accessibility_custom_action_20
+id accessibility_custom_action_21
+id accessibility_custom_action_22
+id accessibility_custom_action_23
+id accessibility_custom_action_24
+id accessibility_custom_action_25
+id accessibility_custom_action_26
+id accessibility_custom_action_27
+id accessibility_custom_action_28
+id accessibility_custom_action_29
+id accessibility_custom_action_3
+id accessibility_custom_action_30
+id accessibility_custom_action_31
+id accessibility_custom_action_4
+id accessibility_custom_action_5
+id accessibility_custom_action_6
+id accessibility_custom_action_7
+id accessibility_custom_action_8
+id accessibility_custom_action_9
+id accessibility_hint
+id accessibility_role
+id action_bar
+id action_bar_activity_content
+id action_bar_container
+id action_bar_root
+id action_bar_spinner
+id action_bar_subtitle
+id action_bar_title
+id action_container
+id action_context_bar
+id action_divider
+id action_image
+id action_menu_divider
+id action_menu_presenter
+id action_mode_bar
+id action_mode_bar_stub
+id action_mode_close_button
+id action_text
+id actions
+id activity_chooser_view_content
+id add
+id alertTitle
+id async
+id blocking
+id bottom
+id buttonPanel
+id catalyst_redbox_title
+id center
+id centerCrop
+id centerInside
+id checkbox
+id chronometer
+id content
+id contentPanel
+id custom
+id customPanel
+id decor_content_parent
+id default_activity_button
+id dialog_button
+id edit_query
+id end
+id expand_activities_button
+id expanded_menu
+id fitBottomStart
+id fitCenter
+id fitEnd
+id fitStart
+id fitXY
+id focusCrop
+id forever
+id fps_text
+id group_divider
+id home
+id icon
+id icon_group
+id image
+id info
+id italic
+id left
+id line1
+id line3
+id listMode
+id list_item
+id message
+id multiply
+id none
+id normal
+id notification_background
+id notification_main_column
+id notification_main_column_container
+id parentPanel
+id progress_circular
+id progress_horizontal
+id radio
+id react_test_id
+id right
+id right_icon
+id right_side
+id rn_frame_file
+id rn_frame_method
+id rn_redbox_copy_button
+id rn_redbox_dismiss_button
+id rn_redbox_line_separator
+id rn_redbox_loading_indicator
+id rn_redbox_reload_button
+id rn_redbox_report_button
+id rn_redbox_report_label
+id rn_redbox_stack
+id screen
+id scrollIndicatorDown
+id scrollIndicatorUp
+id scrollView
+id search_badge
+id search_bar
+id search_button
+id search_close_btn
+id search_edit_frame
+id search_go_btn
+id search_mag_icon
+id search_plate
+id search_src_text
+id search_voice_btn
+id select_dialog_listview
+id shortcut
+id spacer
+id split_action_bar
+id src_atop
+id src_in
+id src_over
+id start
+id submenuarrow
+id submit_area
+id tabMode
+id tag_accessibility_actions
+id tag_accessibility_clickable_spans
+id tag_accessibility_heading
+id tag_accessibility_pane_title
+id tag_screen_reader_focusable
+id tag_transition_group
+id tag_unhandled_key_event_manager
+id tag_unhandled_key_listeners
+id text
+id text2
+id textSpacerNoButtons
+id textSpacerNoTitle
+id time
+id title
+id titleDividerNoCustom
+id title_template
+id top
+id topPanel
+id uniform
+id up
+id view_tag_instance_handle
+id view_tag_native_id
+id wrap_content
+integer abc_config_activityDefaultDur
+integer abc_config_activityShortDur
+integer cancel_button_image_alpha
+integer config_tooltipAnimTime
+integer status_bar_notification_info_maxnum
+layout abc_action_bar_title_item
+layout abc_action_bar_up_container
+layout abc_action_menu_item_layout
+layout abc_action_menu_layout
+layout abc_action_mode_bar
+layout abc_action_mode_close_item_material
+layout abc_activity_chooser_view
+layout abc_activity_chooser_view_list_item
+layout abc_alert_dialog_button_bar_material
+layout abc_alert_dialog_material
+layout abc_alert_dialog_title_material
+layout abc_cascading_menu_item_layout
+layout abc_dialog_title_material
+layout abc_expanded_menu_layout
+layout abc_list_menu_item_checkbox
+layout abc_list_menu_item_icon
+layout abc_list_menu_item_layout
+layout abc_list_menu_item_radio
+layout abc_popup_menu_header_item_layout
+layout abc_popup_menu_item_layout
+layout abc_screen_content_include
+layout abc_screen_simple
+layout abc_screen_simple_overlay_action_mode
+layout abc_screen_toolbar
+layout abc_search_dropdown_item_icons_2line
+layout abc_search_view
+layout abc_select_dialog_material
+layout abc_tooltip
+layout custom_dialog
+layout dev_loading_view
+layout fps_view
+layout notification_action
+layout notification_action_tombstone
+layout notification_template_custom_big
+layout notification_template_icon_group
+layout notification_template_part_chronometer
+layout notification_template_part_time
+layout redbox_item_frame
+layout redbox_item_title
+layout redbox_view
+layout select_dialog_item_material
+layout select_dialog_multichoice_material
+layout select_dialog_singlechoice_material
+layout support_simple_spinner_dropdown_item
+string abc_action_bar_home_description
+string abc_action_bar_up_description
+string abc_action_menu_overflow_description
+string abc_action_mode_done
+string abc_activity_chooser_view_see_all
+string abc_activitychooserview_choose_application
+string abc_capital_off
+string abc_capital_on
+string abc_font_family_body_1_material
+string abc_font_family_body_2_material
+string abc_font_family_button_material
+string abc_font_family_caption_material
+string abc_font_family_display_1_material
+string abc_font_family_display_2_material
+string abc_font_family_display_3_material
+string abc_font_family_display_4_material
+string abc_font_family_headline_material
+string abc_font_family_menu_material
+string abc_font_family_subhead_material
+string abc_font_family_title_material
+string abc_menu_alt_shortcut_label
+string abc_menu_ctrl_shortcut_label
+string abc_menu_delete_shortcut_label
+string abc_menu_enter_shortcut_label
+string abc_menu_function_shortcut_label
+string abc_menu_meta_shortcut_label
+string abc_menu_shift_shortcut_label
+string abc_menu_space_shortcut_label
+string abc_menu_sym_shortcut_label
+string abc_prepend_shortcut_label
+string abc_search_hint
+string abc_searchview_description_clear
+string abc_searchview_description_query
+string abc_searchview_description_search
+string abc_searchview_description_submit
+string abc_searchview_description_voice
+string abc_shareactionprovider_share_with
+string abc_shareactionprovider_share_with_application
+string abc_toolbar_collapse_description
+string adjustable_description
+string catalyst_copy_button
+string catalyst_debugjs
+string catalyst_debugjs_nuclide
+string catalyst_debugjs_nuclide_failure
+string catalyst_debugjs_off
+string catalyst_dismiss_button
+string catalyst_element_inspector
+string catalyst_heap_capture
+string catalyst_hot_module_replacement
+string catalyst_hot_module_replacement_off
+string catalyst_jsload_error
+string catalyst_live_reload
+string catalyst_live_reload_off
+string catalyst_loading_from_url
+string catalyst_perf_monitor
+string catalyst_perf_monitor_off
+string catalyst_poke_sampling_profiler
+string catalyst_reload_button
+string catalyst_reloadjs
+string catalyst_remotedbg_error
+string catalyst_remotedbg_message
+string catalyst_report_button
+string catalyst_settings
+string catalyst_settings_title
+string header_description
+string image_button_description
+string image_description
+string link_description
+string search_description
+string search_menu_title
+string status_bar_notification_info_overflow
+style AlertDialog_AppCompat
+style AlertDialog_AppCompat_Light
+style Animation_AppCompat_Dialog
+style Animation_AppCompat_DropDownUp
+style Animation_AppCompat_Tooltip
+style Animation_Catalyst_RedBox
+style Base_AlertDialog_AppCompat
+style Base_AlertDialog_AppCompat_Light
+style Base_Animation_AppCompat_Dialog
+style Base_Animation_AppCompat_DropDownUp
+style Base_Animation_AppCompat_Tooltip
+style Base_DialogWindowTitleBackground_AppCompat
+style Base_DialogWindowTitle_AppCompat
+style Base_TextAppearance_AppCompat
+style Base_TextAppearance_AppCompat_Body1
+style Base_TextAppearance_AppCompat_Body2
+style Base_TextAppearance_AppCompat_Button
+style Base_TextAppearance_AppCompat_Caption
+style Base_TextAppearance_AppCompat_Display1
+style Base_TextAppearance_AppCompat_Display2
+style Base_TextAppearance_AppCompat_Display3
+style Base_TextAppearance_AppCompat_Display4
+style Base_TextAppearance_AppCompat_Headline
+style Base_TextAppearance_AppCompat_Inverse
+style Base_TextAppearance_AppCompat_Large
+style Base_TextAppearance_AppCompat_Large_Inverse
+style Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
+style Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
+style Base_TextAppearance_AppCompat_Medium
+style Base_TextAppearance_AppCompat_Medium_Inverse
+style Base_TextAppearance_AppCompat_Menu
+style Base_TextAppearance_AppCompat_SearchResult
+style Base_TextAppearance_AppCompat_SearchResult_Subtitle
+style Base_TextAppearance_AppCompat_SearchResult_Title
+style Base_TextAppearance_AppCompat_Small
+style Base_TextAppearance_AppCompat_Small_Inverse
+style Base_TextAppearance_AppCompat_Subhead
+style Base_TextAppearance_AppCompat_Subhead_Inverse
+style Base_TextAppearance_AppCompat_Title
+style Base_TextAppearance_AppCompat_Title_Inverse
+style Base_TextAppearance_AppCompat_Tooltip
+style Base_TextAppearance_AppCompat_Widget_ActionBar_Menu
+style Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle
+style Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
+style Base_TextAppearance_AppCompat_Widget_ActionBar_Title
+style Base_TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
+style Base_TextAppearance_AppCompat_Widget_ActionMode_Subtitle
+style Base_TextAppearance_AppCompat_Widget_ActionMode_Title
+style Base_TextAppearance_AppCompat_Widget_Button
+style Base_TextAppearance_AppCompat_Widget_Button_Borderless_Colored
+style Base_TextAppearance_AppCompat_Widget_Button_Colored
+style Base_TextAppearance_AppCompat_Widget_Button_Inverse
+style Base_TextAppearance_AppCompat_Widget_DropDownItem
+style Base_TextAppearance_AppCompat_Widget_PopupMenu_Header
+style Base_TextAppearance_AppCompat_Widget_PopupMenu_Large
+style Base_TextAppearance_AppCompat_Widget_PopupMenu_Small
+style Base_TextAppearance_AppCompat_Widget_Switch
+style Base_TextAppearance_AppCompat_Widget_TextView_SpinnerItem
+style Base_TextAppearance_Widget_AppCompat_ExpandedMenu_Item
+style Base_TextAppearance_Widget_AppCompat_Toolbar_Subtitle
+style Base_TextAppearance_Widget_AppCompat_Toolbar_Title
+style Base_ThemeOverlay_AppCompat
+style Base_ThemeOverlay_AppCompat_ActionBar
+style Base_ThemeOverlay_AppCompat_Dark
+style Base_ThemeOverlay_AppCompat_Dark_ActionBar
+style Base_ThemeOverlay_AppCompat_Dialog
+style Base_ThemeOverlay_AppCompat_Dialog_Alert
+style Base_ThemeOverlay_AppCompat_Light
+style Base_Theme_AppCompat
+style Base_Theme_AppCompat_CompactMenu
+style Base_Theme_AppCompat_Dialog
+style Base_Theme_AppCompat_DialogWhenLarge
+style Base_Theme_AppCompat_Dialog_Alert
+style Base_Theme_AppCompat_Dialog_FixedSize
+style Base_Theme_AppCompat_Dialog_MinWidth
+style Base_Theme_AppCompat_Light
+style Base_Theme_AppCompat_Light_DarkActionBar
+style Base_Theme_AppCompat_Light_Dialog
+style Base_Theme_AppCompat_Light_DialogWhenLarge
+style Base_Theme_AppCompat_Light_Dialog_Alert
+style Base_Theme_AppCompat_Light_Dialog_FixedSize
+style Base_Theme_AppCompat_Light_Dialog_MinWidth
+style Base_V21_ThemeOverlay_AppCompat_Dialog
+style Base_V21_Theme_AppCompat
+style Base_V21_Theme_AppCompat_Dialog
+style Base_V21_Theme_AppCompat_Light
+style Base_V21_Theme_AppCompat_Light_Dialog
+style Base_V22_Theme_AppCompat
+style Base_V22_Theme_AppCompat_Light
+style Base_V23_Theme_AppCompat
+style Base_V23_Theme_AppCompat_Light
+style Base_V26_Theme_AppCompat
+style Base_V26_Theme_AppCompat_Light
+style Base_V26_Widget_AppCompat_Toolbar
+style Base_V28_Theme_AppCompat
+style Base_V28_Theme_AppCompat_Light
+style Base_V7_ThemeOverlay_AppCompat_Dialog
+style Base_V7_Theme_AppCompat
+style Base_V7_Theme_AppCompat_Dialog
+style Base_V7_Theme_AppCompat_Light
+style Base_V7_Theme_AppCompat_Light_Dialog
+style Base_V7_Widget_AppCompat_AutoCompleteTextView
+style Base_V7_Widget_AppCompat_EditText
+style Base_V7_Widget_AppCompat_Toolbar
+style Base_Widget_AppCompat_ActionBar
+style Base_Widget_AppCompat_ActionBar_Solid
+style Base_Widget_AppCompat_ActionBar_TabBar
+style Base_Widget_AppCompat_ActionBar_TabText
+style Base_Widget_AppCompat_ActionBar_TabView
+style Base_Widget_AppCompat_ActionButton
+style Base_Widget_AppCompat_ActionButton_CloseMode
+style Base_Widget_AppCompat_ActionButton_Overflow
+style Base_Widget_AppCompat_ActionMode
+style Base_Widget_AppCompat_ActivityChooserView
+style Base_Widget_AppCompat_AutoCompleteTextView
+style Base_Widget_AppCompat_Button
+style Base_Widget_AppCompat_ButtonBar
+style Base_Widget_AppCompat_ButtonBar_AlertDialog
+style Base_Widget_AppCompat_Button_Borderless
+style Base_Widget_AppCompat_Button_Borderless_Colored
+style Base_Widget_AppCompat_Button_ButtonBar_AlertDialog
+style Base_Widget_AppCompat_Button_Colored
+style Base_Widget_AppCompat_Button_Small
+style Base_Widget_AppCompat_CompoundButton_CheckBox
+style Base_Widget_AppCompat_CompoundButton_RadioButton
+style Base_Widget_AppCompat_CompoundButton_Switch
+style Base_Widget_AppCompat_DrawerArrowToggle
+style Base_Widget_AppCompat_DrawerArrowToggle_Common
+style Base_Widget_AppCompat_DropDownItem_Spinner
+style Base_Widget_AppCompat_EditText
+style Base_Widget_AppCompat_ImageButton
+style Base_Widget_AppCompat_Light_ActionBar
+style Base_Widget_AppCompat_Light_ActionBar_Solid
+style Base_Widget_AppCompat_Light_ActionBar_TabBar
+style Base_Widget_AppCompat_Light_ActionBar_TabText
+style Base_Widget_AppCompat_Light_ActionBar_TabText_Inverse
+style Base_Widget_AppCompat_Light_ActionBar_TabView
+style Base_Widget_AppCompat_Light_PopupMenu
+style Base_Widget_AppCompat_Light_PopupMenu_Overflow
+style Base_Widget_AppCompat_ListMenuView
+style Base_Widget_AppCompat_ListPopupWindow
+style Base_Widget_AppCompat_ListView
+style Base_Widget_AppCompat_ListView_DropDown
+style Base_Widget_AppCompat_ListView_Menu
+style Base_Widget_AppCompat_PopupMenu
+style Base_Widget_AppCompat_PopupMenu_Overflow
+style Base_Widget_AppCompat_PopupWindow
+style Base_Widget_AppCompat_ProgressBar
+style Base_Widget_AppCompat_ProgressBar_Horizontal
+style Base_Widget_AppCompat_RatingBar
+style Base_Widget_AppCompat_RatingBar_Indicator
+style Base_Widget_AppCompat_RatingBar_Small
+style Base_Widget_AppCompat_SearchView
+style Base_Widget_AppCompat_SearchView_ActionBar
+style Base_Widget_AppCompat_SeekBar
+style Base_Widget_AppCompat_SeekBar_Discrete
+style Base_Widget_AppCompat_Spinner
+style Base_Widget_AppCompat_Spinner_Underlined
+style Base_Widget_AppCompat_TextView_SpinnerItem
+style Base_Widget_AppCompat_Toolbar
+style Base_Widget_AppCompat_Toolbar_Button_Navigation
+style CalendarDatePickerDialog
+style CalendarDatePickerStyle
+style ClockTimePickerDialog
+style ClockTimePickerStyle
+style DialogAnimationFade
+style DialogAnimationSlide
+style Platform_AppCompat
+style Platform_AppCompat_Light
+style Platform_ThemeOverlay_AppCompat
+style Platform_ThemeOverlay_AppCompat_Dark
+style Platform_ThemeOverlay_AppCompat_Light
+style Platform_V21_AppCompat
+style Platform_V21_AppCompat_Light
+style Platform_V25_AppCompat
+style Platform_V25_AppCompat_Light
+style Platform_Widget_AppCompat_Spinner
+style RtlOverlay_DialogWindowTitle_AppCompat
+style RtlOverlay_Widget_AppCompat_ActionBar_TitleItem
+style RtlOverlay_Widget_AppCompat_DialogTitle_Icon
+style RtlOverlay_Widget_AppCompat_PopupMenuItem
+style RtlOverlay_Widget_AppCompat_PopupMenuItem_InternalGroup
+style RtlOverlay_Widget_AppCompat_PopupMenuItem_Shortcut
+style RtlOverlay_Widget_AppCompat_PopupMenuItem_SubmenuArrow
+style RtlOverlay_Widget_AppCompat_PopupMenuItem_Text
+style RtlOverlay_Widget_AppCompat_PopupMenuItem_Title
+style RtlOverlay_Widget_AppCompat_SearchView_MagIcon
+style RtlOverlay_Widget_AppCompat_Search_DropDown
+style RtlOverlay_Widget_AppCompat_Search_DropDown_Icon1
+style RtlOverlay_Widget_AppCompat_Search_DropDown_Icon2
+style RtlOverlay_Widget_AppCompat_Search_DropDown_Query
+style RtlOverlay_Widget_AppCompat_Search_DropDown_Text
+style RtlUnderlay_Widget_AppCompat_ActionButton
+style RtlUnderlay_Widget_AppCompat_ActionButton_Overflow
+style SpinnerDatePickerDialog
+style SpinnerDatePickerStyle
+style SpinnerTimePickerDialog
+style SpinnerTimePickerStyle
+style TextAppearance_AppCompat
+style TextAppearance_AppCompat_Body1
+style TextAppearance_AppCompat_Body2
+style TextAppearance_AppCompat_Button
+style TextAppearance_AppCompat_Caption
+style TextAppearance_AppCompat_Display1
+style TextAppearance_AppCompat_Display2
+style TextAppearance_AppCompat_Display3
+style TextAppearance_AppCompat_Display4
+style TextAppearance_AppCompat_Headline
+style TextAppearance_AppCompat_Inverse
+style TextAppearance_AppCompat_Large
+style TextAppearance_AppCompat_Large_Inverse
+style TextAppearance_AppCompat_Light_SearchResult_Subtitle
+style TextAppearance_AppCompat_Light_SearchResult_Title
+style TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
+style TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
+style TextAppearance_AppCompat_Medium
+style TextAppearance_AppCompat_Medium_Inverse
+style TextAppearance_AppCompat_Menu
+style TextAppearance_AppCompat_SearchResult_Subtitle
+style TextAppearance_AppCompat_SearchResult_Title
+style TextAppearance_AppCompat_Small
+style TextAppearance_AppCompat_Small_Inverse
+style TextAppearance_AppCompat_Subhead
+style TextAppearance_AppCompat_Subhead_Inverse
+style TextAppearance_AppCompat_Title
+style TextAppearance_AppCompat_Title_Inverse
+style TextAppearance_AppCompat_Tooltip
+style TextAppearance_AppCompat_Widget_ActionBar_Menu
+style TextAppearance_AppCompat_Widget_ActionBar_Subtitle
+style TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
+style TextAppearance_AppCompat_Widget_ActionBar_Title
+style TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
+style TextAppearance_AppCompat_Widget_ActionMode_Subtitle
+style TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse
+style TextAppearance_AppCompat_Widget_ActionMode_Title
+style TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse
+style TextAppearance_AppCompat_Widget_Button
+style TextAppearance_AppCompat_Widget_Button_Borderless_Colored
+style TextAppearance_AppCompat_Widget_Button_Colored
+style TextAppearance_AppCompat_Widget_Button_Inverse
+style TextAppearance_AppCompat_Widget_DropDownItem
+style TextAppearance_AppCompat_Widget_PopupMenu_Header
+style TextAppearance_AppCompat_Widget_PopupMenu_Large
+style TextAppearance_AppCompat_Widget_PopupMenu_Small
+style TextAppearance_AppCompat_Widget_Switch
+style TextAppearance_AppCompat_Widget_TextView_SpinnerItem
+style TextAppearance_Compat_Notification
+style TextAppearance_Compat_Notification_Info
+style TextAppearance_Compat_Notification_Line2
+style TextAppearance_Compat_Notification_Time
+style TextAppearance_Compat_Notification_Title
+style TextAppearance_Widget_AppCompat_ExpandedMenu_Item
+style TextAppearance_Widget_AppCompat_Toolbar_Subtitle
+style TextAppearance_Widget_AppCompat_Toolbar_Title
+style Theme
+style ThemeOverlay_AppCompat
+style ThemeOverlay_AppCompat_ActionBar
+style ThemeOverlay_AppCompat_Dark
+style ThemeOverlay_AppCompat_Dark_ActionBar
+style ThemeOverlay_AppCompat_Dialog
+style ThemeOverlay_AppCompat_Dialog_Alert
+style ThemeOverlay_AppCompat_Light
+style Theme_AppCompat
+style Theme_AppCompat_CompactMenu
+style Theme_AppCompat_DayNight
+style Theme_AppCompat_DayNight_DarkActionBar
+style Theme_AppCompat_DayNight_Dialog
+style Theme_AppCompat_DayNight_DialogWhenLarge
+style Theme_AppCompat_DayNight_Dialog_Alert
+style Theme_AppCompat_DayNight_Dialog_MinWidth
+style Theme_AppCompat_DayNight_NoActionBar
+style Theme_AppCompat_Dialog
+style Theme_AppCompat_DialogWhenLarge
+style Theme_AppCompat_Dialog_Alert
+style Theme_AppCompat_Dialog_MinWidth
+style Theme_AppCompat_Light
+style Theme_AppCompat_Light_DarkActionBar
+style Theme_AppCompat_Light_Dialog
+style Theme_AppCompat_Light_DialogWhenLarge
+style Theme_AppCompat_Light_Dialog_Alert
+style Theme_AppCompat_Light_Dialog_MinWidth
+style Theme_AppCompat_Light_NoActionBar
+style Theme_AppCompat_NoActionBar
+style Theme_Catalyst
+style Theme_Catalyst_RedBox
+style Theme_FullScreenDialog
+style Theme_FullScreenDialogAnimatedFade
+style Theme_FullScreenDialogAnimatedSlide
+style Theme_ReactNative_AppCompat_Light
+style Theme_ReactNative_AppCompat_Light_NoActionBar_FullScreen
+style Widget_AppCompat_ActionBar
+style Widget_AppCompat_ActionBar_Solid
+style Widget_AppCompat_ActionBar_TabBar
+style Widget_AppCompat_ActionBar_TabText
+style Widget_AppCompat_ActionBar_TabView
+style Widget_AppCompat_ActionButton
+style Widget_AppCompat_ActionButton_CloseMode
+style Widget_AppCompat_ActionButton_Overflow
+style Widget_AppCompat_ActionMode
+style Widget_AppCompat_ActivityChooserView
+style Widget_AppCompat_AutoCompleteTextView
+style Widget_AppCompat_Button
+style Widget_AppCompat_ButtonBar
+style Widget_AppCompat_ButtonBar_AlertDialog
+style Widget_AppCompat_Button_Borderless
+style Widget_AppCompat_Button_Borderless_Colored
+style Widget_AppCompat_Button_ButtonBar_AlertDialog
+style Widget_AppCompat_Button_Colored
+style Widget_AppCompat_Button_Small
+style Widget_AppCompat_CompoundButton_CheckBox
+style Widget_AppCompat_CompoundButton_RadioButton
+style Widget_AppCompat_CompoundButton_Switch
+style Widget_AppCompat_DrawerArrowToggle
+style Widget_AppCompat_DropDownItem_Spinner
+style Widget_AppCompat_EditText
+style Widget_AppCompat_ImageButton
+style Widget_AppCompat_Light_ActionBar
+style Widget_AppCompat_Light_ActionBar_Solid
+style Widget_AppCompat_Light_ActionBar_Solid_Inverse
+style Widget_AppCompat_Light_ActionBar_TabBar
+style Widget_AppCompat_Light_ActionBar_TabBar_Inverse
+style Widget_AppCompat_Light_ActionBar_TabText
+style Widget_AppCompat_Light_ActionBar_TabText_Inverse
+style Widget_AppCompat_Light_ActionBar_TabView
+style Widget_AppCompat_Light_ActionBar_TabView_Inverse
+style Widget_AppCompat_Light_ActionButton
+style Widget_AppCompat_Light_ActionButton_CloseMode
+style Widget_AppCompat_Light_ActionButton_Overflow
+style Widget_AppCompat_Light_ActionMode_Inverse
+style Widget_AppCompat_Light_ActivityChooserView
+style Widget_AppCompat_Light_AutoCompleteTextView
+style Widget_AppCompat_Light_DropDownItem_Spinner
+style Widget_AppCompat_Light_ListPopupWindow
+style Widget_AppCompat_Light_ListView_DropDown
+style Widget_AppCompat_Light_PopupMenu
+style Widget_AppCompat_Light_PopupMenu_Overflow
+style Widget_AppCompat_Light_SearchView
+style Widget_AppCompat_Light_Spinner_DropDown_ActionBar
+style Widget_AppCompat_ListMenuView
+style Widget_AppCompat_ListPopupWindow
+style Widget_AppCompat_ListView
+style Widget_AppCompat_ListView_DropDown
+style Widget_AppCompat_ListView_Menu
+style Widget_AppCompat_PopupMenu
+style Widget_AppCompat_PopupMenu_Overflow
+style Widget_AppCompat_PopupWindow
+style Widget_AppCompat_ProgressBar
+style Widget_AppCompat_ProgressBar_Horizontal
+style Widget_AppCompat_RatingBar
+style Widget_AppCompat_RatingBar_Indicator
+style Widget_AppCompat_RatingBar_Small
+style Widget_AppCompat_SearchView
+style Widget_AppCompat_SearchView_ActionBar
+style Widget_AppCompat_SeekBar
+style Widget_AppCompat_SeekBar_Discrete
+style Widget_AppCompat_Spinner
+style Widget_AppCompat_Spinner_DropDown
+style Widget_AppCompat_Spinner_DropDown_ActionBar
+style Widget_AppCompat_Spinner_Underlined
+style Widget_AppCompat_TextView_SpinnerItem
+style Widget_AppCompat_Toolbar
+style Widget_AppCompat_Toolbar_Button_Navigation
+style Widget_Compat_NotificationActionContainer
+style Widget_Compat_NotificationActionText
+style Widget_Support_CoordinatorLayout
+style redboxButton
+styleable ActionBar background backgroundSplit backgroundStacked contentInsetEnd contentInsetEndWithActions contentInsetLeft contentInsetRight contentInsetStart contentInsetStartWithNavigation customNavigationLayout displayOptions divider elevation height hideOnContentScroll homeAsUpIndicator homeLayout icon indeterminateProgressStyle itemPadding logo navigationMode popupTheme progressBarPadding progressBarStyle subtitle subtitleTextStyle title titleTextStyle
+styleable ActionBarLayout android_layout_gravity
+styleable ActionMenuItemView android_minWidth
+styleable ActionMenuView
+styleable ActionMode background backgroundSplit closeItemLayout height subtitleTextStyle titleTextStyle
+styleable ActivityChooserView expandActivityOverflowButtonDrawable initialActivityCount
+styleable AlertDialog android_layout buttonIconDimen buttonPanelSideLayout listItemLayout listLayout multiChoiceItemLayout showTitle singleChoiceItemLayout
+styleable AnimatedStateListDrawableCompat android_constantSize android_dither android_enterFadeDuration android_exitFadeDuration android_variablePadding android_visible
+styleable AnimatedStateListDrawableItem android_drawable android_id
+styleable AnimatedStateListDrawableTransition android_drawable android_fromId android_reversible android_toId
+styleable AppCompatImageView android_src srcCompat tint tintMode
+styleable AppCompatSeekBar android_thumb tickMark tickMarkTint tickMarkTintMode
+styleable AppCompatTextHelper android_drawableBottom android_drawableEnd android_drawableLeft android_drawableRight android_drawableStart android_drawableTop android_textAppearance
+styleable AppCompatTextView android_textAppearance autoSizeMaxTextSize autoSizeMinTextSize autoSizePresetSizes autoSizeStepGranularity autoSizeTextType firstBaselineToTopHeight fontFamily lastBaselineToBottomHeight lineHeight textAllCaps
+styleable AppCompatTheme actionBarDivider actionBarItemBackground actionBarPopupTheme actionBarSize actionBarSplitStyle actionBarStyle actionBarTabBarStyle actionBarTabStyle actionBarTabTextStyle actionBarTheme actionBarWidgetTheme actionButtonStyle actionDropDownStyle actionMenuTextAppearance actionMenuTextColor actionModeBackground actionModeCloseButtonStyle actionModeCloseDrawable actionModeCopyDrawable actionModeCutDrawable actionModeFindDrawable actionModePasteDrawable actionModePopupWindowStyle actionModeSelectAllDrawable actionModeShareDrawable actionModeSplitBackground actionModeStyle actionModeWebSearchDrawable actionOverflowButtonStyle actionOverflowMenuStyle activityChooserViewStyle alertDialogButtonGroupStyle alertDialogCenterButtons alertDialogStyle alertDialogTheme android_windowAnimationStyle android_windowIsFloating autoCompleteTextViewStyle borderlessButtonStyle buttonBarButtonStyle buttonBarNegativeButtonStyle buttonBarNeutralButtonStyle buttonBarPositiveButtonStyle buttonBarStyle buttonStyle buttonStyleSmall checkboxStyle checkedTextViewStyle colorAccent colorBackgroundFloating colorButtonNormal colorControlActivated colorControlHighlight colorControlNormal colorError colorPrimary colorPrimaryDark colorSwitchThumbNormal controlBackground dialogCornerRadius dialogPreferredPadding dialogTheme dividerHorizontal dividerVertical dropDownListViewStyle dropdownListPreferredItemHeight editTextBackground editTextColor editTextStyle homeAsUpIndicator imageButtonStyle listChoiceBackgroundIndicator listDividerAlertDialog listMenuViewStyle listPopupWindowStyle listPreferredItemHeight listPreferredItemHeightLarge listPreferredItemHeightSmall listPreferredItemPaddingLeft listPreferredItemPaddingRight panelBackground panelMenuListTheme panelMenuListWidth popupMenuStyle popupWindowStyle radioButtonStyle ratingBarStyle ratingBarStyleIndicator ratingBarStyleSmall searchViewStyle seekBarStyle selectableItemBackground selectableItemBackgroundBorderless spinnerDropDownItemStyle spinnerStyle switchStyle textAppearanceLargePopupMenu textAppearanceListItem textAppearanceListItemSecondary textAppearanceListItemSmall textAppearancePopupMenuHeader textAppearanceSearchResultSubtitle textAppearanceSearchResultTitle textAppearanceSmallPopupMenu textColorAlertDialogListItem textColorSearchUrl toolbarNavigationButtonStyle toolbarStyle tooltipForegroundColor tooltipFrameBackground viewInflaterClass windowActionBar windowActionBarOverlay windowActionModeOverlay windowFixedHeightMajor windowFixedHeightMinor windowFixedWidthMajor windowFixedWidthMinor windowMinWidthMajor windowMinWidthMinor windowNoTitle
+styleable ButtonBarLayout allowStacking
+styleable ColorStateListItem alpha android_alpha android_color
+styleable CompoundButton android_button buttonTint buttonTintMode
+styleable CoordinatorLayout keylines statusBarBackground
+styleable CoordinatorLayout_Layout android_layout_gravity layout_anchor layout_anchorGravity layout_behavior layout_dodgeInsetEdges layout_insetEdge layout_keyline
+styleable DrawerArrowToggle arrowHeadLength arrowShaftLength barLength color drawableSize gapBetweenBars spinBars thickness
+styleable FontFamily fontProviderAuthority fontProviderCerts fontProviderFetchStrategy fontProviderFetchTimeout fontProviderPackage fontProviderQuery
+styleable FontFamilyFont android_font android_fontStyle android_fontVariationSettings android_fontWeight android_ttcIndex font fontStyle fontVariationSettings fontWeight ttcIndex
+styleable GenericDraweeHierarchy actualImageScaleType backgroundImage fadeDuration failureImage failureImageScaleType overlayImage placeholderImage placeholderImageScaleType pressedStateOverlayImage progressBarAutoRotateInterval progressBarImage progressBarImageScaleType retryImage retryImageScaleType roundAsCircle roundBottomEnd roundBottomLeft roundBottomRight roundBottomStart roundTopEnd roundTopLeft roundTopRight roundTopStart roundWithOverlayColor roundedCornerRadius roundingBorderColor roundingBorderPadding roundingBorderWidth viewAspectRatio
+styleable GradientColor android_centerColor android_centerX android_centerY android_endColor android_endX android_endY android_gradientRadius android_startColor android_startX android_startY android_tileMode android_type
+styleable GradientColorItem android_color android_offset
+styleable LinearLayoutCompat android_baselineAligned android_baselineAlignedChildIndex android_gravity android_orientation android_weightSum divider dividerPadding measureWithLargestChild showDividers
+styleable LinearLayoutCompat_Layout android_layout_gravity android_layout_height android_layout_weight android_layout_width
+styleable ListPopupWindow android_dropDownHorizontalOffset android_dropDownVerticalOffset
+styleable MenuGroup android_checkableBehavior android_enabled android_id android_menuCategory android_orderInCategory android_visible
+styleable MenuItem actionLayout actionProviderClass actionViewClass alphabeticModifiers android_alphabeticShortcut android_checkable android_checked android_enabled android_icon android_id android_menuCategory android_numericShortcut android_onClick android_orderInCategory android_title android_titleCondensed android_visible contentDescription iconTint iconTintMode numericModifiers showAsAction tooltipText
+styleable MenuView android_headerBackground android_horizontalDivider android_itemBackground android_itemIconDisabledAlpha android_itemTextAppearance android_verticalDivider android_windowAnimationStyle preserveIconSpacing subMenuArrow
+styleable PopupWindow android_popupAnimationStyle android_popupBackground overlapAnchor
+styleable PopupWindowBackgroundState state_above_anchor
+styleable RecycleListView paddingBottomNoButtons paddingTopNoTitle
+styleable SearchView android_focusable android_imeOptions android_inputType android_maxWidth closeIcon commitIcon defaultQueryHint goIcon iconifiedByDefault layout queryBackground queryHint searchHintIcon searchIcon submitBackground suggestionRowLayout voiceIcon
+styleable SimpleDraweeView actualImageResource actualImageScaleType actualImageUri backgroundImage fadeDuration failureImage failureImageScaleType overlayImage placeholderImage placeholderImageScaleType pressedStateOverlayImage progressBarAutoRotateInterval progressBarImage progressBarImageScaleType retryImage retryImageScaleType roundAsCircle roundBottomEnd roundBottomLeft roundBottomRight roundBottomStart roundTopEnd roundTopLeft roundTopRight roundTopStart roundWithOverlayColor roundedCornerRadius roundingBorderColor roundingBorderPadding roundingBorderWidth viewAspectRatio
+styleable Spinner android_dropDownWidth android_entries android_popupBackground android_prompt popupTheme
+styleable StateListDrawable android_constantSize android_dither android_enterFadeDuration android_exitFadeDuration android_variablePadding android_visible
+styleable StateListDrawableItem android_drawable
+styleable SwitchCompat android_textOff android_textOn android_thumb showText splitTrack switchMinWidth switchPadding switchTextAppearance thumbTextPadding thumbTint thumbTintMode track trackTint trackTintMode
+styleable TextAppearance android_fontFamily android_shadowColor android_shadowDx android_shadowDy android_shadowRadius android_textColor android_textColorHint android_textColorLink android_textSize android_textStyle android_typeface fontFamily textAllCaps
+styleable Toolbar android_gravity android_minHeight buttonGravity collapseContentDescription collapseIcon contentInsetEnd contentInsetEndWithActions contentInsetLeft contentInsetRight contentInsetStart contentInsetStartWithNavigation logo logoDescription maxButtonHeight navigationContentDescription navigationIcon popupTheme subtitle subtitleTextAppearance subtitleTextColor title titleMargin titleMarginBottom titleMarginEnd titleMarginStart titleMarginTop titleMargins titleTextAppearance titleTextColor
+styleable View android_focusable android_theme paddingEnd paddingStart theme
+styleable ViewBackgroundHelper android_background backgroundTint backgroundTintMode
+styleable ViewStubCompat android_id android_inflatedId android_layout
+xml imagepicker_provider_paths
+xml rn_dev_preferences
diff --git a/node_modules/react-native-image-picker/android/build/intermediates/symbols/debug/R.txt b/node_modules/react-native-image-picker/android/build/intermediates/symbols/debug/R.txt
new file mode 100644
index 0000000..b748f4c
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/intermediates/symbols/debug/R.txt
@@ -0,0 +1,1803 @@
+int anim abc_fade_in 0x7f010001
+int anim abc_fade_out 0x7f010002
+int anim abc_grow_fade_in_from_bottom 0x7f010003
+int anim abc_popup_enter 0x7f010004
+int anim abc_popup_exit 0x7f010005
+int anim abc_shrink_fade_out_from_bottom 0x7f010006
+int anim abc_slide_in_bottom 0x7f010007
+int anim abc_slide_in_top 0x7f010008
+int anim abc_slide_out_bottom 0x7f010009
+int anim abc_slide_out_top 0x7f01000a
+int anim abc_tooltip_enter 0x7f01000b
+int anim abc_tooltip_exit 0x7f01000c
+int anim catalyst_fade_in 0x7f01000d
+int anim catalyst_fade_out 0x7f01000e
+int anim catalyst_push_up_in 0x7f01000f
+int anim catalyst_push_up_out 0x7f010010
+int anim catalyst_slide_down 0x7f010011
+int anim catalyst_slide_up 0x7f010012
+int attr actionBarDivider 0x7f040001
+int attr actionBarItemBackground 0x7f040002
+int attr actionBarPopupTheme 0x7f040003
+int attr actionBarSize 0x7f040004
+int attr actionBarSplitStyle 0x7f040005
+int attr actionBarStyle 0x7f040006
+int attr actionBarTabBarStyle 0x7f040007
+int attr actionBarTabStyle 0x7f040008
+int attr actionBarTabTextStyle 0x7f040009
+int attr actionBarTheme 0x7f04000a
+int attr actionBarWidgetTheme 0x7f04000b
+int attr actionButtonStyle 0x7f04000c
+int attr actionDropDownStyle 0x7f04000d
+int attr actionLayout 0x7f04000e
+int attr actionMenuTextAppearance 0x7f04000f
+int attr actionMenuTextColor 0x7f040010
+int attr actionModeBackground 0x7f040011
+int attr actionModeCloseButtonStyle 0x7f040012
+int attr actionModeCloseDrawable 0x7f040013
+int attr actionModeCopyDrawable 0x7f040014
+int attr actionModeCutDrawable 0x7f040015
+int attr actionModeFindDrawable 0x7f040016
+int attr actionModePasteDrawable 0x7f040017
+int attr actionModePopupWindowStyle 0x7f040018
+int attr actionModeSelectAllDrawable 0x7f040019
+int attr actionModeShareDrawable 0x7f04001a
+int attr actionModeSplitBackground 0x7f04001b
+int attr actionModeStyle 0x7f04001c
+int attr actionModeWebSearchDrawable 0x7f04001d
+int attr actionOverflowButtonStyle 0x7f04001e
+int attr actionOverflowMenuStyle 0x7f04001f
+int attr actionProviderClass 0x7f040020
+int attr actionViewClass 0x7f040021
+int attr activityChooserViewStyle 0x7f040022
+int attr actualImageResource 0x7f040023
+int attr actualImageScaleType 0x7f040024
+int attr actualImageUri 0x7f040025
+int attr alertDialogButtonGroupStyle 0x7f040026
+int attr alertDialogCenterButtons 0x7f040027
+int attr alertDialogStyle 0x7f040028
+int attr alertDialogTheme 0x7f040029
+int attr allowStacking 0x7f04002a
+int attr alpha 0x7f04002b
+int attr alphabeticModifiers 0x7f04002c
+int attr arrowHeadLength 0x7f04002d
+int attr arrowShaftLength 0x7f04002e
+int attr autoCompleteTextViewStyle 0x7f04002f
+int attr autoSizeMaxTextSize 0x7f040030
+int attr autoSizeMinTextSize 0x7f040031
+int attr autoSizePresetSizes 0x7f040032
+int attr autoSizeStepGranularity 0x7f040033
+int attr autoSizeTextType 0x7f040034
+int attr background 0x7f040035
+int attr backgroundImage 0x7f040036
+int attr backgroundSplit 0x7f040037
+int attr backgroundStacked 0x7f040038
+int attr backgroundTint 0x7f040039
+int attr backgroundTintMode 0x7f04003a
+int attr barLength 0x7f04003b
+int attr borderlessButtonStyle 0x7f04003c
+int attr buttonBarButtonStyle 0x7f04003d
+int attr buttonBarNegativeButtonStyle 0x7f04003e
+int attr buttonBarNeutralButtonStyle 0x7f04003f
+int attr buttonBarPositiveButtonStyle 0x7f040040
+int attr buttonBarStyle 0x7f040041
+int attr buttonGravity 0x7f040042
+int attr buttonIconDimen 0x7f040043
+int attr buttonPanelSideLayout 0x7f040044
+int attr buttonStyle 0x7f040045
+int attr buttonStyleSmall 0x7f040046
+int attr buttonTint 0x7f040047
+int attr buttonTintMode 0x7f040048
+int attr checkboxStyle 0x7f040049
+int attr checkedTextViewStyle 0x7f04004a
+int attr closeIcon 0x7f04004b
+int attr closeItemLayout 0x7f04004c
+int attr collapseContentDescription 0x7f04004d
+int attr collapseIcon 0x7f04004e
+int attr color 0x7f04004f
+int attr colorAccent 0x7f040050
+int attr colorBackgroundFloating 0x7f040051
+int attr colorButtonNormal 0x7f040052
+int attr colorControlActivated 0x7f040053
+int attr colorControlHighlight 0x7f040054
+int attr colorControlNormal 0x7f040055
+int attr colorError 0x7f040056
+int attr colorPrimary 0x7f040057
+int attr colorPrimaryDark 0x7f040058
+int attr colorSwitchThumbNormal 0x7f040059
+int attr commitIcon 0x7f04005a
+int attr contentDescription 0x7f04005b
+int attr contentInsetEnd 0x7f04005c
+int attr contentInsetEndWithActions 0x7f04005d
+int attr contentInsetLeft 0x7f04005e
+int attr contentInsetRight 0x7f04005f
+int attr contentInsetStart 0x7f040060
+int attr contentInsetStartWithNavigation 0x7f040061
+int attr controlBackground 0x7f040062
+int attr coordinatorLayoutStyle 0x7f040063
+int attr customNavigationLayout 0x7f040064
+int attr defaultQueryHint 0x7f040065
+int attr dialogCornerRadius 0x7f040066
+int attr dialogPreferredPadding 0x7f040067
+int attr dialogTheme 0x7f040068
+int attr displayOptions 0x7f040069
+int attr divider 0x7f04006a
+int attr dividerHorizontal 0x7f04006b
+int attr dividerPadding 0x7f04006c
+int attr dividerVertical 0x7f04006d
+int attr drawableSize 0x7f04006e
+int attr drawerArrowStyle 0x7f04006f
+int attr dropDownListViewStyle 0x7f040070
+int attr dropdownListPreferredItemHeight 0x7f040071
+int attr editTextBackground 0x7f040072
+int attr editTextColor 0x7f040073
+int attr editTextStyle 0x7f040074
+int attr elevation 0x7f040075
+int attr expandActivityOverflowButtonDrawable 0x7f040076
+int attr fadeDuration 0x7f040077
+int attr failureImage 0x7f040078
+int attr failureImageScaleType 0x7f040079
+int attr firstBaselineToTopHeight 0x7f04007a
+int attr font 0x7f04007b
+int attr fontFamily 0x7f04007c
+int attr fontProviderAuthority 0x7f04007d
+int attr fontProviderCerts 0x7f04007e
+int attr fontProviderFetchStrategy 0x7f04007f
+int attr fontProviderFetchTimeout 0x7f040080
+int attr fontProviderPackage 0x7f040081
+int attr fontProviderQuery 0x7f040082
+int attr fontStyle 0x7f040083
+int attr fontVariationSettings 0x7f040084
+int attr fontWeight 0x7f040085
+int attr gapBetweenBars 0x7f040086
+int attr goIcon 0x7f040087
+int attr height 0x7f040088
+int attr hideOnContentScroll 0x7f040089
+int attr homeAsUpIndicator 0x7f04008a
+int attr homeLayout 0x7f04008b
+int attr icon 0x7f04008c
+int attr iconTint 0x7f04008d
+int attr iconTintMode 0x7f04008e
+int attr iconifiedByDefault 0x7f04008f
+int attr imageButtonStyle 0x7f040090
+int attr indeterminateProgressStyle 0x7f040091
+int attr initialActivityCount 0x7f040092
+int attr isLightTheme 0x7f040093
+int attr itemPadding 0x7f040094
+int attr keylines 0x7f040095
+int attr lastBaselineToBottomHeight 0x7f040096
+int attr layout 0x7f040097
+int attr layout_anchor 0x7f040098
+int attr layout_anchorGravity 0x7f040099
+int attr layout_behavior 0x7f04009a
+int attr layout_dodgeInsetEdges 0x7f04009b
+int attr layout_insetEdge 0x7f04009c
+int attr layout_keyline 0x7f04009d
+int attr lineHeight 0x7f04009e
+int attr listChoiceBackgroundIndicator 0x7f04009f
+int attr listDividerAlertDialog 0x7f0400a0
+int attr listItemLayout 0x7f0400a1
+int attr listLayout 0x7f0400a2
+int attr listMenuViewStyle 0x7f0400a3
+int attr listPopupWindowStyle 0x7f0400a4
+int attr listPreferredItemHeight 0x7f0400a5
+int attr listPreferredItemHeightLarge 0x7f0400a6
+int attr listPreferredItemHeightSmall 0x7f0400a7
+int attr listPreferredItemPaddingLeft 0x7f0400a8
+int attr listPreferredItemPaddingRight 0x7f0400a9
+int attr logo 0x7f0400aa
+int attr logoDescription 0x7f0400ab
+int attr maxButtonHeight 0x7f0400ac
+int attr measureWithLargestChild 0x7f0400ad
+int attr multiChoiceItemLayout 0x7f0400ae
+int attr navigationContentDescription 0x7f0400af
+int attr navigationIcon 0x7f0400b0
+int attr navigationMode 0x7f0400b1
+int attr numericModifiers 0x7f0400b2
+int attr overlapAnchor 0x7f0400b3
+int attr overlayImage 0x7f0400b4
+int attr paddingBottomNoButtons 0x7f0400b5
+int attr paddingEnd 0x7f0400b6
+int attr paddingStart 0x7f0400b7
+int attr paddingTopNoTitle 0x7f0400b8
+int attr panelBackground 0x7f0400b9
+int attr panelMenuListTheme 0x7f0400ba
+int attr panelMenuListWidth 0x7f0400bb
+int attr placeholderImage 0x7f0400bc
+int attr placeholderImageScaleType 0x7f0400bd
+int attr popupMenuStyle 0x7f0400be
+int attr popupTheme 0x7f0400bf
+int attr popupWindowStyle 0x7f0400c0
+int attr preserveIconSpacing 0x7f0400c1
+int attr pressedStateOverlayImage 0x7f0400c2
+int attr progressBarAutoRotateInterval 0x7f0400c3
+int attr progressBarImage 0x7f0400c4
+int attr progressBarImageScaleType 0x7f0400c5
+int attr progressBarPadding 0x7f0400c6
+int attr progressBarStyle 0x7f0400c7
+int attr queryBackground 0x7f0400c8
+int attr queryHint 0x7f0400c9
+int attr radioButtonStyle 0x7f0400ca
+int attr ratingBarStyle 0x7f0400cb
+int attr ratingBarStyleIndicator 0x7f0400cc
+int attr ratingBarStyleSmall 0x7f0400cd
+int attr retryImage 0x7f0400ce
+int attr retryImageScaleType 0x7f0400cf
+int attr roundAsCircle 0x7f0400d0
+int attr roundBottomEnd 0x7f0400d1
+int attr roundBottomLeft 0x7f0400d2
+int attr roundBottomRight 0x7f0400d3
+int attr roundBottomStart 0x7f0400d4
+int attr roundTopEnd 0x7f0400d5
+int attr roundTopLeft 0x7f0400d6
+int attr roundTopRight 0x7f0400d7
+int attr roundTopStart 0x7f0400d8
+int attr roundWithOverlayColor 0x7f0400d9
+int attr roundedCornerRadius 0x7f0400da
+int attr roundingBorderColor 0x7f0400db
+int attr roundingBorderPadding 0x7f0400dc
+int attr roundingBorderWidth 0x7f0400dd
+int attr searchHintIcon 0x7f0400de
+int attr searchIcon 0x7f0400df
+int attr searchViewStyle 0x7f0400e0
+int attr seekBarStyle 0x7f0400e1
+int attr selectableItemBackground 0x7f0400e2
+int attr selectableItemBackgroundBorderless 0x7f0400e3
+int attr showAsAction 0x7f0400e4
+int attr showDividers 0x7f0400e5
+int attr showText 0x7f0400e6
+int attr showTitle 0x7f0400e7
+int attr singleChoiceItemLayout 0x7f0400e8
+int attr spinBars 0x7f0400e9
+int attr spinnerDropDownItemStyle 0x7f0400ea
+int attr spinnerStyle 0x7f0400eb
+int attr splitTrack 0x7f0400ec
+int attr srcCompat 0x7f0400ed
+int attr state_above_anchor 0x7f0400ee
+int attr statusBarBackground 0x7f0400ef
+int attr subMenuArrow 0x7f0400f0
+int attr submitBackground 0x7f0400f1
+int attr subtitle 0x7f0400f2
+int attr subtitleTextAppearance 0x7f0400f3
+int attr subtitleTextColor 0x7f0400f4
+int attr subtitleTextStyle 0x7f0400f5
+int attr suggestionRowLayout 0x7f0400f6
+int attr switchMinWidth 0x7f0400f7
+int attr switchPadding 0x7f0400f8
+int attr switchStyle 0x7f0400f9
+int attr switchTextAppearance 0x7f0400fa
+int attr textAllCaps 0x7f0400fb
+int attr textAppearanceLargePopupMenu 0x7f0400fc
+int attr textAppearanceListItem 0x7f0400fd
+int attr textAppearanceListItemSecondary 0x7f0400fe
+int attr textAppearanceListItemSmall 0x7f0400ff
+int attr textAppearancePopupMenuHeader 0x7f040100
+int attr textAppearanceSearchResultSubtitle 0x7f040101
+int attr textAppearanceSearchResultTitle 0x7f040102
+int attr textAppearanceSmallPopupMenu 0x7f040103
+int attr textColorAlertDialogListItem 0x7f040104
+int attr textColorSearchUrl 0x7f040105
+int attr theme 0x7f040106
+int attr thickness 0x7f040107
+int attr thumbTextPadding 0x7f040108
+int attr thumbTint 0x7f040109
+int attr thumbTintMode 0x7f04010a
+int attr tickMark 0x7f04010b
+int attr tickMarkTint 0x7f04010c
+int attr tickMarkTintMode 0x7f04010d
+int attr tint 0x7f04010e
+int attr tintMode 0x7f04010f
+int attr title 0x7f040110
+int attr titleMargin 0x7f040111
+int attr titleMarginBottom 0x7f040112
+int attr titleMarginEnd 0x7f040113
+int attr titleMarginStart 0x7f040114
+int attr titleMarginTop 0x7f040115
+int attr titleMargins 0x7f040116
+int attr titleTextAppearance 0x7f040117
+int attr titleTextColor 0x7f040118
+int attr titleTextStyle 0x7f040119
+int attr toolbarNavigationButtonStyle 0x7f04011a
+int attr toolbarStyle 0x7f04011b
+int attr tooltipForegroundColor 0x7f04011c
+int attr tooltipFrameBackground 0x7f04011d
+int attr tooltipText 0x7f04011e
+int attr track 0x7f04011f
+int attr trackTint 0x7f040120
+int attr trackTintMode 0x7f040121
+int attr ttcIndex 0x7f040122
+int attr viewAspectRatio 0x7f040123
+int attr viewInflaterClass 0x7f040124
+int attr voiceIcon 0x7f040125
+int attr windowActionBar 0x7f040126
+int attr windowActionBarOverlay 0x7f040127
+int attr windowActionModeOverlay 0x7f040128
+int attr windowFixedHeightMajor 0x7f040129
+int attr windowFixedHeightMinor 0x7f04012a
+int attr windowFixedWidthMajor 0x7f04012b
+int attr windowFixedWidthMinor 0x7f04012c
+int attr windowMinWidthMajor 0x7f04012d
+int attr windowMinWidthMinor 0x7f04012e
+int attr windowNoTitle 0x7f04012f
+int bool abc_action_bar_embed_tabs 0x7f050001
+int bool abc_allow_stacked_button_bar 0x7f050002
+int bool abc_config_actionMenuItemAllCaps 0x7f050003
+int color abc_background_cache_hint_selector_material_dark 0x7f060001
+int color abc_background_cache_hint_selector_material_light 0x7f060002
+int color abc_btn_colored_borderless_text_material 0x7f060003
+int color abc_btn_colored_text_material 0x7f060004
+int color abc_color_highlight_material 0x7f060005
+int color abc_hint_foreground_material_dark 0x7f060006
+int color abc_hint_foreground_material_light 0x7f060007
+int color abc_input_method_navigation_guard 0x7f060008
+int color abc_primary_text_disable_only_material_dark 0x7f060009
+int color abc_primary_text_disable_only_material_light 0x7f06000a
+int color abc_primary_text_material_dark 0x7f06000b
+int color abc_primary_text_material_light 0x7f06000c
+int color abc_search_url_text 0x7f06000d
+int color abc_search_url_text_normal 0x7f06000e
+int color abc_search_url_text_pressed 0x7f06000f
+int color abc_search_url_text_selected 0x7f060010
+int color abc_secondary_text_material_dark 0x7f060011
+int color abc_secondary_text_material_light 0x7f060012
+int color abc_tint_btn_checkable 0x7f060013
+int color abc_tint_default 0x7f060014
+int color abc_tint_edittext 0x7f060015
+int color abc_tint_seek_thumb 0x7f060016
+int color abc_tint_spinner 0x7f060017
+int color abc_tint_switch_track 0x7f060018
+int color accent_material_dark 0x7f060019
+int color accent_material_light 0x7f06001a
+int color androidx_core_ripple_material_light 0x7f06001b
+int color androidx_core_secondary_text_default_material_light 0x7f06001c
+int color background_floating_material_dark 0x7f06001d
+int color background_floating_material_light 0x7f06001e
+int color background_material_dark 0x7f06001f
+int color background_material_light 0x7f060020
+int color bright_foreground_disabled_material_dark 0x7f060021
+int color bright_foreground_disabled_material_light 0x7f060022
+int color bright_foreground_inverse_material_dark 0x7f060023
+int color bright_foreground_inverse_material_light 0x7f060024
+int color bright_foreground_material_dark 0x7f060025
+int color bright_foreground_material_light 0x7f060026
+int color button_material_dark 0x7f060027
+int color button_material_light 0x7f060028
+int color catalyst_redbox_background 0x7f060029
+int color dim_foreground_disabled_material_dark 0x7f06002a
+int color dim_foreground_disabled_material_light 0x7f06002b
+int color dim_foreground_material_dark 0x7f06002c
+int color dim_foreground_material_light 0x7f06002d
+int color error_color_material_dark 0x7f06002e
+int color error_color_material_light 0x7f06002f
+int color foreground_material_dark 0x7f060030
+int color foreground_material_light 0x7f060031
+int color highlighted_text_material_dark 0x7f060032
+int color highlighted_text_material_light 0x7f060033
+int color material_blue_grey_800 0x7f060034
+int color material_blue_grey_900 0x7f060035
+int color material_blue_grey_950 0x7f060036
+int color material_deep_teal_200 0x7f060037
+int color material_deep_teal_500 0x7f060038
+int color material_grey_100 0x7f060039
+int color material_grey_300 0x7f06003a
+int color material_grey_50 0x7f06003b
+int color material_grey_600 0x7f06003c
+int color material_grey_800 0x7f06003d
+int color material_grey_850 0x7f06003e
+int color material_grey_900 0x7f06003f
+int color notification_action_color_filter 0x7f060040
+int color notification_icon_bg_color 0x7f060041
+int color primary_dark_material_dark 0x7f060042
+int color primary_dark_material_light 0x7f060043
+int color primary_material_dark 0x7f060044
+int color primary_material_light 0x7f060045
+int color primary_text_default_material_dark 0x7f060046
+int color primary_text_default_material_light 0x7f060047
+int color primary_text_disabled_material_dark 0x7f060048
+int color primary_text_disabled_material_light 0x7f060049
+int color ripple_material_dark 0x7f06004a
+int color ripple_material_light 0x7f06004b
+int color secondary_text_default_material_dark 0x7f06004c
+int color secondary_text_default_material_light 0x7f06004d
+int color secondary_text_disabled_material_dark 0x7f06004e
+int color secondary_text_disabled_material_light 0x7f06004f
+int color switch_thumb_disabled_material_dark 0x7f060050
+int color switch_thumb_disabled_material_light 0x7f060051
+int color switch_thumb_material_dark 0x7f060052
+int color switch_thumb_material_light 0x7f060053
+int color switch_thumb_normal_material_dark 0x7f060054
+int color switch_thumb_normal_material_light 0x7f060055
+int color tooltip_background_dark 0x7f060056
+int color tooltip_background_light 0x7f060057
+int dimen abc_action_bar_content_inset_material 0x7f070001
+int dimen abc_action_bar_content_inset_with_nav 0x7f070002
+int dimen abc_action_bar_default_height_material 0x7f070003
+int dimen abc_action_bar_default_padding_end_material 0x7f070004
+int dimen abc_action_bar_default_padding_start_material 0x7f070005
+int dimen abc_action_bar_elevation_material 0x7f070006
+int dimen abc_action_bar_icon_vertical_padding_material 0x7f070007
+int dimen abc_action_bar_overflow_padding_end_material 0x7f070008
+int dimen abc_action_bar_overflow_padding_start_material 0x7f070009
+int dimen abc_action_bar_stacked_max_height 0x7f07000a
+int dimen abc_action_bar_stacked_tab_max_width 0x7f07000b
+int dimen abc_action_bar_subtitle_bottom_margin_material 0x7f07000c
+int dimen abc_action_bar_subtitle_top_margin_material 0x7f07000d
+int dimen abc_action_button_min_height_material 0x7f07000e
+int dimen abc_action_button_min_width_material 0x7f07000f
+int dimen abc_action_button_min_width_overflow_material 0x7f070010
+int dimen abc_alert_dialog_button_bar_height 0x7f070011
+int dimen abc_alert_dialog_button_dimen 0x7f070012
+int dimen abc_button_inset_horizontal_material 0x7f070013
+int dimen abc_button_inset_vertical_material 0x7f070014
+int dimen abc_button_padding_horizontal_material 0x7f070015
+int dimen abc_button_padding_vertical_material 0x7f070016
+int dimen abc_cascading_menus_min_smallest_width 0x7f070017
+int dimen abc_config_prefDialogWidth 0x7f070018
+int dimen abc_control_corner_material 0x7f070019
+int dimen abc_control_inset_material 0x7f07001a
+int dimen abc_control_padding_material 0x7f07001b
+int dimen abc_dialog_corner_radius_material 0x7f07001c
+int dimen abc_dialog_fixed_height_major 0x7f07001d
+int dimen abc_dialog_fixed_height_minor 0x7f07001e
+int dimen abc_dialog_fixed_width_major 0x7f07001f
+int dimen abc_dialog_fixed_width_minor 0x7f070020
+int dimen abc_dialog_list_padding_bottom_no_buttons 0x7f070021
+int dimen abc_dialog_list_padding_top_no_title 0x7f070022
+int dimen abc_dialog_min_width_major 0x7f070023
+int dimen abc_dialog_min_width_minor 0x7f070024
+int dimen abc_dialog_padding_material 0x7f070025
+int dimen abc_dialog_padding_top_material 0x7f070026
+int dimen abc_dialog_title_divider_material 0x7f070027
+int dimen abc_disabled_alpha_material_dark 0x7f070028
+int dimen abc_disabled_alpha_material_light 0x7f070029
+int dimen abc_dropdownitem_icon_width 0x7f07002a
+int dimen abc_dropdownitem_text_padding_left 0x7f07002b
+int dimen abc_dropdownitem_text_padding_right 0x7f07002c
+int dimen abc_edit_text_inset_bottom_material 0x7f07002d
+int dimen abc_edit_text_inset_horizontal_material 0x7f07002e
+int dimen abc_edit_text_inset_top_material 0x7f07002f
+int dimen abc_floating_window_z 0x7f070030
+int dimen abc_list_item_padding_horizontal_material 0x7f070031
+int dimen abc_panel_menu_list_width 0x7f070032
+int dimen abc_progress_bar_height_material 0x7f070033
+int dimen abc_search_view_preferred_height 0x7f070034
+int dimen abc_search_view_preferred_width 0x7f070035
+int dimen abc_seekbar_track_background_height_material 0x7f070036
+int dimen abc_seekbar_track_progress_height_material 0x7f070037
+int dimen abc_select_dialog_padding_start_material 0x7f070038
+int dimen abc_switch_padding 0x7f070039
+int dimen abc_text_size_body_1_material 0x7f07003a
+int dimen abc_text_size_body_2_material 0x7f07003b
+int dimen abc_text_size_button_material 0x7f07003c
+int dimen abc_text_size_caption_material 0x7f07003d
+int dimen abc_text_size_display_1_material 0x7f07003e
+int dimen abc_text_size_display_2_material 0x7f07003f
+int dimen abc_text_size_display_3_material 0x7f070040
+int dimen abc_text_size_display_4_material 0x7f070041
+int dimen abc_text_size_headline_material 0x7f070042
+int dimen abc_text_size_large_material 0x7f070043
+int dimen abc_text_size_medium_material 0x7f070044
+int dimen abc_text_size_menu_header_material 0x7f070045
+int dimen abc_text_size_menu_material 0x7f070046
+int dimen abc_text_size_small_material 0x7f070047
+int dimen abc_text_size_subhead_material 0x7f070048
+int dimen abc_text_size_subtitle_material_toolbar 0x7f070049
+int dimen abc_text_size_title_material 0x7f07004a
+int dimen abc_text_size_title_material_toolbar 0x7f07004b
+int dimen compat_button_inset_horizontal_material 0x7f07004c
+int dimen compat_button_inset_vertical_material 0x7f07004d
+int dimen compat_button_padding_horizontal_material 0x7f07004e
+int dimen compat_button_padding_vertical_material 0x7f07004f
+int dimen compat_control_corner_material 0x7f070050
+int dimen compat_notification_large_icon_max_height 0x7f070051
+int dimen compat_notification_large_icon_max_width 0x7f070052
+int dimen disabled_alpha_material_dark 0x7f070053
+int dimen disabled_alpha_material_light 0x7f070054
+int dimen highlight_alpha_material_colored 0x7f070055
+int dimen highlight_alpha_material_dark 0x7f070056
+int dimen highlight_alpha_material_light 0x7f070057
+int dimen hint_alpha_material_dark 0x7f070058
+int dimen hint_alpha_material_light 0x7f070059
+int dimen hint_pressed_alpha_material_dark 0x7f07005a
+int dimen hint_pressed_alpha_material_light 0x7f07005b
+int dimen notification_action_icon_size 0x7f07005c
+int dimen notification_action_text_size 0x7f07005d
+int dimen notification_big_circle_margin 0x7f07005e
+int dimen notification_content_margin_start 0x7f07005f
+int dimen notification_large_icon_height 0x7f070060
+int dimen notification_large_icon_width 0x7f070061
+int dimen notification_main_column_padding_top 0x7f070062
+int dimen notification_media_narrow_margin 0x7f070063
+int dimen notification_right_icon_size 0x7f070064
+int dimen notification_right_side_padding_top 0x7f070065
+int dimen notification_small_icon_background_padding 0x7f070066
+int dimen notification_small_icon_size_as_large 0x7f070067
+int dimen notification_subtext_size 0x7f070068
+int dimen notification_top_pad 0x7f070069
+int dimen notification_top_pad_large_text 0x7f07006a
+int dimen tooltip_corner_radius 0x7f07006b
+int dimen tooltip_horizontal_padding 0x7f07006c
+int dimen tooltip_margin 0x7f07006d
+int dimen tooltip_precise_anchor_extra_offset 0x7f07006e
+int dimen tooltip_precise_anchor_threshold 0x7f07006f
+int dimen tooltip_vertical_padding 0x7f070070
+int dimen tooltip_y_offset_non_touch 0x7f070071
+int dimen tooltip_y_offset_touch 0x7f070072
+int drawable abc_ab_share_pack_mtrl_alpha 0x7f080001
+int drawable abc_action_bar_item_background_material 0x7f080002
+int drawable abc_btn_borderless_material 0x7f080003
+int drawable abc_btn_check_material 0x7f080004
+int drawable abc_btn_check_to_on_mtrl_000 0x7f080005
+int drawable abc_btn_check_to_on_mtrl_015 0x7f080006
+int drawable abc_btn_colored_material 0x7f080007
+int drawable abc_btn_default_mtrl_shape 0x7f080008
+int drawable abc_btn_radio_material 0x7f080009
+int drawable abc_btn_radio_to_on_mtrl_000 0x7f08000a
+int drawable abc_btn_radio_to_on_mtrl_015 0x7f08000b
+int drawable abc_btn_switch_to_on_mtrl_00001 0x7f08000c
+int drawable abc_btn_switch_to_on_mtrl_00012 0x7f08000d
+int drawable abc_cab_background_internal_bg 0x7f08000e
+int drawable abc_cab_background_top_material 0x7f08000f
+int drawable abc_cab_background_top_mtrl_alpha 0x7f080010
+int drawable abc_control_background_material 0x7f080011
+int drawable abc_dialog_material_background 0x7f080012
+int drawable abc_edit_text_material 0x7f080013
+int drawable abc_ic_ab_back_material 0x7f080014
+int drawable abc_ic_arrow_drop_right_black_24dp 0x7f080015
+int drawable abc_ic_clear_material 0x7f080016
+int drawable abc_ic_commit_search_api_mtrl_alpha 0x7f080017
+int drawable abc_ic_go_search_api_material 0x7f080018
+int drawable abc_ic_menu_copy_mtrl_am_alpha 0x7f080019
+int drawable abc_ic_menu_cut_mtrl_alpha 0x7f08001a
+int drawable abc_ic_menu_overflow_material 0x7f08001b
+int drawable abc_ic_menu_paste_mtrl_am_alpha 0x7f08001c
+int drawable abc_ic_menu_selectall_mtrl_alpha 0x7f08001d
+int drawable abc_ic_menu_share_mtrl_alpha 0x7f08001e
+int drawable abc_ic_search_api_material 0x7f08001f
+int drawable abc_ic_star_black_16dp 0x7f080020
+int drawable abc_ic_star_black_36dp 0x7f080021
+int drawable abc_ic_star_black_48dp 0x7f080022
+int drawable abc_ic_star_half_black_16dp 0x7f080023
+int drawable abc_ic_star_half_black_36dp 0x7f080024
+int drawable abc_ic_star_half_black_48dp 0x7f080025
+int drawable abc_ic_voice_search_api_material 0x7f080026
+int drawable abc_item_background_holo_dark 0x7f080027
+int drawable abc_item_background_holo_light 0x7f080028
+int drawable abc_list_divider_material 0x7f080029
+int drawable abc_list_divider_mtrl_alpha 0x7f08002a
+int drawable abc_list_focused_holo 0x7f08002b
+int drawable abc_list_longpressed_holo 0x7f08002c
+int drawable abc_list_pressed_holo_dark 0x7f08002d
+int drawable abc_list_pressed_holo_light 0x7f08002e
+int drawable abc_list_selector_background_transition_holo_dark 0x7f08002f
+int drawable abc_list_selector_background_transition_holo_light 0x7f080030
+int drawable abc_list_selector_disabled_holo_dark 0x7f080031
+int drawable abc_list_selector_disabled_holo_light 0x7f080032
+int drawable abc_list_selector_holo_dark 0x7f080033
+int drawable abc_list_selector_holo_light 0x7f080034
+int drawable abc_menu_hardkey_panel_mtrl_mult 0x7f080035
+int drawable abc_popup_background_mtrl_mult 0x7f080036
+int drawable abc_ratingbar_indicator_material 0x7f080037
+int drawable abc_ratingbar_material 0x7f080038
+int drawable abc_ratingbar_small_material 0x7f080039
+int drawable abc_scrubber_control_off_mtrl_alpha 0x7f08003a
+int drawable abc_scrubber_control_to_pressed_mtrl_000 0x7f08003b
+int drawable abc_scrubber_control_to_pressed_mtrl_005 0x7f08003c
+int drawable abc_scrubber_primary_mtrl_alpha 0x7f08003d
+int drawable abc_scrubber_track_mtrl_alpha 0x7f08003e
+int drawable abc_seekbar_thumb_material 0x7f08003f
+int drawable abc_seekbar_tick_mark_material 0x7f080040
+int drawable abc_seekbar_track_material 0x7f080041
+int drawable abc_spinner_mtrl_am_alpha 0x7f080042
+int drawable abc_spinner_textfield_background_material 0x7f080043
+int drawable abc_switch_thumb_material 0x7f080044
+int drawable abc_switch_track_mtrl_alpha 0x7f080045
+int drawable abc_tab_indicator_material 0x7f080046
+int drawable abc_tab_indicator_mtrl_alpha 0x7f080047
+int drawable abc_text_cursor_material 0x7f080048
+int drawable abc_text_select_handle_left_mtrl_dark 0x7f080049
+int drawable abc_text_select_handle_left_mtrl_light 0x7f08004a
+int drawable abc_text_select_handle_middle_mtrl_dark 0x7f08004b
+int drawable abc_text_select_handle_middle_mtrl_light 0x7f08004c
+int drawable abc_text_select_handle_right_mtrl_dark 0x7f08004d
+int drawable abc_text_select_handle_right_mtrl_light 0x7f08004e
+int drawable abc_textfield_activated_mtrl_alpha 0x7f08004f
+int drawable abc_textfield_default_mtrl_alpha 0x7f080050
+int drawable abc_textfield_search_activated_mtrl_alpha 0x7f080051
+int drawable abc_textfield_search_default_mtrl_alpha 0x7f080052
+int drawable abc_textfield_search_material 0x7f080053
+int drawable abc_vector_test 0x7f080054
+int drawable notification_action_background 0x7f080055
+int drawable notification_bg 0x7f080056
+int drawable notification_bg_low 0x7f080057
+int drawable notification_bg_low_normal 0x7f080058
+int drawable notification_bg_low_pressed 0x7f080059
+int drawable notification_bg_normal 0x7f08005a
+int drawable notification_bg_normal_pressed 0x7f08005b
+int drawable notification_icon_background 0x7f08005c
+int drawable notification_template_icon_bg 0x7f08005d
+int drawable notification_template_icon_low_bg 0x7f08005e
+int drawable notification_tile_bg 0x7f08005f
+int drawable notify_panel_notification_icon_bg 0x7f080060
+int drawable redbox_top_border_background 0x7f080061
+int drawable tooltip_frame_dark 0x7f080062
+int drawable tooltip_frame_light 0x7f080063
+int id accessibility_action_clickable_span 0x7f0b0001
+int id accessibility_custom_action_0 0x7f0b0002
+int id accessibility_custom_action_1 0x7f0b0003
+int id accessibility_custom_action_10 0x7f0b0004
+int id accessibility_custom_action_11 0x7f0b0005
+int id accessibility_custom_action_12 0x7f0b0006
+int id accessibility_custom_action_13 0x7f0b0007
+int id accessibility_custom_action_14 0x7f0b0008
+int id accessibility_custom_action_15 0x7f0b0009
+int id accessibility_custom_action_16 0x7f0b000a
+int id accessibility_custom_action_17 0x7f0b000b
+int id accessibility_custom_action_18 0x7f0b000c
+int id accessibility_custom_action_19 0x7f0b000d
+int id accessibility_custom_action_2 0x7f0b000e
+int id accessibility_custom_action_20 0x7f0b000f
+int id accessibility_custom_action_21 0x7f0b0010
+int id accessibility_custom_action_22 0x7f0b0011
+int id accessibility_custom_action_23 0x7f0b0012
+int id accessibility_custom_action_24 0x7f0b0013
+int id accessibility_custom_action_25 0x7f0b0014
+int id accessibility_custom_action_26 0x7f0b0015
+int id accessibility_custom_action_27 0x7f0b0016
+int id accessibility_custom_action_28 0x7f0b0017
+int id accessibility_custom_action_29 0x7f0b0018
+int id accessibility_custom_action_3 0x7f0b0019
+int id accessibility_custom_action_30 0x7f0b001a
+int id accessibility_custom_action_31 0x7f0b001b
+int id accessibility_custom_action_4 0x7f0b001c
+int id accessibility_custom_action_5 0x7f0b001d
+int id accessibility_custom_action_6 0x7f0b001e
+int id accessibility_custom_action_7 0x7f0b001f
+int id accessibility_custom_action_8 0x7f0b0020
+int id accessibility_custom_action_9 0x7f0b0021
+int id accessibility_hint 0x7f0b0022
+int id accessibility_role 0x7f0b0023
+int id action_bar 0x7f0b0024
+int id action_bar_activity_content 0x7f0b0025
+int id action_bar_container 0x7f0b0026
+int id action_bar_root 0x7f0b0027
+int id action_bar_spinner 0x7f0b0028
+int id action_bar_subtitle 0x7f0b0029
+int id action_bar_title 0x7f0b002a
+int id action_container 0x7f0b002b
+int id action_context_bar 0x7f0b002c
+int id action_divider 0x7f0b002d
+int id action_image 0x7f0b002e
+int id action_menu_divider 0x7f0b002f
+int id action_menu_presenter 0x7f0b0030
+int id action_mode_bar 0x7f0b0031
+int id action_mode_bar_stub 0x7f0b0032
+int id action_mode_close_button 0x7f0b0033
+int id action_text 0x7f0b0034
+int id actions 0x7f0b0035
+int id activity_chooser_view_content 0x7f0b0036
+int id add 0x7f0b0037
+int id alertTitle 0x7f0b0038
+int id async 0x7f0b0039
+int id blocking 0x7f0b003a
+int id bottom 0x7f0b003b
+int id buttonPanel 0x7f0b003c
+int id catalyst_redbox_title 0x7f0b003d
+int id center 0x7f0b003e
+int id centerCrop 0x7f0b003f
+int id centerInside 0x7f0b0040
+int id checkbox 0x7f0b0041
+int id chronometer 0x7f0b0042
+int id content 0x7f0b0043
+int id contentPanel 0x7f0b0044
+int id custom 0x7f0b0045
+int id customPanel 0x7f0b0046
+int id decor_content_parent 0x7f0b0047
+int id default_activity_button 0x7f0b0048
+int id dialog_button 0x7f0b0049
+int id edit_query 0x7f0b004a
+int id end 0x7f0b004b
+int id expand_activities_button 0x7f0b004c
+int id expanded_menu 0x7f0b004d
+int id fitBottomStart 0x7f0b004e
+int id fitCenter 0x7f0b004f
+int id fitEnd 0x7f0b0050
+int id fitStart 0x7f0b0051
+int id fitXY 0x7f0b0052
+int id focusCrop 0x7f0b0053
+int id forever 0x7f0b0054
+int id fps_text 0x7f0b0055
+int id group_divider 0x7f0b0056
+int id home 0x7f0b0057
+int id icon 0x7f0b0058
+int id icon_group 0x7f0b0059
+int id image 0x7f0b005a
+int id info 0x7f0b005b
+int id italic 0x7f0b005c
+int id left 0x7f0b005d
+int id line1 0x7f0b005e
+int id line3 0x7f0b005f
+int id listMode 0x7f0b0060
+int id list_item 0x7f0b0061
+int id message 0x7f0b0062
+int id multiply 0x7f0b0063
+int id none 0x7f0b0064
+int id normal 0x7f0b0065
+int id notification_background 0x7f0b0066
+int id notification_main_column 0x7f0b0067
+int id notification_main_column_container 0x7f0b0068
+int id parentPanel 0x7f0b0069
+int id progress_circular 0x7f0b006a
+int id progress_horizontal 0x7f0b006b
+int id radio 0x7f0b006c
+int id react_test_id 0x7f0b006d
+int id right 0x7f0b006e
+int id right_icon 0x7f0b006f
+int id right_side 0x7f0b0070
+int id rn_frame_file 0x7f0b0071
+int id rn_frame_method 0x7f0b0072
+int id rn_redbox_copy_button 0x7f0b0073
+int id rn_redbox_dismiss_button 0x7f0b0074
+int id rn_redbox_line_separator 0x7f0b0075
+int id rn_redbox_loading_indicator 0x7f0b0076
+int id rn_redbox_reload_button 0x7f0b0077
+int id rn_redbox_report_button 0x7f0b0078
+int id rn_redbox_report_label 0x7f0b0079
+int id rn_redbox_stack 0x7f0b007a
+int id screen 0x7f0b007b
+int id scrollIndicatorDown 0x7f0b007c
+int id scrollIndicatorUp 0x7f0b007d
+int id scrollView 0x7f0b007e
+int id search_badge 0x7f0b007f
+int id search_bar 0x7f0b0080
+int id search_button 0x7f0b0081
+int id search_close_btn 0x7f0b0082
+int id search_edit_frame 0x7f0b0083
+int id search_go_btn 0x7f0b0084
+int id search_mag_icon 0x7f0b0085
+int id search_plate 0x7f0b0086
+int id search_src_text 0x7f0b0087
+int id search_voice_btn 0x7f0b0088
+int id select_dialog_listview 0x7f0b0089
+int id shortcut 0x7f0b008a
+int id spacer 0x7f0b008b
+int id split_action_bar 0x7f0b008c
+int id src_atop 0x7f0b008d
+int id src_in 0x7f0b008e
+int id src_over 0x7f0b008f
+int id start 0x7f0b0090
+int id submenuarrow 0x7f0b0091
+int id submit_area 0x7f0b0092
+int id tabMode 0x7f0b0093
+int id tag_accessibility_actions 0x7f0b0094
+int id tag_accessibility_clickable_spans 0x7f0b0095
+int id tag_accessibility_heading 0x7f0b0096
+int id tag_accessibility_pane_title 0x7f0b0097
+int id tag_screen_reader_focusable 0x7f0b0098
+int id tag_transition_group 0x7f0b0099
+int id tag_unhandled_key_event_manager 0x7f0b009a
+int id tag_unhandled_key_listeners 0x7f0b009b
+int id text 0x7f0b009c
+int id text2 0x7f0b009d
+int id textSpacerNoButtons 0x7f0b009e
+int id textSpacerNoTitle 0x7f0b009f
+int id time 0x7f0b00a0
+int id title 0x7f0b00a1
+int id titleDividerNoCustom 0x7f0b00a2
+int id title_template 0x7f0b00a3
+int id top 0x7f0b00a4
+int id topPanel 0x7f0b00a5
+int id uniform 0x7f0b00a6
+int id up 0x7f0b00a7
+int id view_tag_instance_handle 0x7f0b00a8
+int id view_tag_native_id 0x7f0b00a9
+int id wrap_content 0x7f0b00aa
+int integer abc_config_activityDefaultDur 0x7f0c0001
+int integer abc_config_activityShortDur 0x7f0c0002
+int integer cancel_button_image_alpha 0x7f0c0003
+int integer config_tooltipAnimTime 0x7f0c0004
+int integer status_bar_notification_info_maxnum 0x7f0c0005
+int layout abc_action_bar_title_item 0x7f0e0001
+int layout abc_action_bar_up_container 0x7f0e0002
+int layout abc_action_menu_item_layout 0x7f0e0003
+int layout abc_action_menu_layout 0x7f0e0004
+int layout abc_action_mode_bar 0x7f0e0005
+int layout abc_action_mode_close_item_material 0x7f0e0006
+int layout abc_activity_chooser_view 0x7f0e0007
+int layout abc_activity_chooser_view_list_item 0x7f0e0008
+int layout abc_alert_dialog_button_bar_material 0x7f0e0009
+int layout abc_alert_dialog_material 0x7f0e000a
+int layout abc_alert_dialog_title_material 0x7f0e000b
+int layout abc_cascading_menu_item_layout 0x7f0e000c
+int layout abc_dialog_title_material 0x7f0e000d
+int layout abc_expanded_menu_layout 0x7f0e000e
+int layout abc_list_menu_item_checkbox 0x7f0e000f
+int layout abc_list_menu_item_icon 0x7f0e0010
+int layout abc_list_menu_item_layout 0x7f0e0011
+int layout abc_list_menu_item_radio 0x7f0e0012
+int layout abc_popup_menu_header_item_layout 0x7f0e0013
+int layout abc_popup_menu_item_layout 0x7f0e0014
+int layout abc_screen_content_include 0x7f0e0015
+int layout abc_screen_simple 0x7f0e0016
+int layout abc_screen_simple_overlay_action_mode 0x7f0e0017
+int layout abc_screen_toolbar 0x7f0e0018
+int layout abc_search_dropdown_item_icons_2line 0x7f0e0019
+int layout abc_search_view 0x7f0e001a
+int layout abc_select_dialog_material 0x7f0e001b
+int layout abc_tooltip 0x7f0e001c
+int layout custom_dialog 0x7f0e001d
+int layout dev_loading_view 0x7f0e001e
+int layout fps_view 0x7f0e001f
+int layout notification_action 0x7f0e0020
+int layout notification_action_tombstone 0x7f0e0021
+int layout notification_template_custom_big 0x7f0e0022
+int layout notification_template_icon_group 0x7f0e0023
+int layout notification_template_part_chronometer 0x7f0e0024
+int layout notification_template_part_time 0x7f0e0025
+int layout redbox_item_frame 0x7f0e0026
+int layout redbox_item_title 0x7f0e0027
+int layout redbox_view 0x7f0e0028
+int layout select_dialog_item_material 0x7f0e0029
+int layout select_dialog_multichoice_material 0x7f0e002a
+int layout select_dialog_singlechoice_material 0x7f0e002b
+int layout support_simple_spinner_dropdown_item 0x7f0e002c
+int string abc_action_bar_home_description 0x7f140001
+int string abc_action_bar_up_description 0x7f140002
+int string abc_action_menu_overflow_description 0x7f140003
+int string abc_action_mode_done 0x7f140004
+int string abc_activity_chooser_view_see_all 0x7f140005
+int string abc_activitychooserview_choose_application 0x7f140006
+int string abc_capital_off 0x7f140007
+int string abc_capital_on 0x7f140008
+int string abc_font_family_body_1_material 0x7f140009
+int string abc_font_family_body_2_material 0x7f14000a
+int string abc_font_family_button_material 0x7f14000b
+int string abc_font_family_caption_material 0x7f14000c
+int string abc_font_family_display_1_material 0x7f14000d
+int string abc_font_family_display_2_material 0x7f14000e
+int string abc_font_family_display_3_material 0x7f14000f
+int string abc_font_family_display_4_material 0x7f140010
+int string abc_font_family_headline_material 0x7f140011
+int string abc_font_family_menu_material 0x7f140012
+int string abc_font_family_subhead_material 0x7f140013
+int string abc_font_family_title_material 0x7f140014
+int string abc_menu_alt_shortcut_label 0x7f140015
+int string abc_menu_ctrl_shortcut_label 0x7f140016
+int string abc_menu_delete_shortcut_label 0x7f140017
+int string abc_menu_enter_shortcut_label 0x7f140018
+int string abc_menu_function_shortcut_label 0x7f140019
+int string abc_menu_meta_shortcut_label 0x7f14001a
+int string abc_menu_shift_shortcut_label 0x7f14001b
+int string abc_menu_space_shortcut_label 0x7f14001c
+int string abc_menu_sym_shortcut_label 0x7f14001d
+int string abc_prepend_shortcut_label 0x7f14001e
+int string abc_search_hint 0x7f14001f
+int string abc_searchview_description_clear 0x7f140020
+int string abc_searchview_description_query 0x7f140021
+int string abc_searchview_description_search 0x7f140022
+int string abc_searchview_description_submit 0x7f140023
+int string abc_searchview_description_voice 0x7f140024
+int string abc_shareactionprovider_share_with 0x7f140025
+int string abc_shareactionprovider_share_with_application 0x7f140026
+int string abc_toolbar_collapse_description 0x7f140027
+int string adjustable_description 0x7f140028
+int string catalyst_copy_button 0x7f140029
+int string catalyst_debugjs 0x7f14002a
+int string catalyst_debugjs_nuclide 0x7f14002b
+int string catalyst_debugjs_nuclide_failure 0x7f14002c
+int string catalyst_debugjs_off 0x7f14002d
+int string catalyst_dismiss_button 0x7f14002e
+int string catalyst_element_inspector 0x7f14002f
+int string catalyst_heap_capture 0x7f140030
+int string catalyst_hot_module_replacement 0x7f140031
+int string catalyst_hot_module_replacement_off 0x7f140032
+int string catalyst_jsload_error 0x7f140033
+int string catalyst_live_reload 0x7f140034
+int string catalyst_live_reload_off 0x7f140035
+int string catalyst_loading_from_url 0x7f140036
+int string catalyst_perf_monitor 0x7f140037
+int string catalyst_perf_monitor_off 0x7f140038
+int string catalyst_poke_sampling_profiler 0x7f140039
+int string catalyst_reload_button 0x7f14003a
+int string catalyst_reloadjs 0x7f14003b
+int string catalyst_remotedbg_error 0x7f14003c
+int string catalyst_remotedbg_message 0x7f14003d
+int string catalyst_report_button 0x7f14003e
+int string catalyst_settings 0x7f14003f
+int string catalyst_settings_title 0x7f140040
+int string header_description 0x7f140041
+int string image_button_description 0x7f140042
+int string image_description 0x7f140043
+int string link_description 0x7f140044
+int string search_description 0x7f140045
+int string search_menu_title 0x7f140046
+int string status_bar_notification_info_overflow 0x7f140047
+int style AlertDialog_AppCompat 0x7f150001
+int style AlertDialog_AppCompat_Light 0x7f150002
+int style Animation_AppCompat_Dialog 0x7f150003
+int style Animation_AppCompat_DropDownUp 0x7f150004
+int style Animation_AppCompat_Tooltip 0x7f150005
+int style Animation_Catalyst_RedBox 0x7f150006
+int style Base_AlertDialog_AppCompat 0x7f150007
+int style Base_AlertDialog_AppCompat_Light 0x7f150008
+int style Base_Animation_AppCompat_Dialog 0x7f150009
+int style Base_Animation_AppCompat_DropDownUp 0x7f15000a
+int style Base_Animation_AppCompat_Tooltip 0x7f15000b
+int style Base_DialogWindowTitleBackground_AppCompat 0x7f15000c
+int style Base_DialogWindowTitle_AppCompat 0x7f15000d
+int style Base_TextAppearance_AppCompat 0x7f15000e
+int style Base_TextAppearance_AppCompat_Body1 0x7f15000f
+int style Base_TextAppearance_AppCompat_Body2 0x7f150010
+int style Base_TextAppearance_AppCompat_Button 0x7f150011
+int style Base_TextAppearance_AppCompat_Caption 0x7f150012
+int style Base_TextAppearance_AppCompat_Display1 0x7f150013
+int style Base_TextAppearance_AppCompat_Display2 0x7f150014
+int style Base_TextAppearance_AppCompat_Display3 0x7f150015
+int style Base_TextAppearance_AppCompat_Display4 0x7f150016
+int style Base_TextAppearance_AppCompat_Headline 0x7f150017
+int style Base_TextAppearance_AppCompat_Inverse 0x7f150018
+int style Base_TextAppearance_AppCompat_Large 0x7f150019
+int style Base_TextAppearance_AppCompat_Large_Inverse 0x7f15001a
+int style Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Large 0x7f15001b
+int style Base_TextAppearance_AppCompat_Light_Widget_PopupMenu_Small 0x7f15001c
+int style Base_TextAppearance_AppCompat_Medium 0x7f15001d
+int style Base_TextAppearance_AppCompat_Medium_Inverse 0x7f15001e
+int style Base_TextAppearance_AppCompat_Menu 0x7f15001f
+int style Base_TextAppearance_AppCompat_SearchResult 0x7f150020
+int style Base_TextAppearance_AppCompat_SearchResult_Subtitle 0x7f150021
+int style Base_TextAppearance_AppCompat_SearchResult_Title 0x7f150022
+int style Base_TextAppearance_AppCompat_Small 0x7f150023
+int style Base_TextAppearance_AppCompat_Small_Inverse 0x7f150024
+int style Base_TextAppearance_AppCompat_Subhead 0x7f150025
+int style Base_TextAppearance_AppCompat_Subhead_Inverse 0x7f150026
+int style Base_TextAppearance_AppCompat_Title 0x7f150027
+int style Base_TextAppearance_AppCompat_Title_Inverse 0x7f150028
+int style Base_TextAppearance_AppCompat_Tooltip 0x7f150029
+int style Base_TextAppearance_AppCompat_Widget_ActionBar_Menu 0x7f15002a
+int style Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle 0x7f15002b
+int style Base_TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse 0x7f15002c
+int style Base_TextAppearance_AppCompat_Widget_ActionBar_Title 0x7f15002d
+int style Base_TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse 0x7f15002e
+int style Base_TextAppearance_AppCompat_Widget_ActionMode_Subtitle 0x7f15002f
+int style Base_TextAppearance_AppCompat_Widget_ActionMode_Title 0x7f150030
+int style Base_TextAppearance_AppCompat_Widget_Button 0x7f150031
+int style Base_TextAppearance_AppCompat_Widget_Button_Borderless_Colored 0x7f150032
+int style Base_TextAppearance_AppCompat_Widget_Button_Colored 0x7f150033
+int style Base_TextAppearance_AppCompat_Widget_Button_Inverse 0x7f150034
+int style Base_TextAppearance_AppCompat_Widget_DropDownItem 0x7f150035
+int style Base_TextAppearance_AppCompat_Widget_PopupMenu_Header 0x7f150036
+int style Base_TextAppearance_AppCompat_Widget_PopupMenu_Large 0x7f150037
+int style Base_TextAppearance_AppCompat_Widget_PopupMenu_Small 0x7f150038
+int style Base_TextAppearance_AppCompat_Widget_Switch 0x7f150039
+int style Base_TextAppearance_AppCompat_Widget_TextView_SpinnerItem 0x7f15003a
+int style Base_TextAppearance_Widget_AppCompat_ExpandedMenu_Item 0x7f15003b
+int style Base_TextAppearance_Widget_AppCompat_Toolbar_Subtitle 0x7f15003c
+int style Base_TextAppearance_Widget_AppCompat_Toolbar_Title 0x7f15003d
+int style Base_ThemeOverlay_AppCompat 0x7f15003e
+int style Base_ThemeOverlay_AppCompat_ActionBar 0x7f15003f
+int style Base_ThemeOverlay_AppCompat_Dark 0x7f150040
+int style Base_ThemeOverlay_AppCompat_Dark_ActionBar 0x7f150041
+int style Base_ThemeOverlay_AppCompat_Dialog 0x7f150042
+int style Base_ThemeOverlay_AppCompat_Dialog_Alert 0x7f150043
+int style Base_ThemeOverlay_AppCompat_Light 0x7f150044
+int style Base_Theme_AppCompat 0x7f150045
+int style Base_Theme_AppCompat_CompactMenu 0x7f150046
+int style Base_Theme_AppCompat_Dialog 0x7f150047
+int style Base_Theme_AppCompat_DialogWhenLarge 0x7f150048
+int style Base_Theme_AppCompat_Dialog_Alert 0x7f150049
+int style Base_Theme_AppCompat_Dialog_FixedSize 0x7f15004a
+int style Base_Theme_AppCompat_Dialog_MinWidth 0x7f15004b
+int style Base_Theme_AppCompat_Light 0x7f15004c
+int style Base_Theme_AppCompat_Light_DarkActionBar 0x7f15004d
+int style Base_Theme_AppCompat_Light_Dialog 0x7f15004e
+int style Base_Theme_AppCompat_Light_DialogWhenLarge 0x7f15004f
+int style Base_Theme_AppCompat_Light_Dialog_Alert 0x7f150050
+int style Base_Theme_AppCompat_Light_Dialog_FixedSize 0x7f150051
+int style Base_Theme_AppCompat_Light_Dialog_MinWidth 0x7f150052
+int style Base_V21_ThemeOverlay_AppCompat_Dialog 0x7f150053
+int style Base_V21_Theme_AppCompat 0x7f150054
+int style Base_V21_Theme_AppCompat_Dialog 0x7f150055
+int style Base_V21_Theme_AppCompat_Light 0x7f150056
+int style Base_V21_Theme_AppCompat_Light_Dialog 0x7f150057
+int style Base_V22_Theme_AppCompat 0x7f150058
+int style Base_V22_Theme_AppCompat_Light 0x7f150059
+int style Base_V23_Theme_AppCompat 0x7f15005a
+int style Base_V23_Theme_AppCompat_Light 0x7f15005b
+int style Base_V26_Theme_AppCompat 0x7f15005c
+int style Base_V26_Theme_AppCompat_Light 0x7f15005d
+int style Base_V26_Widget_AppCompat_Toolbar 0x7f15005e
+int style Base_V28_Theme_AppCompat 0x7f15005f
+int style Base_V28_Theme_AppCompat_Light 0x7f150060
+int style Base_V7_ThemeOverlay_AppCompat_Dialog 0x7f150061
+int style Base_V7_Theme_AppCompat 0x7f150062
+int style Base_V7_Theme_AppCompat_Dialog 0x7f150063
+int style Base_V7_Theme_AppCompat_Light 0x7f150064
+int style Base_V7_Theme_AppCompat_Light_Dialog 0x7f150065
+int style Base_V7_Widget_AppCompat_AutoCompleteTextView 0x7f150066
+int style Base_V7_Widget_AppCompat_EditText 0x7f150067
+int style Base_V7_Widget_AppCompat_Toolbar 0x7f150068
+int style Base_Widget_AppCompat_ActionBar 0x7f150069
+int style Base_Widget_AppCompat_ActionBar_Solid 0x7f15006a
+int style Base_Widget_AppCompat_ActionBar_TabBar 0x7f15006b
+int style Base_Widget_AppCompat_ActionBar_TabText 0x7f15006c
+int style Base_Widget_AppCompat_ActionBar_TabView 0x7f15006d
+int style Base_Widget_AppCompat_ActionButton 0x7f15006e
+int style Base_Widget_AppCompat_ActionButton_CloseMode 0x7f15006f
+int style Base_Widget_AppCompat_ActionButton_Overflow 0x7f150070
+int style Base_Widget_AppCompat_ActionMode 0x7f150071
+int style Base_Widget_AppCompat_ActivityChooserView 0x7f150072
+int style Base_Widget_AppCompat_AutoCompleteTextView 0x7f150073
+int style Base_Widget_AppCompat_Button 0x7f150074
+int style Base_Widget_AppCompat_ButtonBar 0x7f150075
+int style Base_Widget_AppCompat_ButtonBar_AlertDialog 0x7f150076
+int style Base_Widget_AppCompat_Button_Borderless 0x7f150077
+int style Base_Widget_AppCompat_Button_Borderless_Colored 0x7f150078
+int style Base_Widget_AppCompat_Button_ButtonBar_AlertDialog 0x7f150079
+int style Base_Widget_AppCompat_Button_Colored 0x7f15007a
+int style Base_Widget_AppCompat_Button_Small 0x7f15007b
+int style Base_Widget_AppCompat_CompoundButton_CheckBox 0x7f15007c
+int style Base_Widget_AppCompat_CompoundButton_RadioButton 0x7f15007d
+int style Base_Widget_AppCompat_CompoundButton_Switch 0x7f15007e
+int style Base_Widget_AppCompat_DrawerArrowToggle 0x7f15007f
+int style Base_Widget_AppCompat_DrawerArrowToggle_Common 0x7f150080
+int style Base_Widget_AppCompat_DropDownItem_Spinner 0x7f150081
+int style Base_Widget_AppCompat_EditText 0x7f150082
+int style Base_Widget_AppCompat_ImageButton 0x7f150083
+int style Base_Widget_AppCompat_Light_ActionBar 0x7f150084
+int style Base_Widget_AppCompat_Light_ActionBar_Solid 0x7f150085
+int style Base_Widget_AppCompat_Light_ActionBar_TabBar 0x7f150086
+int style Base_Widget_AppCompat_Light_ActionBar_TabText 0x7f150087
+int style Base_Widget_AppCompat_Light_ActionBar_TabText_Inverse 0x7f150088
+int style Base_Widget_AppCompat_Light_ActionBar_TabView 0x7f150089
+int style Base_Widget_AppCompat_Light_PopupMenu 0x7f15008a
+int style Base_Widget_AppCompat_Light_PopupMenu_Overflow 0x7f15008b
+int style Base_Widget_AppCompat_ListMenuView 0x7f15008c
+int style Base_Widget_AppCompat_ListPopupWindow 0x7f15008d
+int style Base_Widget_AppCompat_ListView 0x7f15008e
+int style Base_Widget_AppCompat_ListView_DropDown 0x7f15008f
+int style Base_Widget_AppCompat_ListView_Menu 0x7f150090
+int style Base_Widget_AppCompat_PopupMenu 0x7f150091
+int style Base_Widget_AppCompat_PopupMenu_Overflow 0x7f150092
+int style Base_Widget_AppCompat_PopupWindow 0x7f150093
+int style Base_Widget_AppCompat_ProgressBar 0x7f150094
+int style Base_Widget_AppCompat_ProgressBar_Horizontal 0x7f150095
+int style Base_Widget_AppCompat_RatingBar 0x7f150096
+int style Base_Widget_AppCompat_RatingBar_Indicator 0x7f150097
+int style Base_Widget_AppCompat_RatingBar_Small 0x7f150098
+int style Base_Widget_AppCompat_SearchView 0x7f150099
+int style Base_Widget_AppCompat_SearchView_ActionBar 0x7f15009a
+int style Base_Widget_AppCompat_SeekBar 0x7f15009b
+int style Base_Widget_AppCompat_SeekBar_Discrete 0x7f15009c
+int style Base_Widget_AppCompat_Spinner 0x7f15009d
+int style Base_Widget_AppCompat_Spinner_Underlined 0x7f15009e
+int style Base_Widget_AppCompat_TextView_SpinnerItem 0x7f15009f
+int style Base_Widget_AppCompat_Toolbar 0x7f1500a0
+int style Base_Widget_AppCompat_Toolbar_Button_Navigation 0x7f1500a1
+int style CalendarDatePickerDialog 0x7f1500a2
+int style CalendarDatePickerStyle 0x7f1500a3
+int style ClockTimePickerDialog 0x7f1500a4
+int style ClockTimePickerStyle 0x7f1500a5
+int style DialogAnimationFade 0x7f1500a6
+int style DialogAnimationSlide 0x7f1500a7
+int style Platform_AppCompat 0x7f1500a8
+int style Platform_AppCompat_Light 0x7f1500a9
+int style Platform_ThemeOverlay_AppCompat 0x7f1500aa
+int style Platform_ThemeOverlay_AppCompat_Dark 0x7f1500ab
+int style Platform_ThemeOverlay_AppCompat_Light 0x7f1500ac
+int style Platform_V21_AppCompat 0x7f1500ad
+int style Platform_V21_AppCompat_Light 0x7f1500ae
+int style Platform_V25_AppCompat 0x7f1500af
+int style Platform_V25_AppCompat_Light 0x7f1500b0
+int style Platform_Widget_AppCompat_Spinner 0x7f1500b1
+int style RtlOverlay_DialogWindowTitle_AppCompat 0x7f1500b2
+int style RtlOverlay_Widget_AppCompat_ActionBar_TitleItem 0x7f1500b3
+int style RtlOverlay_Widget_AppCompat_DialogTitle_Icon 0x7f1500b4
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem 0x7f1500b5
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem_InternalGroup 0x7f1500b6
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem_Shortcut 0x7f1500b7
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem_SubmenuArrow 0x7f1500b8
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem_Text 0x7f1500b9
+int style RtlOverlay_Widget_AppCompat_PopupMenuItem_Title 0x7f1500ba
+int style RtlOverlay_Widget_AppCompat_SearchView_MagIcon 0x7f1500bb
+int style RtlOverlay_Widget_AppCompat_Search_DropDown 0x7f1500bc
+int style RtlOverlay_Widget_AppCompat_Search_DropDown_Icon1 0x7f1500bd
+int style RtlOverlay_Widget_AppCompat_Search_DropDown_Icon2 0x7f1500be
+int style RtlOverlay_Widget_AppCompat_Search_DropDown_Query 0x7f1500bf
+int style RtlOverlay_Widget_AppCompat_Search_DropDown_Text 0x7f1500c0
+int style RtlUnderlay_Widget_AppCompat_ActionButton 0x7f1500c1
+int style RtlUnderlay_Widget_AppCompat_ActionButton_Overflow 0x7f1500c2
+int style SpinnerDatePickerDialog 0x7f1500c3
+int style SpinnerDatePickerStyle 0x7f1500c4
+int style SpinnerTimePickerDialog 0x7f1500c5
+int style SpinnerTimePickerStyle 0x7f1500c6
+int style TextAppearance_AppCompat 0x7f1500c7
+int style TextAppearance_AppCompat_Body1 0x7f1500c8
+int style TextAppearance_AppCompat_Body2 0x7f1500c9
+int style TextAppearance_AppCompat_Button 0x7f1500ca
+int style TextAppearance_AppCompat_Caption 0x7f1500cb
+int style TextAppearance_AppCompat_Display1 0x7f1500cc
+int style TextAppearance_AppCompat_Display2 0x7f1500cd
+int style TextAppearance_AppCompat_Display3 0x7f1500ce
+int style TextAppearance_AppCompat_Display4 0x7f1500cf
+int style TextAppearance_AppCompat_Headline 0x7f1500d0
+int style TextAppearance_AppCompat_Inverse 0x7f1500d1
+int style TextAppearance_AppCompat_Large 0x7f1500d2
+int style TextAppearance_AppCompat_Large_Inverse 0x7f1500d3
+int style TextAppearance_AppCompat_Light_SearchResult_Subtitle 0x7f1500d4
+int style TextAppearance_AppCompat_Light_SearchResult_Title 0x7f1500d5
+int style TextAppearance_AppCompat_Light_Widget_PopupMenu_Large 0x7f1500d6
+int style TextAppearance_AppCompat_Light_Widget_PopupMenu_Small 0x7f1500d7
+int style TextAppearance_AppCompat_Medium 0x7f1500d8
+int style TextAppearance_AppCompat_Medium_Inverse 0x7f1500d9
+int style TextAppearance_AppCompat_Menu 0x7f1500da
+int style TextAppearance_AppCompat_SearchResult_Subtitle 0x7f1500db
+int style TextAppearance_AppCompat_SearchResult_Title 0x7f1500dc
+int style TextAppearance_AppCompat_Small 0x7f1500dd
+int style TextAppearance_AppCompat_Small_Inverse 0x7f1500de
+int style TextAppearance_AppCompat_Subhead 0x7f1500df
+int style TextAppearance_AppCompat_Subhead_Inverse 0x7f1500e0
+int style TextAppearance_AppCompat_Title 0x7f1500e1
+int style TextAppearance_AppCompat_Title_Inverse 0x7f1500e2
+int style TextAppearance_AppCompat_Tooltip 0x7f1500e3
+int style TextAppearance_AppCompat_Widget_ActionBar_Menu 0x7f1500e4
+int style TextAppearance_AppCompat_Widget_ActionBar_Subtitle 0x7f1500e5
+int style TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse 0x7f1500e6
+int style TextAppearance_AppCompat_Widget_ActionBar_Title 0x7f1500e7
+int style TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse 0x7f1500e8
+int style TextAppearance_AppCompat_Widget_ActionMode_Subtitle 0x7f1500e9
+int style TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse 0x7f1500ea
+int style TextAppearance_AppCompat_Widget_ActionMode_Title 0x7f1500eb
+int style TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse 0x7f1500ec
+int style TextAppearance_AppCompat_Widget_Button 0x7f1500ed
+int style TextAppearance_AppCompat_Widget_Button_Borderless_Colored 0x7f1500ee
+int style TextAppearance_AppCompat_Widget_Button_Colored 0x7f1500ef
+int style TextAppearance_AppCompat_Widget_Button_Inverse 0x7f1500f0
+int style TextAppearance_AppCompat_Widget_DropDownItem 0x7f1500f1
+int style TextAppearance_AppCompat_Widget_PopupMenu_Header 0x7f1500f2
+int style TextAppearance_AppCompat_Widget_PopupMenu_Large 0x7f1500f3
+int style TextAppearance_AppCompat_Widget_PopupMenu_Small 0x7f1500f4
+int style TextAppearance_AppCompat_Widget_Switch 0x7f1500f5
+int style TextAppearance_AppCompat_Widget_TextView_SpinnerItem 0x7f1500f6
+int style TextAppearance_Compat_Notification 0x7f1500f7
+int style TextAppearance_Compat_Notification_Info 0x7f1500f8
+int style TextAppearance_Compat_Notification_Line2 0x7f1500f9
+int style TextAppearance_Compat_Notification_Time 0x7f1500fa
+int style TextAppearance_Compat_Notification_Title 0x7f1500fb
+int style TextAppearance_Widget_AppCompat_ExpandedMenu_Item 0x7f1500fc
+int style TextAppearance_Widget_AppCompat_Toolbar_Subtitle 0x7f1500fd
+int style TextAppearance_Widget_AppCompat_Toolbar_Title 0x7f1500fe
+int style Theme 0x7f1500ff
+int style ThemeOverlay_AppCompat 0x7f150100
+int style ThemeOverlay_AppCompat_ActionBar 0x7f150101
+int style ThemeOverlay_AppCompat_Dark 0x7f150102
+int style ThemeOverlay_AppCompat_Dark_ActionBar 0x7f150103
+int style ThemeOverlay_AppCompat_Dialog 0x7f150104
+int style ThemeOverlay_AppCompat_Dialog_Alert 0x7f150105
+int style ThemeOverlay_AppCompat_Light 0x7f150106
+int style Theme_AppCompat 0x7f150107
+int style Theme_AppCompat_CompactMenu 0x7f150108
+int style Theme_AppCompat_DayNight 0x7f150109
+int style Theme_AppCompat_DayNight_DarkActionBar 0x7f15010a
+int style Theme_AppCompat_DayNight_Dialog 0x7f15010b
+int style Theme_AppCompat_DayNight_DialogWhenLarge 0x7f15010c
+int style Theme_AppCompat_DayNight_Dialog_Alert 0x7f15010d
+int style Theme_AppCompat_DayNight_Dialog_MinWidth 0x7f15010e
+int style Theme_AppCompat_DayNight_NoActionBar 0x7f15010f
+int style Theme_AppCompat_Dialog 0x7f150110
+int style Theme_AppCompat_DialogWhenLarge 0x7f150111
+int style Theme_AppCompat_Dialog_Alert 0x7f150112
+int style Theme_AppCompat_Dialog_MinWidth 0x7f150113
+int style Theme_AppCompat_Light 0x7f150114
+int style Theme_AppCompat_Light_DarkActionBar 0x7f150115
+int style Theme_AppCompat_Light_Dialog 0x7f150116
+int style Theme_AppCompat_Light_DialogWhenLarge 0x7f150117
+int style Theme_AppCompat_Light_Dialog_Alert 0x7f150118
+int style Theme_AppCompat_Light_Dialog_MinWidth 0x7f150119
+int style Theme_AppCompat_Light_NoActionBar 0x7f15011a
+int style Theme_AppCompat_NoActionBar 0x7f15011b
+int style Theme_Catalyst 0x7f15011c
+int style Theme_Catalyst_RedBox 0x7f15011d
+int style Theme_FullScreenDialog 0x7f15011e
+int style Theme_FullScreenDialogAnimatedFade 0x7f15011f
+int style Theme_FullScreenDialogAnimatedSlide 0x7f150120
+int style Theme_ReactNative_AppCompat_Light 0x7f150121
+int style Theme_ReactNative_AppCompat_Light_NoActionBar_FullScreen 0x7f150122
+int style Widget_AppCompat_ActionBar 0x7f150123
+int style Widget_AppCompat_ActionBar_Solid 0x7f150124
+int style Widget_AppCompat_ActionBar_TabBar 0x7f150125
+int style Widget_AppCompat_ActionBar_TabText 0x7f150126
+int style Widget_AppCompat_ActionBar_TabView 0x7f150127
+int style Widget_AppCompat_ActionButton 0x7f150128
+int style Widget_AppCompat_ActionButton_CloseMode 0x7f150129
+int style Widget_AppCompat_ActionButton_Overflow 0x7f15012a
+int style Widget_AppCompat_ActionMode 0x7f15012b
+int style Widget_AppCompat_ActivityChooserView 0x7f15012c
+int style Widget_AppCompat_AutoCompleteTextView 0x7f15012d
+int style Widget_AppCompat_Button 0x7f15012e
+int style Widget_AppCompat_ButtonBar 0x7f15012f
+int style Widget_AppCompat_ButtonBar_AlertDialog 0x7f150130
+int style Widget_AppCompat_Button_Borderless 0x7f150131
+int style Widget_AppCompat_Button_Borderless_Colored 0x7f150132
+int style Widget_AppCompat_Button_ButtonBar_AlertDialog 0x7f150133
+int style Widget_AppCompat_Button_Colored 0x7f150134
+int style Widget_AppCompat_Button_Small 0x7f150135
+int style Widget_AppCompat_CompoundButton_CheckBox 0x7f150136
+int style Widget_AppCompat_CompoundButton_RadioButton 0x7f150137
+int style Widget_AppCompat_CompoundButton_Switch 0x7f150138
+int style Widget_AppCompat_DrawerArrowToggle 0x7f150139
+int style Widget_AppCompat_DropDownItem_Spinner 0x7f15013a
+int style Widget_AppCompat_EditText 0x7f15013b
+int style Widget_AppCompat_ImageButton 0x7f15013c
+int style Widget_AppCompat_Light_ActionBar 0x7f15013d
+int style Widget_AppCompat_Light_ActionBar_Solid 0x7f15013e
+int style Widget_AppCompat_Light_ActionBar_Solid_Inverse 0x7f15013f
+int style Widget_AppCompat_Light_ActionBar_TabBar 0x7f150140
+int style Widget_AppCompat_Light_ActionBar_TabBar_Inverse 0x7f150141
+int style Widget_AppCompat_Light_ActionBar_TabText 0x7f150142
+int style Widget_AppCompat_Light_ActionBar_TabText_Inverse 0x7f150143
+int style Widget_AppCompat_Light_ActionBar_TabView 0x7f150144
+int style Widget_AppCompat_Light_ActionBar_TabView_Inverse 0x7f150145
+int style Widget_AppCompat_Light_ActionButton 0x7f150146
+int style Widget_AppCompat_Light_ActionButton_CloseMode 0x7f150147
+int style Widget_AppCompat_Light_ActionButton_Overflow 0x7f150148
+int style Widget_AppCompat_Light_ActionMode_Inverse 0x7f150149
+int style Widget_AppCompat_Light_ActivityChooserView 0x7f15014a
+int style Widget_AppCompat_Light_AutoCompleteTextView 0x7f15014b
+int style Widget_AppCompat_Light_DropDownItem_Spinner 0x7f15014c
+int style Widget_AppCompat_Light_ListPopupWindow 0x7f15014d
+int style Widget_AppCompat_Light_ListView_DropDown 0x7f15014e
+int style Widget_AppCompat_Light_PopupMenu 0x7f15014f
+int style Widget_AppCompat_Light_PopupMenu_Overflow 0x7f150150
+int style Widget_AppCompat_Light_SearchView 0x7f150151
+int style Widget_AppCompat_Light_Spinner_DropDown_ActionBar 0x7f150152
+int style Widget_AppCompat_ListMenuView 0x7f150153
+int style Widget_AppCompat_ListPopupWindow 0x7f150154
+int style Widget_AppCompat_ListView 0x7f150155
+int style Widget_AppCompat_ListView_DropDown 0x7f150156
+int style Widget_AppCompat_ListView_Menu 0x7f150157
+int style Widget_AppCompat_PopupMenu 0x7f150158
+int style Widget_AppCompat_PopupMenu_Overflow 0x7f150159
+int style Widget_AppCompat_PopupWindow 0x7f15015a
+int style Widget_AppCompat_ProgressBar 0x7f15015b
+int style Widget_AppCompat_ProgressBar_Horizontal 0x7f15015c
+int style Widget_AppCompat_RatingBar 0x7f15015d
+int style Widget_AppCompat_RatingBar_Indicator 0x7f15015e
+int style Widget_AppCompat_RatingBar_Small 0x7f15015f
+int style Widget_AppCompat_SearchView 0x7f150160
+int style Widget_AppCompat_SearchView_ActionBar 0x7f150161
+int style Widget_AppCompat_SeekBar 0x7f150162
+int style Widget_AppCompat_SeekBar_Discrete 0x7f150163
+int style Widget_AppCompat_Spinner 0x7f150164
+int style Widget_AppCompat_Spinner_DropDown 0x7f150165
+int style Widget_AppCompat_Spinner_DropDown_ActionBar 0x7f150166
+int style Widget_AppCompat_Spinner_Underlined 0x7f150167
+int style Widget_AppCompat_TextView_SpinnerItem 0x7f150168
+int style Widget_AppCompat_Toolbar 0x7f150169
+int style Widget_AppCompat_Toolbar_Button_Navigation 0x7f15016a
+int style Widget_Compat_NotificationActionContainer 0x7f15016b
+int style Widget_Compat_NotificationActionText 0x7f15016c
+int style Widget_Support_CoordinatorLayout 0x7f15016d
+int style redboxButton 0x7f15016e
+int[] styleable ActionBar { 0x7f040035, 0x7f040037, 0x7f040038, 0x7f04005c, 0x7f04005d, 0x7f04005e, 0x7f04005f, 0x7f040060, 0x7f040061, 0x7f040064, 0x7f040069, 0x7f04006a, 0x7f040075, 0x7f040088, 0x7f040089, 0x7f04008a, 0x7f04008b, 0x7f04008c, 0x7f040091, 0x7f040094, 0x7f0400aa, 0x7f0400b1, 0x7f0400bf, 0x7f0400c6, 0x7f0400c7, 0x7f0400f2, 0x7f0400f5, 0x7f040110, 0x7f040119 }
+int styleable ActionBar_background 0
+int styleable ActionBar_backgroundSplit 1
+int styleable ActionBar_backgroundStacked 2
+int styleable ActionBar_contentInsetEnd 3
+int styleable ActionBar_contentInsetEndWithActions 4
+int styleable ActionBar_contentInsetLeft 5
+int styleable ActionBar_contentInsetRight 6
+int styleable ActionBar_contentInsetStart 7
+int styleable ActionBar_contentInsetStartWithNavigation 8
+int styleable ActionBar_customNavigationLayout 9
+int styleable ActionBar_displayOptions 10
+int styleable ActionBar_divider 11
+int styleable ActionBar_elevation 12
+int styleable ActionBar_height 13
+int styleable ActionBar_hideOnContentScroll 14
+int styleable ActionBar_homeAsUpIndicator 15
+int styleable ActionBar_homeLayout 16
+int styleable ActionBar_icon 17
+int styleable ActionBar_indeterminateProgressStyle 18
+int styleable ActionBar_itemPadding 19
+int styleable ActionBar_logo 20
+int styleable ActionBar_navigationMode 21
+int styleable ActionBar_popupTheme 22
+int styleable ActionBar_progressBarPadding 23
+int styleable ActionBar_progressBarStyle 24
+int styleable ActionBar_subtitle 25
+int styleable ActionBar_subtitleTextStyle 26
+int styleable ActionBar_title 27
+int styleable ActionBar_titleTextStyle 28
+int[] styleable ActionBarLayout { 0x10100b3 }
+int styleable ActionBarLayout_android_layout_gravity 0
+int[] styleable ActionMenuItemView { 0x101013f }
+int styleable ActionMenuItemView_android_minWidth 0
+int[] styleable ActionMenuView {  }
+int[] styleable ActionMode { 0x7f040035, 0x7f040037, 0x7f04004c, 0x7f040088, 0x7f0400f5, 0x7f040119 }
+int styleable ActionMode_background 0
+int styleable ActionMode_backgroundSplit 1
+int styleable ActionMode_closeItemLayout 2
+int styleable ActionMode_height 3
+int styleable ActionMode_subtitleTextStyle 4
+int styleable ActionMode_titleTextStyle 5
+int[] styleable ActivityChooserView { 0x7f040076, 0x7f040092 }
+int styleable ActivityChooserView_expandActivityOverflowButtonDrawable 0
+int styleable ActivityChooserView_initialActivityCount 1
+int[] styleable AlertDialog { 0x10100f2, 0x7f040043, 0x7f040044, 0x7f0400a1, 0x7f0400a2, 0x7f0400ae, 0x7f0400e7, 0x7f0400e8 }
+int styleable AlertDialog_android_layout 0
+int styleable AlertDialog_buttonIconDimen 1
+int styleable AlertDialog_buttonPanelSideLayout 2
+int styleable AlertDialog_listItemLayout 3
+int styleable AlertDialog_listLayout 4
+int styleable AlertDialog_multiChoiceItemLayout 5
+int styleable AlertDialog_showTitle 6
+int styleable AlertDialog_singleChoiceItemLayout 7
+int[] styleable AnimatedStateListDrawableCompat { 0x1010196, 0x101011c, 0x101030c, 0x101030d, 0x1010195, 0x1010194 }
+int styleable AnimatedStateListDrawableCompat_android_constantSize 0
+int styleable AnimatedStateListDrawableCompat_android_dither 1
+int styleable AnimatedStateListDrawableCompat_android_enterFadeDuration 2
+int styleable AnimatedStateListDrawableCompat_android_exitFadeDuration 3
+int styleable AnimatedStateListDrawableCompat_android_variablePadding 4
+int styleable AnimatedStateListDrawableCompat_android_visible 5
+int[] styleable AnimatedStateListDrawableItem { 0x1010199, 0x10100d0 }
+int styleable AnimatedStateListDrawableItem_android_drawable 0
+int styleable AnimatedStateListDrawableItem_android_id 1
+int[] styleable AnimatedStateListDrawableTransition { 0x1010199, 0x101044a, 0x101044b, 0x1010449 }
+int styleable AnimatedStateListDrawableTransition_android_drawable 0
+int styleable AnimatedStateListDrawableTransition_android_fromId 1
+int styleable AnimatedStateListDrawableTransition_android_reversible 2
+int styleable AnimatedStateListDrawableTransition_android_toId 3
+int[] styleable AppCompatImageView { 0x1010119, 0x7f0400ed, 0x7f04010e, 0x7f04010f }
+int styleable AppCompatImageView_android_src 0
+int styleable AppCompatImageView_srcCompat 1
+int styleable AppCompatImageView_tint 2
+int styleable AppCompatImageView_tintMode 3
+int[] styleable AppCompatSeekBar { 0x1010142, 0x7f04010b, 0x7f04010c, 0x7f04010d }
+int styleable AppCompatSeekBar_android_thumb 0
+int styleable AppCompatSeekBar_tickMark 1
+int styleable AppCompatSeekBar_tickMarkTint 2
+int styleable AppCompatSeekBar_tickMarkTintMode 3
+int[] styleable AppCompatTextHelper { 0x101016e, 0x1010393, 0x101016f, 0x1010170, 0x1010392, 0x101016d, 0x1010034 }
+int styleable AppCompatTextHelper_android_drawableBottom 0
+int styleable AppCompatTextHelper_android_drawableEnd 1
+int styleable AppCompatTextHelper_android_drawableLeft 2
+int styleable AppCompatTextHelper_android_drawableRight 3
+int styleable AppCompatTextHelper_android_drawableStart 4
+int styleable AppCompatTextHelper_android_drawableTop 5
+int styleable AppCompatTextHelper_android_textAppearance 6
+int[] styleable AppCompatTextView { 0x1010034, 0x7f040030, 0x7f040031, 0x7f040032, 0x7f040033, 0x7f040034, 0x7f04007a, 0x7f04007c, 0x7f040096, 0x7f04009e, 0x7f0400fb }
+int styleable AppCompatTextView_android_textAppearance 0
+int styleable AppCompatTextView_autoSizeMaxTextSize 1
+int styleable AppCompatTextView_autoSizeMinTextSize 2
+int styleable AppCompatTextView_autoSizePresetSizes 3
+int styleable AppCompatTextView_autoSizeStepGranularity 4
+int styleable AppCompatTextView_autoSizeTextType 5
+int styleable AppCompatTextView_firstBaselineToTopHeight 6
+int styleable AppCompatTextView_fontFamily 7
+int styleable AppCompatTextView_lastBaselineToBottomHeight 8
+int styleable AppCompatTextView_lineHeight 9
+int styleable AppCompatTextView_textAllCaps 10
+int[] styleable AppCompatTheme { 0x7f040001, 0x7f040002, 0x7f040003, 0x7f040004, 0x7f040005, 0x7f040006, 0x7f040007, 0x7f040008, 0x7f040009, 0x7f04000a, 0x7f04000b, 0x7f04000c, 0x7f04000d, 0x7f04000f, 0x7f040010, 0x7f040011, 0x7f040012, 0x7f040013, 0x7f040014, 0x7f040015, 0x7f040016, 0x7f040017, 0x7f040018, 0x7f040019, 0x7f04001a, 0x7f04001b, 0x7f04001c, 0x7f04001d, 0x7f04001e, 0x7f04001f, 0x7f040022, 0x7f040026, 0x7f040027, 0x7f040028, 0x7f040029, 0x10100ae, 0x1010057, 0x7f04002f, 0x7f04003c, 0x7f04003d, 0x7f04003e, 0x7f04003f, 0x7f040040, 0x7f040041, 0x7f040045, 0x7f040046, 0x7f040049, 0x7f04004a, 0x7f040050, 0x7f040051, 0x7f040052, 0x7f040053, 0x7f040054, 0x7f040055, 0x7f040056, 0x7f040057, 0x7f040058, 0x7f040059, 0x7f040062, 0x7f040066, 0x7f040067, 0x7f040068, 0x7f04006b, 0x7f04006d, 0x7f040070, 0x7f040071, 0x7f040072, 0x7f040073, 0x7f040074, 0x7f04008a, 0x7f040090, 0x7f04009f, 0x7f0400a0, 0x7f0400a3, 0x7f0400a4, 0x7f0400a5, 0x7f0400a6, 0x7f0400a7, 0x7f0400a8, 0x7f0400a9, 0x7f0400b9, 0x7f0400ba, 0x7f0400bb, 0x7f0400be, 0x7f0400c0, 0x7f0400ca, 0x7f0400cb, 0x7f0400cc, 0x7f0400cd, 0x7f0400e0, 0x7f0400e1, 0x7f0400e2, 0x7f0400e3, 0x7f0400ea, 0x7f0400eb, 0x7f0400f9, 0x7f0400fc, 0x7f0400fd, 0x7f0400fe, 0x7f0400ff, 0x7f040100, 0x7f040101, 0x7f040102, 0x7f040103, 0x7f040104, 0x7f040105, 0x7f04011a, 0x7f04011b, 0x7f04011c, 0x7f04011d, 0x7f040124, 0x7f040126, 0x7f040127, 0x7f040128, 0x7f040129, 0x7f04012a, 0x7f04012b, 0x7f04012c, 0x7f04012d, 0x7f04012e, 0x7f04012f }
+int styleable AppCompatTheme_actionBarDivider 0
+int styleable AppCompatTheme_actionBarItemBackground 1
+int styleable AppCompatTheme_actionBarPopupTheme 2
+int styleable AppCompatTheme_actionBarSize 3
+int styleable AppCompatTheme_actionBarSplitStyle 4
+int styleable AppCompatTheme_actionBarStyle 5
+int styleable AppCompatTheme_actionBarTabBarStyle 6
+int styleable AppCompatTheme_actionBarTabStyle 7
+int styleable AppCompatTheme_actionBarTabTextStyle 8
+int styleable AppCompatTheme_actionBarTheme 9
+int styleable AppCompatTheme_actionBarWidgetTheme 10
+int styleable AppCompatTheme_actionButtonStyle 11
+int styleable AppCompatTheme_actionDropDownStyle 12
+int styleable AppCompatTheme_actionMenuTextAppearance 13
+int styleable AppCompatTheme_actionMenuTextColor 14
+int styleable AppCompatTheme_actionModeBackground 15
+int styleable AppCompatTheme_actionModeCloseButtonStyle 16
+int styleable AppCompatTheme_actionModeCloseDrawable 17
+int styleable AppCompatTheme_actionModeCopyDrawable 18
+int styleable AppCompatTheme_actionModeCutDrawable 19
+int styleable AppCompatTheme_actionModeFindDrawable 20
+int styleable AppCompatTheme_actionModePasteDrawable 21
+int styleable AppCompatTheme_actionModePopupWindowStyle 22
+int styleable AppCompatTheme_actionModeSelectAllDrawable 23
+int styleable AppCompatTheme_actionModeShareDrawable 24
+int styleable AppCompatTheme_actionModeSplitBackground 25
+int styleable AppCompatTheme_actionModeStyle 26
+int styleable AppCompatTheme_actionModeWebSearchDrawable 27
+int styleable AppCompatTheme_actionOverflowButtonStyle 28
+int styleable AppCompatTheme_actionOverflowMenuStyle 29
+int styleable AppCompatTheme_activityChooserViewStyle 30
+int styleable AppCompatTheme_alertDialogButtonGroupStyle 31
+int styleable AppCompatTheme_alertDialogCenterButtons 32
+int styleable AppCompatTheme_alertDialogStyle 33
+int styleable AppCompatTheme_alertDialogTheme 34
+int styleable AppCompatTheme_android_windowAnimationStyle 35
+int styleable AppCompatTheme_android_windowIsFloating 36
+int styleable AppCompatTheme_autoCompleteTextViewStyle 37
+int styleable AppCompatTheme_borderlessButtonStyle 38
+int styleable AppCompatTheme_buttonBarButtonStyle 39
+int styleable AppCompatTheme_buttonBarNegativeButtonStyle 40
+int styleable AppCompatTheme_buttonBarNeutralButtonStyle 41
+int styleable AppCompatTheme_buttonBarPositiveButtonStyle 42
+int styleable AppCompatTheme_buttonBarStyle 43
+int styleable AppCompatTheme_buttonStyle 44
+int styleable AppCompatTheme_buttonStyleSmall 45
+int styleable AppCompatTheme_checkboxStyle 46
+int styleable AppCompatTheme_checkedTextViewStyle 47
+int styleable AppCompatTheme_colorAccent 48
+int styleable AppCompatTheme_colorBackgroundFloating 49
+int styleable AppCompatTheme_colorButtonNormal 50
+int styleable AppCompatTheme_colorControlActivated 51
+int styleable AppCompatTheme_colorControlHighlight 52
+int styleable AppCompatTheme_colorControlNormal 53
+int styleable AppCompatTheme_colorError 54
+int styleable AppCompatTheme_colorPrimary 55
+int styleable AppCompatTheme_colorPrimaryDark 56
+int styleable AppCompatTheme_colorSwitchThumbNormal 57
+int styleable AppCompatTheme_controlBackground 58
+int styleable AppCompatTheme_dialogCornerRadius 59
+int styleable AppCompatTheme_dialogPreferredPadding 60
+int styleable AppCompatTheme_dialogTheme 61
+int styleable AppCompatTheme_dividerHorizontal 62
+int styleable AppCompatTheme_dividerVertical 63
+int styleable AppCompatTheme_dropDownListViewStyle 64
+int styleable AppCompatTheme_dropdownListPreferredItemHeight 65
+int styleable AppCompatTheme_editTextBackground 66
+int styleable AppCompatTheme_editTextColor 67
+int styleable AppCompatTheme_editTextStyle 68
+int styleable AppCompatTheme_homeAsUpIndicator 69
+int styleable AppCompatTheme_imageButtonStyle 70
+int styleable AppCompatTheme_listChoiceBackgroundIndicator 71
+int styleable AppCompatTheme_listDividerAlertDialog 72
+int styleable AppCompatTheme_listMenuViewStyle 73
+int styleable AppCompatTheme_listPopupWindowStyle 74
+int styleable AppCompatTheme_listPreferredItemHeight 75
+int styleable AppCompatTheme_listPreferredItemHeightLarge 76
+int styleable AppCompatTheme_listPreferredItemHeightSmall 77
+int styleable AppCompatTheme_listPreferredItemPaddingLeft 78
+int styleable AppCompatTheme_listPreferredItemPaddingRight 79
+int styleable AppCompatTheme_panelBackground 80
+int styleable AppCompatTheme_panelMenuListTheme 81
+int styleable AppCompatTheme_panelMenuListWidth 82
+int styleable AppCompatTheme_popupMenuStyle 83
+int styleable AppCompatTheme_popupWindowStyle 84
+int styleable AppCompatTheme_radioButtonStyle 85
+int styleable AppCompatTheme_ratingBarStyle 86
+int styleable AppCompatTheme_ratingBarStyleIndicator 87
+int styleable AppCompatTheme_ratingBarStyleSmall 88
+int styleable AppCompatTheme_searchViewStyle 89
+int styleable AppCompatTheme_seekBarStyle 90
+int styleable AppCompatTheme_selectableItemBackground 91
+int styleable AppCompatTheme_selectableItemBackgroundBorderless 92
+int styleable AppCompatTheme_spinnerDropDownItemStyle 93
+int styleable AppCompatTheme_spinnerStyle 94
+int styleable AppCompatTheme_switchStyle 95
+int styleable AppCompatTheme_textAppearanceLargePopupMenu 96
+int styleable AppCompatTheme_textAppearanceListItem 97
+int styleable AppCompatTheme_textAppearanceListItemSecondary 98
+int styleable AppCompatTheme_textAppearanceListItemSmall 99
+int styleable AppCompatTheme_textAppearancePopupMenuHeader 100
+int styleable AppCompatTheme_textAppearanceSearchResultSubtitle 101
+int styleable AppCompatTheme_textAppearanceSearchResultTitle 102
+int styleable AppCompatTheme_textAppearanceSmallPopupMenu 103
+int styleable AppCompatTheme_textColorAlertDialogListItem 104
+int styleable AppCompatTheme_textColorSearchUrl 105
+int styleable AppCompatTheme_toolbarNavigationButtonStyle 106
+int styleable AppCompatTheme_toolbarStyle 107
+int styleable AppCompatTheme_tooltipForegroundColor 108
+int styleable AppCompatTheme_tooltipFrameBackground 109
+int styleable AppCompatTheme_viewInflaterClass 110
+int styleable AppCompatTheme_windowActionBar 111
+int styleable AppCompatTheme_windowActionBarOverlay 112
+int styleable AppCompatTheme_windowActionModeOverlay 113
+int styleable AppCompatTheme_windowFixedHeightMajor 114
+int styleable AppCompatTheme_windowFixedHeightMinor 115
+int styleable AppCompatTheme_windowFixedWidthMajor 116
+int styleable AppCompatTheme_windowFixedWidthMinor 117
+int styleable AppCompatTheme_windowMinWidthMajor 118
+int styleable AppCompatTheme_windowMinWidthMinor 119
+int styleable AppCompatTheme_windowNoTitle 120
+int[] styleable ButtonBarLayout { 0x7f04002a }
+int styleable ButtonBarLayout_allowStacking 0
+int[] styleable ColorStateListItem { 0x7f04002b, 0x101031f, 0x10101a5 }
+int styleable ColorStateListItem_alpha 0
+int styleable ColorStateListItem_android_alpha 1
+int styleable ColorStateListItem_android_color 2
+int[] styleable CompoundButton { 0x1010107, 0x7f040047, 0x7f040048 }
+int styleable CompoundButton_android_button 0
+int styleable CompoundButton_buttonTint 1
+int styleable CompoundButton_buttonTintMode 2
+int[] styleable CoordinatorLayout { 0x7f040095, 0x7f0400ef }
+int styleable CoordinatorLayout_keylines 0
+int styleable CoordinatorLayout_statusBarBackground 1
+int[] styleable CoordinatorLayout_Layout { 0x10100b3, 0x7f040098, 0x7f040099, 0x7f04009a, 0x7f04009b, 0x7f04009c, 0x7f04009d }
+int styleable CoordinatorLayout_Layout_android_layout_gravity 0
+int styleable CoordinatorLayout_Layout_layout_anchor 1
+int styleable CoordinatorLayout_Layout_layout_anchorGravity 2
+int styleable CoordinatorLayout_Layout_layout_behavior 3
+int styleable CoordinatorLayout_Layout_layout_dodgeInsetEdges 4
+int styleable CoordinatorLayout_Layout_layout_insetEdge 5
+int styleable CoordinatorLayout_Layout_layout_keyline 6
+int[] styleable DrawerArrowToggle { 0x7f04002d, 0x7f04002e, 0x7f04003b, 0x7f04004f, 0x7f04006e, 0x7f040086, 0x7f0400e9, 0x7f040107 }
+int styleable DrawerArrowToggle_arrowHeadLength 0
+int styleable DrawerArrowToggle_arrowShaftLength 1
+int styleable DrawerArrowToggle_barLength 2
+int styleable DrawerArrowToggle_color 3
+int styleable DrawerArrowToggle_drawableSize 4
+int styleable DrawerArrowToggle_gapBetweenBars 5
+int styleable DrawerArrowToggle_spinBars 6
+int styleable DrawerArrowToggle_thickness 7
+int[] styleable FontFamily { 0x7f04007d, 0x7f04007e, 0x7f04007f, 0x7f040080, 0x7f040081, 0x7f040082 }
+int styleable FontFamily_fontProviderAuthority 0
+int styleable FontFamily_fontProviderCerts 1
+int styleable FontFamily_fontProviderFetchStrategy 2
+int styleable FontFamily_fontProviderFetchTimeout 3
+int styleable FontFamily_fontProviderPackage 4
+int styleable FontFamily_fontProviderQuery 5
+int[] styleable FontFamilyFont { 0x1010532, 0x101053f, 0x1010570, 0x1010533, 0x101056f, 0x7f04007b, 0x7f040083, 0x7f040084, 0x7f040085, 0x7f040122 }
+int styleable FontFamilyFont_android_font 0
+int styleable FontFamilyFont_android_fontStyle 1
+int styleable FontFamilyFont_android_fontVariationSettings 2
+int styleable FontFamilyFont_android_fontWeight 3
+int styleable FontFamilyFont_android_ttcIndex 4
+int styleable FontFamilyFont_font 5
+int styleable FontFamilyFont_fontStyle 6
+int styleable FontFamilyFont_fontVariationSettings 7
+int styleable FontFamilyFont_fontWeight 8
+int styleable FontFamilyFont_ttcIndex 9
+int[] styleable GenericDraweeHierarchy { 0x7f040024, 0x7f040036, 0x7f040077, 0x7f040078, 0x7f040079, 0x7f0400b4, 0x7f0400bc, 0x7f0400bd, 0x7f0400c2, 0x7f0400c3, 0x7f0400c4, 0x7f0400c5, 0x7f0400ce, 0x7f0400cf, 0x7f0400d0, 0x7f0400d1, 0x7f0400d2, 0x7f0400d3, 0x7f0400d4, 0x7f0400d5, 0x7f0400d6, 0x7f0400d7, 0x7f0400d8, 0x7f0400d9, 0x7f0400da, 0x7f0400db, 0x7f0400dc, 0x7f0400dd, 0x7f040123 }
+int styleable GenericDraweeHierarchy_actualImageScaleType 0
+int styleable GenericDraweeHierarchy_backgroundImage 1
+int styleable GenericDraweeHierarchy_fadeDuration 2
+int styleable GenericDraweeHierarchy_failureImage 3
+int styleable GenericDraweeHierarchy_failureImageScaleType 4
+int styleable GenericDraweeHierarchy_overlayImage 5
+int styleable GenericDraweeHierarchy_placeholderImage 6
+int styleable GenericDraweeHierarchy_placeholderImageScaleType 7
+int styleable GenericDraweeHierarchy_pressedStateOverlayImage 8
+int styleable GenericDraweeHierarchy_progressBarAutoRotateInterval 9
+int styleable GenericDraweeHierarchy_progressBarImage 10
+int styleable GenericDraweeHierarchy_progressBarImageScaleType 11
+int styleable GenericDraweeHierarchy_retryImage 12
+int styleable GenericDraweeHierarchy_retryImageScaleType 13
+int styleable GenericDraweeHierarchy_roundAsCircle 14
+int styleable GenericDraweeHierarchy_roundBottomEnd 15
+int styleable GenericDraweeHierarchy_roundBottomLeft 16
+int styleable GenericDraweeHierarchy_roundBottomRight 17
+int styleable GenericDraweeHierarchy_roundBottomStart 18
+int styleable GenericDraweeHierarchy_roundTopEnd 19
+int styleable GenericDraweeHierarchy_roundTopLeft 20
+int styleable GenericDraweeHierarchy_roundTopRight 21
+int styleable GenericDraweeHierarchy_roundTopStart 22
+int styleable GenericDraweeHierarchy_roundWithOverlayColor 23
+int styleable GenericDraweeHierarchy_roundedCornerRadius 24
+int styleable GenericDraweeHierarchy_roundingBorderColor 25
+int styleable GenericDraweeHierarchy_roundingBorderPadding 26
+int styleable GenericDraweeHierarchy_roundingBorderWidth 27
+int styleable GenericDraweeHierarchy_viewAspectRatio 28
+int[] styleable GradientColor { 0x101020b, 0x10101a2, 0x10101a3, 0x101019e, 0x1010512, 0x1010513, 0x10101a4, 0x101019d, 0x1010510, 0x1010511, 0x1010201, 0x10101a1 }
+int styleable GradientColor_android_centerColor 0
+int styleable GradientColor_android_centerX 1
+int styleable GradientColor_android_centerY 2
+int styleable GradientColor_android_endColor 3
+int styleable GradientColor_android_endX 4
+int styleable GradientColor_android_endY 5
+int styleable GradientColor_android_gradientRadius 6
+int styleable GradientColor_android_startColor 7
+int styleable GradientColor_android_startX 8
+int styleable GradientColor_android_startY 9
+int styleable GradientColor_android_tileMode 10
+int styleable GradientColor_android_type 11
+int[] styleable GradientColorItem { 0x10101a5, 0x1010514 }
+int styleable GradientColorItem_android_color 0
+int styleable GradientColorItem_android_offset 1
+int[] styleable LinearLayoutCompat { 0x1010126, 0x1010127, 0x10100af, 0x10100c4, 0x1010128, 0x7f04006a, 0x7f04006c, 0x7f0400ad, 0x7f0400e5 }
+int styleable LinearLayoutCompat_android_baselineAligned 0
+int styleable LinearLayoutCompat_android_baselineAlignedChildIndex 1
+int styleable LinearLayoutCompat_android_gravity 2
+int styleable LinearLayoutCompat_android_orientation 3
+int styleable LinearLayoutCompat_android_weightSum 4
+int styleable LinearLayoutCompat_divider 5
+int styleable LinearLayoutCompat_dividerPadding 6
+int styleable LinearLayoutCompat_measureWithLargestChild 7
+int styleable LinearLayoutCompat_showDividers 8
+int[] styleable LinearLayoutCompat_Layout { 0x10100b3, 0x10100f5, 0x1010181, 0x10100f4 }
+int styleable LinearLayoutCompat_Layout_android_layout_gravity 0
+int styleable LinearLayoutCompat_Layout_android_layout_height 1
+int styleable LinearLayoutCompat_Layout_android_layout_weight 2
+int styleable LinearLayoutCompat_Layout_android_layout_width 3
+int[] styleable ListPopupWindow { 0x10102ac, 0x10102ad }
+int styleable ListPopupWindow_android_dropDownHorizontalOffset 0
+int styleable ListPopupWindow_android_dropDownVerticalOffset 1
+int[] styleable MenuGroup { 0x10101e0, 0x101000e, 0x10100d0, 0x10101de, 0x10101df, 0x1010194 }
+int styleable MenuGroup_android_checkableBehavior 0
+int styleable MenuGroup_android_enabled 1
+int styleable MenuGroup_android_id 2
+int styleable MenuGroup_android_menuCategory 3
+int styleable MenuGroup_android_orderInCategory 4
+int styleable MenuGroup_android_visible 5
+int[] styleable MenuItem { 0x7f04000e, 0x7f040020, 0x7f040021, 0x7f04002c, 0x10101e3, 0x10101e5, 0x1010106, 0x101000e, 0x1010002, 0x10100d0, 0x10101de, 0x10101e4, 0x101026f, 0x10101df, 0x10101e1, 0x10101e2, 0x1010194, 0x7f04005b, 0x7f04008d, 0x7f04008e, 0x7f0400b2, 0x7f0400e4, 0x7f04011e }
+int styleable MenuItem_actionLayout 0
+int styleable MenuItem_actionProviderClass 1
+int styleable MenuItem_actionViewClass 2
+int styleable MenuItem_alphabeticModifiers 3
+int styleable MenuItem_android_alphabeticShortcut 4
+int styleable MenuItem_android_checkable 5
+int styleable MenuItem_android_checked 6
+int styleable MenuItem_android_enabled 7
+int styleable MenuItem_android_icon 8
+int styleable MenuItem_android_id 9
+int styleable MenuItem_android_menuCategory 10
+int styleable MenuItem_android_numericShortcut 11
+int styleable MenuItem_android_onClick 12
+int styleable MenuItem_android_orderInCategory 13
+int styleable MenuItem_android_title 14
+int styleable MenuItem_android_titleCondensed 15
+int styleable MenuItem_android_visible 16
+int styleable MenuItem_contentDescription 17
+int styleable MenuItem_iconTint 18
+int styleable MenuItem_iconTintMode 19
+int styleable MenuItem_numericModifiers 20
+int styleable MenuItem_showAsAction 21
+int styleable MenuItem_tooltipText 22
+int[] styleable MenuView { 0x101012f, 0x101012d, 0x1010130, 0x1010131, 0x101012c, 0x101012e, 0x10100ae, 0x7f0400c1, 0x7f0400f0 }
+int styleable MenuView_android_headerBackground 0
+int styleable MenuView_android_horizontalDivider 1
+int styleable MenuView_android_itemBackground 2
+int styleable MenuView_android_itemIconDisabledAlpha 3
+int styleable MenuView_android_itemTextAppearance 4
+int styleable MenuView_android_verticalDivider 5
+int styleable MenuView_android_windowAnimationStyle 6
+int styleable MenuView_preserveIconSpacing 7
+int styleable MenuView_subMenuArrow 8
+int[] styleable PopupWindow { 0x10102c9, 0x1010176, 0x7f0400b3 }
+int styleable PopupWindow_android_popupAnimationStyle 0
+int styleable PopupWindow_android_popupBackground 1
+int styleable PopupWindow_overlapAnchor 2
+int[] styleable PopupWindowBackgroundState { 0x7f0400ee }
+int styleable PopupWindowBackgroundState_state_above_anchor 0
+int[] styleable RecycleListView { 0x7f0400b5, 0x7f0400b8 }
+int styleable RecycleListView_paddingBottomNoButtons 0
+int styleable RecycleListView_paddingTopNoTitle 1
+int[] styleable SearchView { 0x10100da, 0x1010264, 0x1010220, 0x101011f, 0x7f04004b, 0x7f04005a, 0x7f040065, 0x7f040087, 0x7f04008f, 0x7f040097, 0x7f0400c8, 0x7f0400c9, 0x7f0400de, 0x7f0400df, 0x7f0400f1, 0x7f0400f6, 0x7f040125 }
+int styleable SearchView_android_focusable 0
+int styleable SearchView_android_imeOptions 1
+int styleable SearchView_android_inputType 2
+int styleable SearchView_android_maxWidth 3
+int styleable SearchView_closeIcon 4
+int styleable SearchView_commitIcon 5
+int styleable SearchView_defaultQueryHint 6
+int styleable SearchView_goIcon 7
+int styleable SearchView_iconifiedByDefault 8
+int styleable SearchView_layout 9
+int styleable SearchView_queryBackground 10
+int styleable SearchView_queryHint 11
+int styleable SearchView_searchHintIcon 12
+int styleable SearchView_searchIcon 13
+int styleable SearchView_submitBackground 14
+int styleable SearchView_suggestionRowLayout 15
+int styleable SearchView_voiceIcon 16
+int[] styleable SimpleDraweeView { 0x7f040023, 0x7f040024, 0x7f040025, 0x7f040036, 0x7f040077, 0x7f040078, 0x7f040079, 0x7f0400b4, 0x7f0400bc, 0x7f0400bd, 0x7f0400c2, 0x7f0400c3, 0x7f0400c4, 0x7f0400c5, 0x7f0400ce, 0x7f0400cf, 0x7f0400d0, 0x7f0400d1, 0x7f0400d2, 0x7f0400d3, 0x7f0400d4, 0x7f0400d5, 0x7f0400d6, 0x7f0400d7, 0x7f0400d8, 0x7f0400d9, 0x7f0400da, 0x7f0400db, 0x7f0400dc, 0x7f0400dd, 0x7f040123 }
+int styleable SimpleDraweeView_actualImageResource 0
+int styleable SimpleDraweeView_actualImageScaleType 1
+int styleable SimpleDraweeView_actualImageUri 2
+int styleable SimpleDraweeView_backgroundImage 3
+int styleable SimpleDraweeView_fadeDuration 4
+int styleable SimpleDraweeView_failureImage 5
+int styleable SimpleDraweeView_failureImageScaleType 6
+int styleable SimpleDraweeView_overlayImage 7
+int styleable SimpleDraweeView_placeholderImage 8
+int styleable SimpleDraweeView_placeholderImageScaleType 9
+int styleable SimpleDraweeView_pressedStateOverlayImage 10
+int styleable SimpleDraweeView_progressBarAutoRotateInterval 11
+int styleable SimpleDraweeView_progressBarImage 12
+int styleable SimpleDraweeView_progressBarImageScaleType 13
+int styleable SimpleDraweeView_retryImage 14
+int styleable SimpleDraweeView_retryImageScaleType 15
+int styleable SimpleDraweeView_roundAsCircle 16
+int styleable SimpleDraweeView_roundBottomEnd 17
+int styleable SimpleDraweeView_roundBottomLeft 18
+int styleable SimpleDraweeView_roundBottomRight 19
+int styleable SimpleDraweeView_roundBottomStart 20
+int styleable SimpleDraweeView_roundTopEnd 21
+int styleable SimpleDraweeView_roundTopLeft 22
+int styleable SimpleDraweeView_roundTopRight 23
+int styleable SimpleDraweeView_roundTopStart 24
+int styleable SimpleDraweeView_roundWithOverlayColor 25
+int styleable SimpleDraweeView_roundedCornerRadius 26
+int styleable SimpleDraweeView_roundingBorderColor 27
+int styleable SimpleDraweeView_roundingBorderPadding 28
+int styleable SimpleDraweeView_roundingBorderWidth 29
+int styleable SimpleDraweeView_viewAspectRatio 30
+int[] styleable Spinner { 0x1010262, 0x10100b2, 0x1010176, 0x101017b, 0x7f0400bf }
+int styleable Spinner_android_dropDownWidth 0
+int styleable Spinner_android_entries 1
+int styleable Spinner_android_popupBackground 2
+int styleable Spinner_android_prompt 3
+int styleable Spinner_popupTheme 4
+int[] styleable StateListDrawable { 0x1010196, 0x101011c, 0x101030c, 0x101030d, 0x1010195, 0x1010194 }
+int styleable StateListDrawable_android_constantSize 0
+int styleable StateListDrawable_android_dither 1
+int styleable StateListDrawable_android_enterFadeDuration 2
+int styleable StateListDrawable_android_exitFadeDuration 3
+int styleable StateListDrawable_android_variablePadding 4
+int styleable StateListDrawable_android_visible 5
+int[] styleable StateListDrawableItem { 0x1010199 }
+int styleable StateListDrawableItem_android_drawable 0
+int[] styleable SwitchCompat { 0x1010125, 0x1010124, 0x1010142, 0x7f0400e6, 0x7f0400ec, 0x7f0400f7, 0x7f0400f8, 0x7f0400fa, 0x7f040108, 0x7f040109, 0x7f04010a, 0x7f04011f, 0x7f040120, 0x7f040121 }
+int styleable SwitchCompat_android_textOff 0
+int styleable SwitchCompat_android_textOn 1
+int styleable SwitchCompat_android_thumb 2
+int styleable SwitchCompat_showText 3
+int styleable SwitchCompat_splitTrack 4
+int styleable SwitchCompat_switchMinWidth 5
+int styleable SwitchCompat_switchPadding 6
+int styleable SwitchCompat_switchTextAppearance 7
+int styleable SwitchCompat_thumbTextPadding 8
+int styleable SwitchCompat_thumbTint 9
+int styleable SwitchCompat_thumbTintMode 10
+int styleable SwitchCompat_track 11
+int styleable SwitchCompat_trackTint 12
+int styleable SwitchCompat_trackTintMode 13
+int[] styleable TextAppearance { 0x10103ac, 0x1010161, 0x1010162, 0x1010163, 0x1010164, 0x1010098, 0x101009a, 0x101009b, 0x1010095, 0x1010097, 0x1010096, 0x7f04007c, 0x7f0400fb }
+int styleable TextAppearance_android_fontFamily 0
+int styleable TextAppearance_android_shadowColor 1
+int styleable TextAppearance_android_shadowDx 2
+int styleable TextAppearance_android_shadowDy 3
+int styleable TextAppearance_android_shadowRadius 4
+int styleable TextAppearance_android_textColor 5
+int styleable TextAppearance_android_textColorHint 6
+int styleable TextAppearance_android_textColorLink 7
+int styleable TextAppearance_android_textSize 8
+int styleable TextAppearance_android_textStyle 9
+int styleable TextAppearance_android_typeface 10
+int styleable TextAppearance_fontFamily 11
+int styleable TextAppearance_textAllCaps 12
+int[] styleable Toolbar { 0x10100af, 0x1010140, 0x7f040042, 0x7f04004d, 0x7f04004e, 0x7f04005c, 0x7f04005d, 0x7f04005e, 0x7f04005f, 0x7f040060, 0x7f040061, 0x7f0400aa, 0x7f0400ab, 0x7f0400ac, 0x7f0400af, 0x7f0400b0, 0x7f0400bf, 0x7f0400f2, 0x7f0400f3, 0x7f0400f4, 0x7f040110, 0x7f040111, 0x7f040112, 0x7f040113, 0x7f040114, 0x7f040115, 0x7f040116, 0x7f040117, 0x7f040118 }
+int styleable Toolbar_android_gravity 0
+int styleable Toolbar_android_minHeight 1
+int styleable Toolbar_buttonGravity 2
+int styleable Toolbar_collapseContentDescription 3
+int styleable Toolbar_collapseIcon 4
+int styleable Toolbar_contentInsetEnd 5
+int styleable Toolbar_contentInsetEndWithActions 6
+int styleable Toolbar_contentInsetLeft 7
+int styleable Toolbar_contentInsetRight 8
+int styleable Toolbar_contentInsetStart 9
+int styleable Toolbar_contentInsetStartWithNavigation 10
+int styleable Toolbar_logo 11
+int styleable Toolbar_logoDescription 12
+int styleable Toolbar_maxButtonHeight 13
+int styleable Toolbar_navigationContentDescription 14
+int styleable Toolbar_navigationIcon 15
+int styleable Toolbar_popupTheme 16
+int styleable Toolbar_subtitle 17
+int styleable Toolbar_subtitleTextAppearance 18
+int styleable Toolbar_subtitleTextColor 19
+int styleable Toolbar_title 20
+int styleable Toolbar_titleMargin 21
+int styleable Toolbar_titleMarginBottom 22
+int styleable Toolbar_titleMarginEnd 23
+int styleable Toolbar_titleMarginStart 24
+int styleable Toolbar_titleMarginTop 25
+int styleable Toolbar_titleMargins 26
+int styleable Toolbar_titleTextAppearance 27
+int styleable Toolbar_titleTextColor 28
+int[] styleable View { 0x10100da, 0x1010000, 0x7f0400b6, 0x7f0400b7, 0x7f040106 }
+int styleable View_android_focusable 0
+int styleable View_android_theme 1
+int styleable View_paddingEnd 2
+int styleable View_paddingStart 3
+int styleable View_theme 4
+int[] styleable ViewBackgroundHelper { 0x10100d4, 0x7f040039, 0x7f04003a }
+int styleable ViewBackgroundHelper_android_background 0
+int styleable ViewBackgroundHelper_backgroundTint 1
+int styleable ViewBackgroundHelper_backgroundTintMode 2
+int[] styleable ViewStubCompat { 0x10100d0, 0x10100f3, 0x10100f2 }
+int styleable ViewStubCompat_android_id 0
+int styleable ViewStubCompat_android_inflatedId 1
+int styleable ViewStubCompat_android_layout 2
+int xml imagepicker_provider_paths 0x7f180001
+int xml rn_dev_preferences 0x7f180002
diff --git a/node_modules/react-native-image-picker/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/react-native-image-picker/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..02b2ec4
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,55 @@
+-- Merging decision tree log ---
+manifest
+ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+	package
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:4:3-28
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+	android:versionName
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+	android:versionCode
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:2:1-17:12
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+	xmlns:android
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:3:3-61
+application
+ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:6:5-16:19
+provider#com.imagepicker.ImagePickerProvider
+ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:7:7-15:20
+	android:grantUriPermissions
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:11:13-47
+	android:authorities
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:9:13-71
+	android:exported
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:10:13-37
+	android:name
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:8:13-48
+meta-data#android.support.FILE_PROVIDER_PATHS
+ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:12:13-14:70
+	android:resource
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:14:17-67
+	android:name
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml:13:17-67
+uses-sdk
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		ADDED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+		INJECTED from /Users/vinay/code/sf/avni-client/packages/openchs-android/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
diff --git a/node_modules/react-native-image-picker/android/gradle.properties b/node_modules/react-native-image-picker/android/gradle.properties
index 75c33ac..c56bc59 100644
--- a/node_modules/react-native-image-picker/android/gradle.properties
+++ b/node_modules/react-native-image-picker/android/gradle.properties
@@ -1,3 +1,9 @@
-MOCKITO_CORE_VERSION=1.+
-POWERMOCK_VERSION=1.6.2
-FEST_ASSERT_CORE_VERSION=2.0M10
\ No newline at end of file
+POWERMOCK_VERSION=1.6.6
+
+ReactNativeImagePicker_compileSdkVersion=28
+ReactNativeImagePicker_buildToolsVersion=28.0.3
+ReactNativeImagePicker_targetSdkVersion=27
+ReactNativeImagePicker_minSdkVersion=16
+
+android.useAndroidX=true
+android.enableJetifier=true
diff --git a/node_modules/react-native-image-picker/android/gradle/wrapper/gradle-wrapper.properties b/node_modules/react-native-image-picker/android/gradle/wrapper/gradle-wrapper.properties
index 24e7c39..9882be8 100644
--- a/node_modules/react-native-image-picker/android/gradle/wrapper/gradle-wrapper.properties
+++ b/node_modules/react-native-image-picker/android/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Dec 28 10:00:20 PST 2015
+#Mon Jun 24 15:04:47 BST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.4.1-all.zip
diff --git a/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml b/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
index 7cb4360..2209799 100644
--- a/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
+++ b/node_modules/react-native-image-picker/android/src/main/AndroidManifest.xml
@@ -5,13 +5,13 @@
   >
     <application>
       <provider
-            android:name="com.imagepicker.FileProvider"
-            android:authorities="${applicationId}.provider"
+            android:name=".ImagePickerProvider"
+            android:authorities="${applicationId}.imagepickerprovider"
             android:exported="false"
             android:grantUriPermissions="true">
             <meta-data
                 android:name="android.support.FILE_PROVIDER_PATHS"
-                android:resource="@xml/provider_paths" />
+                android:resource="@xml/imagepicker_provider_paths" />
         </provider>
     </application>
 </manifest>
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/FileProvider.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/FileProvider.java
deleted file mode 100644
index 9c706e6..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/FileProvider.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package com.imagepicker;
-
-public class FileProvider extends android.support.v4.content.FileProvider {
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImageMetadata.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImageMetadata.java
new file mode 100644
index 0000000..dcc4806
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImageMetadata.java
@@ -0,0 +1,33 @@
+package com.imagepicker;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+import androidx.exifinterface.media.ExifInterface;
+import java.io.InputStream;
+
+public class ImageMetadata extends Metadata {
+  public ImageMetadata(Uri uri, Context context) {
+    try {
+      InputStream inputStream = context.getContentResolver().openInputStream(uri);
+      ExifInterface exif = new ExifInterface(inputStream);
+      String datetimeTag = exif.getAttribute(ExifInterface.TAG_DATETIME);
+
+      // Extract anymore metadata here...
+      if(datetimeTag != null) this.datetime = getDateTimeInUTC(datetimeTag, "yyyy:MM:dd HH:mm:ss");
+    } catch (Exception e) {
+      // This error does not bubble up to RN as we don't want failed datetime retrieval to prevent selection
+      Log.e("RNIP", "Could not load image metadata: " + e.getMessage());
+    }
+  }
+
+  @Override
+  public String getDateTime() { return datetime; }
+  
+  // At the moment we are not using the ImageMetadata class to get width/height
+  // TODO: to use this class for extracting image width and height in the future
+  @Override
+  public int getWidth() { return 0; }
+  @Override
+  public int getHeight() { return 0; }
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
index b4311eb..a0f633f 100644
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerModule.java
@@ -1,731 +1,219 @@
 package com.imagepicker;
 
-import android.Manifest;
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.Build;
 import android.provider.MediaStore;
-import android.provider.Settings;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.StyleRes;
-import android.support.v4.app.ActivityCompat;
-import android.support.v7.app.AlertDialog;
-import android.text.TextUtils;
-import android.util.Base64;
-import android.util.Patterns;
-import android.webkit.MimeTypeMap;
-import android.content.pm.PackageManager;
-
-import com.facebook.react.ReactActivity;
+
 import com.facebook.react.bridge.ActivityEventListener;
 import com.facebook.react.bridge.Callback;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.ReadableMap;
-import com.imagepicker.media.ImageConfig;
-import com.imagepicker.permissions.PermissionUtils;
-import com.imagepicker.permissions.OnImagePickerPermissionsCallback;
-import com.imagepicker.utils.MediaUtils.ReadExifResult;
-import com.imagepicker.utils.RealPathUtil;
-import com.imagepicker.utils.UI;
-
-import java.io.ByteArrayOutputStream;
+import com.facebook.react.module.annotations.ReactModule;
+
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.lang.ref.WeakReference;
+import java.util.Collections;
 import java.util.List;
 
-import com.facebook.react.modules.core.PermissionListener;
-import com.facebook.react.modules.core.PermissionAwareActivity;
-
-import static com.imagepicker.utils.MediaUtils.*;
-import static com.imagepicker.utils.MediaUtils.createNewFile;
-import static com.imagepicker.utils.MediaUtils.getResizedImage;
-
-public class ImagePickerModule extends ReactContextBaseJavaModule
-        implements ActivityEventListener
-{
-
-  public static final int REQUEST_LAUNCH_IMAGE_CAPTURE    = 13001;
-  public static final int REQUEST_LAUNCH_IMAGE_LIBRARY    = 13002;
-  public static final int REQUEST_LAUNCH_VIDEO_LIBRARY    = 13003;
-  public static final int REQUEST_LAUNCH_VIDEO_CAPTURE    = 13004;
-  public static final int REQUEST_PERMISSIONS_FOR_CAMERA  = 14001;
-  public static final int REQUEST_PERMISSIONS_FOR_LIBRARY = 14002;
-
-  private final ReactApplicationContext reactContext;
-  private final int dialogThemeId;
-
-  protected Callback callback;
-  private ReadableMap options;
-  protected Uri cameraCaptureURI;
-  private Boolean noData = false;
-  private Boolean pickVideo = false;
-  private ImageConfig imageConfig = new ImageConfig(null, null, 0, 0, 100, 0, false);
-
-  @Deprecated
-  private int videoQuality = 1;
-
-  @Deprecated
-  private int videoDurationLimit = 0;
-
-  private ResponseHelper responseHelper = new ResponseHelper();
-  private PermissionListener listener = new PermissionListener()
-  {
-    public boolean onRequestPermissionsResult(final int requestCode,
-                                              @NonNull final String[] permissions,
-                                              @NonNull final int[] grantResults)
-    {
-      boolean permissionsGranted = true;
-      for (int i = 0; i < permissions.length; i++)
-      {
-        final boolean granted = grantResults[i] == PackageManager.PERMISSION_GRANTED;
-        permissionsGranted = permissionsGranted && granted;
-      }
-
-      if (callback == null || options == null)
-      {
-        return false;
-      }
-
-      if (!permissionsGranted)
-      {
-        responseHelper.invokeError(callback, "Permissions weren't granted");
-        return false;
-      }
-
-      switch (requestCode)
-      {
-        case REQUEST_PERMISSIONS_FOR_CAMERA:
-          launchCamera(options, callback);
-          break;
-
-        case REQUEST_PERMISSIONS_FOR_LIBRARY:
-          launchImageLibrary(options, callback);
-          break;
-
-      }
-      return true;
-    }
-  };
-
-  public ImagePickerModule(ReactApplicationContext reactContext,
-                           @StyleRes final int dialogThemeId)
-  {
-    super(reactContext);
-
-    this.dialogThemeId = dialogThemeId;
-    this.reactContext = reactContext;
-    this.reactContext.addActivityEventListener(this);
-  }
-
-  @Override
-  public String getName() {
-    return "ImagePickerManager";
-  }
-
-  @ReactMethod
-  public void showImagePicker(final ReadableMap options, final Callback callback) {
-    Activity currentActivity = getCurrentActivity();
-
-    if (currentActivity == null)
-    {
-      responseHelper.invokeError(callback, "can't find current Activity");
-      return;
-    }
+import static com.imagepicker.Utils.*;
 
-    this.callback = callback;
-    this.options = options;
-    imageConfig = new ImageConfig(null, null, 0, 0, 100, 0, false);
-
-    final AlertDialog dialog = UI.chooseDialog(this, options, new UI.OnAction()
-    {
-      @Override
-      public void onTakePhoto(@NonNull final ImagePickerModule module)
-      {
-        if (module == null)
-        {
-          return;
-        }
-        module.launchCamera();
-      }
-
-      @Override
-      public void onUseLibrary(@NonNull final ImagePickerModule module)
-      {
-        if (module == null)
-        {
-          return;
-        }
-        module.launchImageLibrary();
-      }
-
-      @Override
-      public void onCancel(@NonNull final ImagePickerModule module)
-      {
-        if (module == null)
-        {
-          return;
-        }
-        module.doOnCancel();
-      }
-
-      @Override
-      public void onCustomButton(@NonNull final ImagePickerModule module,
-                                 @NonNull final String action)
-      {
-        if (module == null)
-        {
-          return;
-        }
-        module.invokeCustomButton(action);
-      }
-    });
-    dialog.show();
-  }
-
-  public void doOnCancel()
-  {
-    if (callback != null) {
-      responseHelper.invokeCancel(callback);
-      callback = null;
-    }
-  }
-
-  public void launchCamera()
-  {
-    this.launchCamera(this.options, this.callback);
-  }
-
-  // NOTE: Currently not reentrant / doesn't support concurrent requests
-  @ReactMethod
-  public void launchCamera(final ReadableMap options, final Callback callback)
-  {
-    if (!isCameraAvailable())
-    {
-      responseHelper.invokeError(callback, "Camera not available");
-      return;
-    }
-
-    final Activity currentActivity = getCurrentActivity();
-    if (currentActivity == null)
-    {
-      responseHelper.invokeError(callback, "can't find current Activity");
-      return;
-    }
+@ReactModule(name = ImagePickerModule.NAME)
+public class ImagePickerModule extends ReactContextBaseJavaModule implements ActivityEventListener {
+    static final String NAME = "ImagePickerManager";
 
-    this.callback = callback;
-    this.options = options;
+    // Public to let consuming apps hook into the image picker response
+    public static final int REQUEST_LAUNCH_IMAGE_CAPTURE = 13001;
+    public static final int REQUEST_LAUNCH_VIDEO_CAPTURE = 13002;
+    public static final int REQUEST_LAUNCH_LIBRARY = 13003;
 
-    if (!permissionsCheck(currentActivity, callback, REQUEST_PERMISSIONS_FOR_CAMERA))
-    {
-      return;
-    }
+    private Uri fileUri;
 
-    parseOptions(this.options);
+    final ReactApplicationContext reactContext;
 
-    int requestCode;
-    Intent cameraIntent;
+    Callback callback;
 
-    if (pickVideo)
-    {
-      requestCode = REQUEST_LAUNCH_VIDEO_CAPTURE;
-      cameraIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
-      cameraIntent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, videoQuality);
-      if (videoDurationLimit > 0)
-      {
-        cameraIntent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, videoDurationLimit);
-      }
-    }
-    else
-    {
-      requestCode = REQUEST_LAUNCH_IMAGE_CAPTURE;
-      cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-
-      final File original = createNewFile(reactContext, this.options, false);
-      imageConfig = imageConfig.withOriginalFile(original);
-
-      if (imageConfig.original != null) {
-        cameraCaptureURI = RealPathUtil.compatUriFromFile(reactContext, imageConfig.original);
-      }else {
-        responseHelper.invokeError(callback, "Couldn't get file path for photo");
-        return;
-      }
-      if (cameraCaptureURI == null)
-      {
-        responseHelper.invokeError(callback, "Couldn't get file path for photo");
-        return;
-      }
-      cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, cameraCaptureURI);
-    }
+    Options options;
+    Uri cameraCaptureURI;
 
-    if (cameraIntent.resolveActivity(reactContext.getPackageManager()) == null)
-    {
-      responseHelper.invokeError(callback, "Cannot launch camera");
-      return;
+    public ImagePickerModule(ReactApplicationContext reactContext) {
+        super(reactContext);
+        this.reactContext = reactContext;
+        this.reactContext.addActivityEventListener(this);
     }
 
-    // Workaround for Android bug.
-    // grantUriPermission also needed for KITKAT,
-    // see https://code.google.com/p/android/issues/detail?id=76683
-    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {
-      List<ResolveInfo> resInfoList = reactContext.getPackageManager().queryIntentActivities(cameraIntent, PackageManager.MATCH_DEFAULT_ONLY);
-      for (ResolveInfo resolveInfo : resInfoList) {
-        String packageName = resolveInfo.activityInfo.packageName;
-        reactContext.grantUriPermission(packageName, cameraCaptureURI, Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);
-      }
+    @Override
+    public String getName() {
+        return NAME;
     }
 
-    try
-    {
-      currentActivity.startActivityForResult(cameraIntent, requestCode);
-    }
-    catch (ActivityNotFoundException e)
-    {
-      e.printStackTrace();
-      responseHelper.invokeError(callback, "Cannot launch camera");
-    }
-  }
-
-  public void launchImageLibrary()
-  {
-    this.launchImageLibrary(this.options, this.callback);
-  }
-  // NOTE: Currently not reentrant / doesn't support concurrent requests
-  @ReactMethod
-  public void launchImageLibrary(final ReadableMap options, final Callback callback)
-  {
-    final Activity currentActivity = getCurrentActivity();
-    if (currentActivity == null) {
-      responseHelper.invokeError(callback, "can't find current Activity");
-      return;
-    }
+    @ReactMethod
+    public void launchCamera(final ReadableMap options, final Callback callback) {
+        if (!isCameraAvailable(reactContext)) {
+            callback.invoke(getErrorMap(errCameraUnavailable, null));
+            return;
+        }
 
-    this.callback = callback;
-    this.options = options;
+        final Activity currentActivity = getCurrentActivity();
+        if (currentActivity == null) {
+            callback.invoke(getErrorMap(errOthers, "Activity error"));
+            return;
+        }
 
-    if (!permissionsCheck(currentActivity, callback, REQUEST_PERMISSIONS_FOR_LIBRARY))
-    {
-      return;
-    }
+        if (!isCameraPermissionFulfilled(reactContext, currentActivity)) {
+            callback.invoke(getErrorMap(errOthers, cameraPermissionDescription));
+            return;
+        }
 
-    parseOptions(this.options);
+        this.callback = callback;
+        this.options = new Options(options);
 
-    int requestCode;
-    Intent libraryIntent;
-    if (pickVideo)
-    {
-      requestCode = REQUEST_LAUNCH_VIDEO_LIBRARY;
-      libraryIntent = new Intent(Intent.ACTION_PICK);
-      libraryIntent.setType("video/*");
-    }
-    else
-    {
-      requestCode = REQUEST_LAUNCH_IMAGE_LIBRARY;
-      libraryIntent = new Intent(Intent.ACTION_PICK,
-      MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
-    }
+        if (this.options.saveToPhotos && Build.VERSION.SDK_INT <= Build.VERSION_CODES.P && !hasPermission(currentActivity)) {
+            callback.invoke(getErrorMap(errPermission, null));
+            return;
+        }
 
-    if (libraryIntent.resolveActivity(reactContext.getPackageManager()) == null)
-    {
-      responseHelper.invokeError(callback, "Cannot launch photo library");
-      return;
-    }
+        int requestCode;
+        File file;
+        Intent cameraIntent;
+
+        if (this.options.mediaType.equals(mediaTypeVideo)) {
+            requestCode = REQUEST_LAUNCH_VIDEO_CAPTURE;
+            cameraIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
+            cameraIntent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, this.options.videoQuality);
+            if (this.options.durationLimit > 0) {
+                cameraIntent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, this.options.durationLimit);
+            }
+            file = createFile(reactContext, "mp4");
+            cameraCaptureURI = createUri(file, reactContext);
+        } else {
+            requestCode = REQUEST_LAUNCH_IMAGE_CAPTURE;
+            cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            file = createFile(reactContext, "jpg");
+            cameraCaptureURI = createUri(file, reactContext);
+        }
 
-    try
-    {
-      currentActivity.startActivityForResult(libraryIntent, requestCode);
-    }
-    catch (ActivityNotFoundException e)
-    {
-      e.printStackTrace();
-      responseHelper.invokeError(callback, "Cannot launch photo library");
-    }
-  }
-
-  @Override
-  public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
-    //robustness code
-    if (passResult(requestCode))
-    {
-      return;
-    }
+        if (this.options.useFrontCamera) {
+            setFrontCamera(cameraIntent);
+        }
 
-    responseHelper.cleanResponse();
+        fileUri = Uri.fromFile(file);
+        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, cameraCaptureURI);
+        cameraIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
 
-    // user cancel
-    if (resultCode != Activity.RESULT_OK)
-    {
-      removeUselessFiles(requestCode, imageConfig);
-      responseHelper.invokeCancel(callback);
-      callback = null;
-      return;
+        try {
+            currentActivity.startActivityForResult(cameraIntent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            callback.invoke(getErrorMap(errOthers, e.getMessage()));
+            this.callback = null;
+        }
     }
 
-    Uri uri = null;
-    switch (requestCode)
-    {
-      case REQUEST_LAUNCH_IMAGE_CAPTURE:
-        uri = cameraCaptureURI;
-        break;
-
-      case REQUEST_LAUNCH_IMAGE_LIBRARY:
-        uri = data.getData();
-        String realPath = getRealPathFromURI(uri);
-        final boolean isUrl = !TextUtils.isEmpty(realPath) &&
-                Patterns.WEB_URL.matcher(realPath).matches();
-        if (realPath == null || isUrl)
-        {
-          try
-          {
-            File file = createFileFromURI(uri);
-            realPath = file.getAbsolutePath();
-            uri = Uri.fromFile(file);
-          }
-          catch (Exception e)
-          {
-            // image not in cache
-            responseHelper.putString("error", "Could not read photo");
-            responseHelper.putString("uri", uri.toString());
-            responseHelper.invokeResponse(callback);
-            callback = null;
+    @ReactMethod
+    public void launchImageLibrary(final ReadableMap options, final Callback callback) {
+        final Activity currentActivity = getCurrentActivity();
+        if (currentActivity == null) {
+            callback.invoke(getErrorMap(errOthers, "Activity error"));
             return;
-          }
         }
-        imageConfig = imageConfig.withOriginalFile(new File(realPath));
-        break;
-
-      case REQUEST_LAUNCH_VIDEO_LIBRARY:
-        responseHelper.putString("uri", data.getData().toString());
-        responseHelper.putString("path", getRealPathFromURI(data.getData()));
-        responseHelper.invokeResponse(callback);
-        callback = null;
-        return;
-
-      case REQUEST_LAUNCH_VIDEO_CAPTURE:
-        final String path = getRealPathFromURI(data.getData());
-        responseHelper.putString("uri", data.getData().toString());
-        responseHelper.putString("path", path);
-        fileScan(reactContext, path);
-        responseHelper.invokeResponse(callback);
-        callback = null;
-        return;
-    }
 
-    final ReadExifResult result = readExifInterface(responseHelper, imageConfig);
+        this.callback = callback;
+        this.options = new Options(options);
 
-    if (result.error != null)
-    {
-      removeUselessFiles(requestCode, imageConfig);
-      responseHelper.invokeError(callback, result.error.getMessage());
-      callback = null;
-      return;
-    }
+        int requestCode;
+        Intent libraryIntent;
+        requestCode = REQUEST_LAUNCH_LIBRARY;
 
-    BitmapFactory.Options options = new BitmapFactory.Options();
-    options.inJustDecodeBounds = true;
-    BitmapFactory.decodeFile(imageConfig.original.getAbsolutePath(), options);
-    int initialWidth = options.outWidth;
-    int initialHeight = options.outHeight;
-    updatedResultResponse(uri, imageConfig.original.getAbsolutePath());
-
-    // don't create a new file if contraint are respected
-    if (imageConfig.useOriginal(initialWidth, initialHeight, result.currentRotation))
-    {
-      responseHelper.putInt("width", initialWidth);
-      responseHelper.putInt("height", initialHeight);
-      fileScan(reactContext, imageConfig.original.getAbsolutePath());
-    }
-    else
-    {
-      imageConfig = getResizedImage(reactContext, this.options, imageConfig, initialWidth, initialHeight, requestCode);
-      if (imageConfig.resized == null)
-      {
-        removeUselessFiles(requestCode, imageConfig);
-        responseHelper.putString("error", "Can't resize the image");
-      }
-      else
-      {
-        uri = Uri.fromFile(imageConfig.resized);
-        BitmapFactory.decodeFile(imageConfig.resized.getAbsolutePath(), options);
-        responseHelper.putInt("width", options.outWidth);
-        responseHelper.putInt("height", options.outHeight);
-
-        updatedResultResponse(uri, imageConfig.resized.getAbsolutePath());
-        fileScan(reactContext, imageConfig.resized.getAbsolutePath());
-      }
-    }
+        boolean isSingleSelect = this.options.selectionLimit == 1;
+        boolean isPhoto = this.options.mediaType.equals(mediaTypePhoto);
+        boolean isVideo = this.options.mediaType.equals(mediaTypeVideo);
 
-    if (imageConfig.saveToCameraRoll && requestCode == REQUEST_LAUNCH_IMAGE_CAPTURE)
-    {
-      final RolloutPhotoResult rolloutResult = rolloutPhotoFromCamera(imageConfig);
-
-      if (rolloutResult.error == null)
-      {
-        imageConfig = rolloutResult.imageConfig;
-        uri = Uri.fromFile(imageConfig.getActualFile());
-        updatedResultResponse(uri, imageConfig.getActualFile().getAbsolutePath());
-      }
-      else
-      {
-        removeUselessFiles(requestCode, imageConfig);
-        final String errorMessage = new StringBuilder("Error moving image to camera roll: ")
-                .append(rolloutResult.error.getMessage()).toString();
-        responseHelper.putString("error", errorMessage);
-        return;
-      }
-    }
+        if(isSingleSelect && (isPhoto || isVideo)) {
+            libraryIntent = new Intent(Intent.ACTION_PICK);
+        } else {
+            libraryIntent = new Intent(Intent.ACTION_GET_CONTENT);
+            libraryIntent.addCategory(Intent.CATEGORY_OPENABLE);
+        }
 
-    responseHelper.invokeResponse(callback);
-    callback = null;
-    this.options = null;
-  }
-
-  public void invokeCustomButton(@NonNull final String action)
-  {
-    responseHelper.invokeCustomButton(this.callback, action);
-  }
-
-  @Override
-  public void onNewIntent(Intent intent) { }
-
-  public Context getContext()
-  {
-    return getReactApplicationContext();
-  }
-
-  public @StyleRes int getDialogThemeId()
-  {
-    return this.dialogThemeId;
-  }
-
-  public @NonNull Activity getActivity()
-  {
-    return getCurrentActivity();
-  }
-
-
-  private boolean passResult(int requestCode)
-  {
-    return callback == null || (cameraCaptureURI == null && requestCode == REQUEST_LAUNCH_IMAGE_CAPTURE)
-            || (requestCode != REQUEST_LAUNCH_IMAGE_CAPTURE && requestCode != REQUEST_LAUNCH_IMAGE_LIBRARY
-            && requestCode != REQUEST_LAUNCH_VIDEO_LIBRARY && requestCode != REQUEST_LAUNCH_VIDEO_CAPTURE);
-  }
-
-  private void updatedResultResponse(@Nullable final Uri uri,
-                                     @NonNull final String path)
-  {
-    responseHelper.putString("uri", uri.toString());
-    responseHelper.putString("path", path);
-
-    if (!noData) {
-      responseHelper.putString("data", getBase64StringFromFile(path));
-    }
+        if(!isSingleSelect) {
+            libraryIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
+        }
 
-    putExtraFileInfo(path, responseHelper);
-  }
-
-  private boolean permissionsCheck(@NonNull final Activity activity,
-                                   @NonNull final Callback callback,
-                                   @NonNull final int requestCode)
-  {
-    final int writePermission = ActivityCompat
-            .checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE);
-    final int cameraPermission = ActivityCompat
-            .checkSelfPermission(activity, Manifest.permission.CAMERA);
-
-    final boolean permissionsGrated = writePermission == PackageManager.PERMISSION_GRANTED &&
-            cameraPermission == PackageManager.PERMISSION_GRANTED;
-
-    if (!permissionsGrated)
-    {
-      final Boolean dontAskAgain = ActivityCompat.shouldShowRequestPermissionRationale(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE) && ActivityCompat.shouldShowRequestPermissionRationale(activity, Manifest.permission.CAMERA);
-
-      if (dontAskAgain)
-      {
-        final AlertDialog dialog = PermissionUtils
-                .explainingDialog(this, options, new PermissionUtils.OnExplainingPermissionCallback()
-                {
-                  @Override
-                  public void onCancel(WeakReference<ImagePickerModule> moduleInstance,
-                                       DialogInterface dialogInterface)
-                  {
-                    final ImagePickerModule module = moduleInstance.get();
-                    if (module == null)
-                    {
-                      return;
-                    }
-                    module.doOnCancel();
-                  }
-
-                  @Override
-                  public void onReTry(WeakReference<ImagePickerModule> moduleInstance,
-                                      DialogInterface dialogInterface)
-                  {
-                    final ImagePickerModule module = moduleInstance.get();
-                    if (module == null)
-                    {
-                      return;
-                    }
-                    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
-                    Uri uri = Uri.fromParts("package", module.getContext().getPackageName(), null);
-                    intent.setData(uri);
-                    final Activity innerActivity = module.getActivity();
-                    if (innerActivity == null)
-                    {
-                      return;
-                    }
-                    innerActivity.startActivityForResult(intent, 1);
-                  }
-                });
-        if (dialog != null) {
-          dialog.show();
+        if(isPhoto) {
+            libraryIntent.setType("image/*");
+        } else if (isVideo) {
+            libraryIntent.setType("video/*");
+        } else {
+            libraryIntent.setType("*/*");
+            libraryIntent.putExtra(Intent.EXTRA_MIME_TYPES, new String[]{"image/*", "video/*"});
         }
-        return false;
-      }
-      else
-      {
-        String[] PERMISSIONS = {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA};
-        if (activity instanceof ReactActivity)
-        {
-          ((ReactActivity) activity).requestPermissions(PERMISSIONS, requestCode, listener);
+
+        try {
+            currentActivity.startActivityForResult(libraryIntent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            callback.invoke(getErrorMap(errOthers, e.getMessage()));
+            this.callback = null;
         }
-        else if (activity instanceof PermissionAwareActivity) {
-          ((PermissionAwareActivity) activity).requestPermissions(PERMISSIONS, requestCode, listener);
+    }
+
+    void onAssetsObtained(List<Uri> fileUris) {
+        try {
+            callback.invoke(getResponseMap(fileUris, options, reactContext));
+        } catch (RuntimeException exception) {
+            callback.invoke(getErrorMap(errOthers, exception.getMessage()));
+        } finally {
+            callback = null;
         }
-        else if (activity instanceof OnImagePickerPermissionsCallback)
-        {
-          ((OnImagePickerPermissionsCallback) activity).setPermissionListener(listener);
-          ActivityCompat.requestPermissions(activity, PERMISSIONS, requestCode);
+    }
+
+    @Override
+    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
+
+        // onActivityResult is called even when ActivityNotFoundException occurs
+        if (!isValidRequestCode(requestCode) || (this.callback == null)) {
+            return;
         }
-        else
-        {
-          final String errorDescription = new StringBuilder(activity.getClass().getSimpleName())
-                  .append(" must implement ")
-                  .append(OnImagePickerPermissionsCallback.class.getSimpleName())
-                  .append(" or ")
-                  .append(PermissionAwareActivity.class.getSimpleName())
-                  .toString();
-          throw new UnsupportedOperationException(errorDescription);
+
+        if (resultCode != Activity.RESULT_OK) {
+            if (requestCode == REQUEST_LAUNCH_IMAGE_CAPTURE) {
+                deleteFile(fileUri);
+            }
+            try {
+              callback.invoke(getCancelMap());
+              return;
+            } catch (RuntimeException exception) {
+              callback.invoke(getErrorMap(errOthers, exception.getMessage()));
+            } finally {
+              callback = null;
+            }
         }
-        return false;
-      }
-    }
-    return true;
-  }
-
-  private boolean isCameraAvailable() {
-    return reactContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)
-      || reactContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY);
-  }
-
-  private @NonNull String getRealPathFromURI(@NonNull final Uri uri) {
-    return RealPathUtil.getRealPathFromURI(reactContext, uri);
-  }
-
-  /**
-   * Create a file from uri to allow image picking of image in disk cache
-   * (Exemple: facebook image, google image etc..)
-   *
-   * @doc =>
-   * https://github.com/nostra13/Android-Universal-Image-Loader#load--display-task-flow
-   *
-   * @param uri
-   * @return File
-   * @throws Exception
-   */
-  private File createFileFromURI(Uri uri) throws Exception {
-    File file = new File(reactContext.getExternalCacheDir(), "photo-" + uri.getLastPathSegment());
-    InputStream input = reactContext.getContentResolver().openInputStream(uri);
-    OutputStream output = new FileOutputStream(file);
-
-    try {
-      byte[] buffer = new byte[4 * 1024];
-      int read;
-      while ((read = input.read(buffer)) != -1) {
-        output.write(buffer, 0, read);
-      }
-      output.flush();
-    } finally {
-      output.close();
-      input.close();
-    }
 
-    return file;
-  }
+        switch (requestCode) {
+            case REQUEST_LAUNCH_IMAGE_CAPTURE:
+                if (options.saveToPhotos) {
+                    saveToPublicDirectory(cameraCaptureURI, reactContext, "photo");
+                }
 
-  private String getBase64StringFromFile(String absoluteFilePath) {
-    InputStream inputStream = null;
-    try {
-      inputStream = new FileInputStream(new File(absoluteFilePath));
-    } catch (FileNotFoundException e) {
-      e.printStackTrace();
-    }
+                onAssetsObtained(Collections.singletonList(fileUri));
+                break;
 
-    byte[] bytes;
-    byte[] buffer = new byte[8192];
-    int bytesRead;
-    ByteArrayOutputStream output = new ByteArrayOutputStream();
-    try {
-      while ((bytesRead = inputStream.read(buffer)) != -1) {
-        output.write(buffer, 0, bytesRead);
-      }
-    } catch (IOException e) {
-      e.printStackTrace();
-    }
-    bytes = output.toByteArray();
-    return Base64.encodeToString(bytes, Base64.NO_WRAP);
-  }
-
-  private void putExtraFileInfo(@NonNull final String path,
-                                @NonNull final ResponseHelper responseHelper)
-  {
-    // size && filename
-    try {
-      File f = new File(path);
-      responseHelper.putDouble("fileSize", f.length());
-      responseHelper.putString("fileName", f.getName());
-    } catch (Exception e) {
-      e.printStackTrace();
-    }
+            case REQUEST_LAUNCH_LIBRARY:
+                onAssetsObtained(collectUrisFromData(data));
+                break;
 
-    // type
-    String extension = MimeTypeMap.getFileExtensionFromUrl(path);
-    if (extension != null) {
-      responseHelper.putString("type", MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension));
-    }
-  }
+            case REQUEST_LAUNCH_VIDEO_CAPTURE:
+                if (options.saveToPhotos) {
+                    saveToPublicDirectory(cameraCaptureURI, reactContext, "video");
+                }
 
-  private void parseOptions(final ReadableMap options) {
-    noData = false;
-    if (options.hasKey("noData")) {
-      noData = options.getBoolean("noData");
-    }
-    imageConfig = imageConfig.updateFromOptions(options);
-    pickVideo = false;
-    if (options.hasKey("mediaType") && options.getString("mediaType").equals("video")) {
-      pickVideo = true;
-    }
-    videoQuality = 1;
-    if (options.hasKey("videoQuality") && options.getString("videoQuality").equals("low")) {
-      videoQuality = 0;
-    }
-    videoDurationLimit = 0;
-    if (options.hasKey("durationLimit")) {
-      videoDurationLimit = options.getInt("durationLimit");
+                onAssetsObtained(Collections.singletonList(fileUri));
+                break;
+        }
     }
-  }
+
+    @Override
+    public void onNewIntent(Intent intent) { }
 }
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerPackage.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerPackage.java
index 7114345..8867547 100644
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerPackage.java
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerPackage.java
@@ -1,43 +1,26 @@
 package com.imagepicker;
 
-import android.support.annotation.StyleRes;
-
 import com.facebook.react.ReactPackage;
-import com.facebook.react.bridge.JavaScriptModule;
 import com.facebook.react.bridge.NativeModule;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.uimanager.ViewManager;
 
-import java.util.Arrays;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
 public class ImagePickerPackage implements ReactPackage {
-  public static final int DEFAULT_EXPLAINING_PERMISSION_DIALIOG_THEME = R.style.DefaultExplainingPermissionsTheme;
-  private @StyleRes final int dialogThemeId;
-
-  public ImagePickerPackage()
-  {
-    this.dialogThemeId = DEFAULT_EXPLAINING_PERMISSION_DIALIOG_THEME;
-  }
-
-  public ImagePickerPackage(@StyleRes final int dialogThemeId)
-  {
-    this.dialogThemeId = dialogThemeId;
-  }
 
-  @Override
-  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
-    return Arrays.<NativeModule>asList(new ImagePickerModule(reactContext, dialogThemeId));
-  }
+    @Override
+    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
+        List<NativeModule> modules = new ArrayList<>();
+        modules.add(new ImagePickerModule(reactContext));
 
-  // Deprecated RN 0.47
-  public List<Class<? extends JavaScriptModule>> createJSModules() {
-    return Collections.emptyList();
-  }
+        return  modules;
+    }
 
-  @Override
-  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
-    return Collections.emptyList();
-  }
+    @Override
+    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
+        return Collections.emptyList();
+    }
 }
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerProvider.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerProvider.java
new file mode 100644
index 0000000..32b5a86
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ImagePickerProvider.java
@@ -0,0 +1,8 @@
+package com.imagepicker;
+
+import androidx.core.content.FileProvider;
+
+// Two FileProvider class with same name will conflict during manifest merger, so we create a class which inherits from FileProvider with different name.
+// This prevents conflict if library users already have used the default FileProvider class.
+public class ImagePickerProvider extends FileProvider {
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Metadata.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Metadata.java
new file mode 100644
index 0000000..65f5895
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Metadata.java
@@ -0,0 +1,44 @@
+package com.imagepicker;
+
+import android.util.Log;
+
+import androidx.annotation.Nullable;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+
+abstract class Metadata {
+  protected String datetime;
+  protected int height;
+  protected int width;
+
+  abstract public String getDateTime();
+  abstract public int getWidth();
+  abstract public int getHeight();
+
+  /**
+   * Converts a timestamp to a UTC timestamp
+   *
+   * @param value - timestamp
+   * @param format - input format
+   * @return formatted timestamp
+   */
+  protected @Nullable
+  String getDateTimeInUTC(String value, String format) {
+    try {
+      Date datetime = new SimpleDateFormat(format, Locale.US).parse(value);
+      SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
+
+      if (datetime != null) {
+        return formatter.format(datetime);
+      }
+
+      return null;
+    } catch (Exception e) {
+      // This error does not bubble up to RN as we don't want failed datetime parsing to prevent selection
+      Log.e("RNIP", "Could not parse image datetime to UTC: " + e.getMessage());
+      return null;
+    }
+  }
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Options.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Options.java
new file mode 100644
index 0000000..40de8b2
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Options.java
@@ -0,0 +1,41 @@
+package com.imagepicker;
+
+import com.facebook.react.bridge.ReadableMap;
+import android.text.TextUtils;
+
+public class Options {
+    int selectionLimit;
+    Boolean includeBase64;
+    Boolean includeExtra;
+    int videoQuality = 1;
+    int quality;
+    int maxWidth;
+    int maxHeight;
+    Boolean saveToPhotos;
+    int durationLimit;
+    Boolean useFrontCamera = false;
+    String mediaType;
+
+
+    Options(ReadableMap options) {
+        mediaType = options.getString("mediaType");
+        selectionLimit = options.getInt("selectionLimit");
+        includeBase64 = options.getBoolean("includeBase64");
+        includeExtra = options.getBoolean("includeExtra");
+
+        String videoQualityString = options.getString("videoQuality");
+        if(!TextUtils.isEmpty(videoQualityString) && !videoQualityString.toLowerCase().equals("high")) {
+            videoQuality = 0;
+        }
+
+        if (options.getString("cameraType").equals("front")) {
+            useFrontCamera = true;
+        }
+
+        quality = (int) (options.getDouble("quality") * 100);
+        maxHeight = options.getInt("maxHeight");
+        maxWidth = options.getInt("maxWidth");
+        saveToPhotos = options.getBoolean("saveToPhotos");
+        durationLimit = options.getInt("durationLimit");
+    }
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ResponseHelper.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ResponseHelper.java
deleted file mode 100644
index 4c7a974..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/ResponseHelper.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.imagepicker;
-
-import android.support.annotation.NonNull;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.Callback;
-import com.facebook.react.bridge.WritableMap;
-
-/**
- * Created by rusfearuth on 24.02.17.
- */
-
-public class ResponseHelper
-{
-    private WritableMap response = Arguments.createMap();
-
-    public void cleanResponse()
-    {
-        response = Arguments.createMap();
-    }
-
-    public @NonNull WritableMap getResponse()
-    {
-        return response;
-    }
-
-    public void putString(@NonNull final String key,
-                          @NonNull final String value)
-    {
-        response.putString(key, value);
-    }
-
-    public void putInt(@NonNull final String key,
-                       final int value)
-    {
-        response.putInt(key, value);
-    }
-
-    public void putBoolean(@NonNull final String key,
-                           final boolean value)
-    {
-        response.putBoolean(key, value);
-    }
-
-    public void putDouble(@NonNull final String key,
-                          final double value)
-    {
-        response.putDouble(key, value);
-    }
-
-    public void invokeCustomButton(@NonNull final Callback callback,
-                                   @NonNull final String action)
-    {
-        cleanResponse();
-        response.putString("customButton", action);
-        invokeResponse(callback);
-    }
-
-    public void invokeCancel(@NonNull final Callback callback)
-    {
-        cleanResponse();
-        response.putBoolean("didCancel", true);
-        invokeResponse(callback);
-    }
-
-    public void invokeError(@NonNull final Callback callback,
-                            @NonNull final String error)
-    {
-        cleanResponse();
-        response.putString("error", error);
-        invokeResponse(callback);
-    }
-
-    public void invokeResponse(@NonNull final Callback callback)
-    {
-        callback.invoke(response);
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Utils.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Utils.java
new file mode 100644
index 0000000..4c5a2a6
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/Utils.java
@@ -0,0 +1,483 @@
+package com.imagepicker;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.ClipData;
+import android.content.ContentResolver;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.hardware.camera2.CameraCharacteristics;
+import android.net.Uri;
+import android.os.Build;
+import android.os.ParcelFileDescriptor;
+import android.provider.MediaStore;
+import android.util.Base64;
+import android.webkit.MimeTypeMap;
+
+import androidx.annotation.Nullable;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.FileProvider;
+import androidx.exifinterface.media.ExifInterface;
+
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.bridge.WritableArray;
+import com.facebook.react.bridge.WritableMap;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.UUID;
+
+import static com.imagepicker.ImagePickerModule.*;
+
+public class Utils {
+    public static String fileNamePrefix = "rn_image_picker_lib_temp_";
+
+    public static String errCameraUnavailable = "camera_unavailable";
+    public static String errPermission = "permission";
+    public static String errOthers = "others";
+
+    public static String mediaTypePhoto = "photo";
+    public static String mediaTypeVideo = "video";
+
+    public static String cameraPermissionDescription = "This library does not require Manifest.permission.CAMERA, if you add this permission in manifest then you have to obtain the same.";
+
+    public static File createFile(Context reactContext, String fileType) {
+        try {
+            String filename = fileNamePrefix  + UUID.randomUUID() + "." + fileType;
+
+            // getCacheDir will auto-clean according to android docs
+            File fileDir = reactContext.getCacheDir();
+
+            File file = new File(fileDir, filename);
+            file.createNewFile();
+            return file;
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+
+    public static Uri createUri(File file, Context reactContext) {
+        String authority = reactContext.getApplicationContext().getPackageName() + ".imagepickerprovider";
+        return FileProvider.getUriForFile(reactContext, authority, file);
+    }
+
+    public static void saveToPublicDirectory(Uri uri, Context context, String mediaType) {
+        ContentResolver resolver = context.getContentResolver();
+        Uri mediaStoreUri;
+        ContentValues fileDetails = new ContentValues();
+
+        if (mediaType.equals("video")) {
+            fileDetails.put(MediaStore.Video.Media.DISPLAY_NAME, UUID.randomUUID().toString());
+            fileDetails.put(MediaStore.Video.Media.MIME_TYPE, resolver.getType(uri));
+            mediaStoreUri = resolver.insert(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, fileDetails);
+        } else {
+            fileDetails.put(MediaStore.Images.Media.DISPLAY_NAME, UUID.randomUUID().toString());
+            fileDetails.put(MediaStore.Images.Media.MIME_TYPE, resolver.getType(uri));
+            mediaStoreUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, fileDetails);
+        }
+
+        copyUri(uri, mediaStoreUri, resolver);
+    }
+
+    public static void copyUri(Uri fromUri, Uri toUri, ContentResolver resolver) {
+        try {
+            OutputStream os = resolver.openOutputStream(toUri);
+            InputStream is = resolver.openInputStream(fromUri);
+
+            byte[] buffer = new byte[8192];
+            int bytesRead;
+
+            while ((bytesRead = is.read(buffer)) != -1) {
+                os.write(buffer, 0, bytesRead);
+            }
+
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    // Make a copy of shared storage files inside app specific storage so that users can access it later.
+    public static Uri getAppSpecificStorageUri(Uri sharedStorageUri, Context context) {
+        if (sharedStorageUri == null) {
+            return null;
+        }
+        ContentResolver contentResolver = context.getContentResolver();
+        String fileType = getFileTypeFromMime(contentResolver.getType(sharedStorageUri));
+        Uri toUri =  Uri.fromFile(createFile(context, fileType));
+        copyUri(sharedStorageUri, toUri, contentResolver);
+        return toUri;
+    }
+
+    public static boolean isCameraAvailable(Context reactContext) {
+        return reactContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)
+                || reactContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_ANY);
+    }
+
+    // Opening front camera is not officially supported in android, the below hack is obtained from various online sources
+    public static void setFrontCamera(Intent intent) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
+            intent.putExtra("android.intent.extras.CAMERA_FACING", CameraCharacteristics.LENS_FACING_FRONT);
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true);
+            }
+        } else {
+            intent.putExtra("android.intent.extras.CAMERA_FACING", 1);
+        }
+    }
+
+    public static int[] getImageDimensions(Uri uri, Context reactContext) {
+        InputStream inputStream;
+        try {
+            inputStream = reactContext.getContentResolver().openInputStream(uri);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+            return new int[]{0, 0};
+        }
+
+        BitmapFactory.Options options = new BitmapFactory.Options();
+        options.inJustDecodeBounds = true;
+        BitmapFactory.decodeStream(inputStream,null, options);
+        return new int[]{options.outWidth, options.outHeight};
+    }
+
+    static boolean hasPermission(final Activity activity) {
+        final int writePermission = ActivityCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        return writePermission == PackageManager.PERMISSION_GRANTED ? true : false;
+    }
+
+    static String getBase64String(Uri uri, Context reactContext) {
+        InputStream inputStream;
+        try {
+            inputStream = reactContext.getContentResolver().openInputStream(uri);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+            return null;
+        }
+
+        byte[] bytes;
+        byte[] buffer = new byte[8192];
+        int bytesRead;
+        ByteArrayOutputStream output = new ByteArrayOutputStream();
+        try {
+            while ((bytesRead = inputStream.read(buffer)) != -1) {
+                output.write(buffer, 0, bytesRead);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        bytes = output.toByteArray();
+        return Base64.encodeToString(bytes, Base64.NO_WRAP);
+    }
+
+    // Resize image
+    // When decoding a jpg to bitmap all exif meta data will be lost, so make sure to copy orientation exif to new file else image might have wrong orientations
+    public static Uri resizeImage(Uri uri, Context context, Options options) {
+        try {
+            int[] origDimens = getImageDimensions(uri, context);
+
+            if (!shouldResizeImage(origDimens[0], origDimens[1], options)) {
+                return uri;
+            }
+
+            int[] newDimens = getImageDimensBasedOnConstraints(origDimens[0], origDimens[1], options);
+
+            InputStream imageStream = context.getContentResolver().openInputStream(uri);
+            String mimeType =  getMimeTypeFromFileUri(uri);
+            Bitmap b = BitmapFactory.decodeStream(imageStream);
+            b = Bitmap.createScaledBitmap(b, newDimens[0], newDimens[1], true);
+            String originalOrientation = getOrientation(uri, context);
+
+            File file = createFile(context, getFileTypeFromMime(mimeType));
+            OutputStream os = context.getContentResolver().openOutputStream(Uri.fromFile(file));
+            b.compress(getBitmapCompressFormat(mimeType), options.quality, os);
+            setOrientation(file, originalOrientation, context);
+
+            deleteFile(uri);
+
+            return Uri.fromFile(file);
+
+        } catch (Exception e) {
+            e.printStackTrace();
+            return uri; // cannot resize the image, return the original uri
+        }
+    }
+
+    static String getOrientation(Uri uri, Context context) throws IOException {
+        ExifInterface exifInterface = new ExifInterface(context.getContentResolver().openInputStream(uri));
+        return exifInterface.getAttribute(ExifInterface.TAG_ORIENTATION);
+    }
+
+    // ExifInterface.saveAttributes is costly operation so don't set exif for unnecessary orientations
+    static void setOrientation(File file, String orientation, Context context) throws IOException {
+        if (orientation.equals(String.valueOf(ExifInterface.ORIENTATION_NORMAL)) || orientation.equals(String.valueOf(ExifInterface.ORIENTATION_UNDEFINED))) {
+            return;
+        }
+        ExifInterface exifInterface = new ExifInterface(file);
+        exifInterface.setAttribute(ExifInterface.TAG_ORIENTATION, orientation);
+        exifInterface.saveAttributes();
+    }
+
+    static int[] getImageDimensBasedOnConstraints(int origWidth, int origHeight, Options options) {
+        int width = origWidth;
+        int height = origHeight;
+
+        if (options.maxWidth == 0 || options.maxHeight == 0) {
+            return new int[]{width, height};
+        }
+
+        if (options.maxWidth < width) {
+            height = (int) (((float) options.maxWidth / width) * height);
+            width = options.maxWidth;
+        }
+
+        if (options.maxHeight < height) {
+            width = (int) (((float) options.maxHeight / height) * width);
+            height = options.maxHeight;
+        }
+
+        return new int[]{width, height};
+    }
+
+    static double getFileSize(Uri uri, Context context) {
+        try {
+            ParcelFileDescriptor f = context.getContentResolver().openFileDescriptor(uri, "r");
+            return f.getStatSize();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return 0;
+        }
+    }
+
+    static boolean shouldResizeImage(int origWidth, int origHeight, Options options) {
+        if ((options.maxWidth == 0 || options.maxHeight == 0) && options.quality == 100) {
+            return false;
+        }
+
+        if (options.maxWidth >= origWidth && options.maxHeight >= origHeight && options.quality == 100) {
+            return false;
+        }
+
+        return true;
+    }
+
+    static Bitmap.CompressFormat getBitmapCompressFormat(String mimeType) {
+        switch (mimeType) {
+            case "image/jpeg": return Bitmap.CompressFormat.JPEG;
+            case "image/png": return Bitmap.CompressFormat.PNG;
+        }
+        return Bitmap.CompressFormat.JPEG;
+    }
+
+    static String getFileTypeFromMime(String mimeType) {
+        if (mimeType == null) {
+            return "jpg";
+        }
+        switch (mimeType) {
+            case "image/jpeg": return "jpg";
+            case "image/png": return "png";
+            case "image/gif": return "gif";
+        }
+        return "jpg";
+    }
+
+    static void deleteFile(Uri uri) {
+        new File(uri.getPath()).delete();
+    }
+
+    static String getMimeTypeFromFileUri(Uri uri) {
+        return MimeTypeMap.getSingleton().getMimeTypeFromExtension(MimeTypeMap.getFileExtensionFromUrl(uri.toString()));
+    }
+
+    // Since library users can have many modules in their project, we should respond to onActivityResult only for our request.
+    static boolean isValidRequestCode(int requestCode) {
+        switch (requestCode) {
+            case REQUEST_LAUNCH_IMAGE_CAPTURE:
+            case REQUEST_LAUNCH_VIDEO_CAPTURE:
+            case REQUEST_LAUNCH_LIBRARY: return true;
+            default: return false;
+        }
+    }
+
+    // This library does not require Manifest.permission.CAMERA permission, but if user app declares as using this permission which is not granted, then attempting to use ACTION_IMAGE_CAPTURE|ACTION_VIDEO_CAPTURE will result in a SecurityException.
+    // https://issuetracker.google.com/issues/37063818
+    public static boolean isCameraPermissionFulfilled(Context context, Activity activity) {
+        try {
+             String[] declaredPermissions = context.getPackageManager()
+                     .getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS)
+                     .requestedPermissions;
+
+             if (declaredPermissions == null) {
+                 return true;
+             }
+
+            if (Arrays.asList(declaredPermissions).contains(Manifest.permission.CAMERA)
+                    && ActivityCompat.checkSelfPermission(activity, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
+                return false;
+            }
+
+            return true;
+
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            return true;
+        }
+    }
+
+    static boolean isImageType(Uri uri, Context context) {
+      return Utils.isContentType("image/", uri, context);
+    }
+
+    static boolean isVideoType(Uri uri, Context context) {
+        return Utils.isContentType("video/", uri, context);
+    }
+
+  /**
+   * Verifies the content typs of a file URI. A helper function
+   * for isVideoType and isImageType
+   *
+   * @param contentMimeType - "video/" or "image/"
+   * @param uri - file uri
+   * @param context - react context
+   * @return a boolean to determine if file is of specified content type i.e. image or video
+   */
+    static boolean isContentType(String contentMimeType, Uri uri, Context context) {
+      final String mimeType = getMimeType(uri, context);
+
+      if(mimeType != null) {
+        return mimeType.contains(contentMimeType);
+      }
+
+      return false;
+    }
+
+    static @Nullable String getMimeType(Uri uri, Context context) {
+      if (uri.getScheme().equals("file")) {
+        return getMimeTypeFromFileUri(uri);
+      }
+
+      ContentResolver contentResolver = context.getContentResolver();
+      return contentResolver.getType(uri);
+    }
+
+    static List<Uri> collectUrisFromData(Intent data) {
+        // Default Gallery app on older Android versions doesn't support multiple image
+        // picking and thus never uses clip data.
+        if (data.getClipData() == null) {
+            return Collections.singletonList(data.getData());
+        }
+
+        ClipData clipData = data.getClipData();
+        List<Uri> fileUris = new ArrayList<>(clipData.getItemCount());
+
+        for (int i = 0; i < clipData.getItemCount(); ++i) {
+            fileUris.add(clipData.getItemAt(i).getUri());
+        }
+
+        return fileUris;
+    }
+
+    static ReadableMap getImageResponseMap(Uri uri, Options options, Context context) {
+        String fileName = uri.getLastPathSegment();
+        ImageMetadata imageMetadata = new ImageMetadata(uri, context);
+        int[] dimensions = getImageDimensions(uri, context);
+
+        WritableMap map = Arguments.createMap();
+        map.putString("uri", uri.toString());
+        map.putDouble("fileSize", getFileSize(uri, context));
+        map.putString("fileName", fileName);
+        map.putString("type", getMimeTypeFromFileUri(uri));
+        map.putInt("width", dimensions[0]);
+        map.putInt("height", dimensions[1]);
+        map.putString("type", getMimeType(uri, context));
+
+        if (options.includeBase64) {
+            map.putString("base64", getBase64String(uri, context));
+        }
+
+        if(options.includeExtra) {
+          // Add more extra data here ...
+          map.putString("timestamp", imageMetadata.getDateTime());
+          map.putString("id", fileName);
+        }
+
+        return map;
+    }
+
+    static ReadableMap getVideoResponseMap(Uri uri, Options options, Context context) {
+        String fileName = uri.getLastPathSegment();
+        WritableMap map = Arguments.createMap();
+        VideoMetadata videoMetadata = new VideoMetadata(uri, context);
+
+        map.putString("uri", uri.toString());
+        map.putDouble("fileSize", getFileSize(uri, context));
+        map.putInt("duration", videoMetadata.getDuration());
+        map.putInt("bitrate", videoMetadata.getBitrate());
+        map.putString("fileName", fileName);
+        map.putString("type", getMimeType(uri, context));
+        map.putInt("width", videoMetadata.getWidth());
+        map.putInt("height", videoMetadata.getHeight());
+
+        if(options.includeExtra) {
+          // Add more extra data here ...
+          map.putString("timestamp", videoMetadata.getDateTime());
+          map.putString("id", fileName);
+        }
+
+        return map;
+    }
+
+    static ReadableMap getResponseMap(List<Uri> fileUris, Options options, Context context) throws RuntimeException {
+        WritableArray assets = Arguments.createArray();
+
+        for(int i = 0; i < fileUris.size(); ++i) {
+            Uri uri = fileUris.get(i);
+
+            if (isImageType(uri, context)) {
+                if (uri.getScheme().contains("content")) {
+                    uri = getAppSpecificStorageUri(uri, context);
+                }
+                uri = resizeImage(uri, context, options);
+                assets.pushMap(getImageResponseMap(uri, options, context));
+            } else if (isVideoType(uri, context)) {
+                assets.pushMap(getVideoResponseMap(uri, options, context));
+            } else {
+                throw new RuntimeException("Unsupported file type");
+            }
+        }
+
+        WritableMap response = Arguments.createMap();
+        response.putArray("assets", assets);
+
+        return response;
+    }
+
+    static ReadableMap getErrorMap(String errCode, String errMsg) {
+        WritableMap map = Arguments.createMap();
+        map.putString("errorCode", errCode);
+        if (errMsg != null) {
+            map.putString("errorMessage", errMsg);
+        }
+        return map;
+    }
+
+    static ReadableMap getCancelMap() {
+        WritableMap map = Arguments.createMap();
+        map.putBoolean("didCancel", true);
+        return map;
+    }
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/VideoMetadata.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/VideoMetadata.java
new file mode 100644
index 0000000..bc06761
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/VideoMetadata.java
@@ -0,0 +1,76 @@
+package com.imagepicker;
+
+import static java.lang.Integer.parseInt;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.media.MediaMetadataRetriever;
+import android.net.Uri;
+import android.util.Log;
+
+import androidx.annotation.Nullable;
+
+import java.io.FileDescriptor;
+import java.io.FileInputStream;
+import java.io.IOException;
+
+public class VideoMetadata extends Metadata {
+  private int duration;
+  private int bitrate;
+
+  public VideoMetadata(Uri uri, Context context) {
+    MediaMetadataRetriever metadataRetriever = new MediaMetadataRetriever();
+    metadataRetriever.setDataSource(context, uri);
+    Bitmap bitmap = getBitmap(uri, context, metadataRetriever);
+
+    String duration = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
+    String bitrate = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BITRATE);
+    String datetime = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DATE);
+
+    // Extract anymore metadata here...
+    if(duration != null) this.duration = Math.round(Float.parseFloat(duration)) / 1000;
+    if(bitrate != null) this.bitrate = parseInt(bitrate);
+
+    if(datetime != null) {
+      // METADATA_KEY_DATE gives us the following format: "20211214T102646.000Z"
+      // This format is very hard to parse, so we convert it to "20211214 102646" ("yyyyMMdd HHmmss")
+      String datetimeToFormat = datetime.substring(0, datetime.indexOf(".")).replace("T", " ");
+      this.datetime = getDateTimeInUTC(datetimeToFormat, "yyyyMMdd HHmmss");
+    }
+
+    if(bitmap != null) {
+      this.width = bitmap.getWidth();
+      this.height = bitmap.getHeight();
+    }
+
+    metadataRetriever.release();
+  }
+
+  public int getBitrate() {
+    return bitrate;
+  }
+  public int getDuration() {
+    return duration;
+  }
+  @Override
+  public String getDateTime() { return datetime; }
+  @Override
+  public int getWidth() { return width; }
+  @Override
+  public int getHeight() { return height; }
+
+  private @Nullable
+  Bitmap getBitmap(Uri uri, Context context, MediaMetadataRetriever retriever) {
+    try {
+      FileDescriptor fileDescriptor = context.getContentResolver().openFileDescriptor(uri, "r").getFileDescriptor();
+      FileInputStream inputStream = new FileInputStream(fileDescriptor);
+      retriever.setDataSource(inputStream.getFD());
+      return retriever.getFrameAtTime();
+    } catch (IOException | RuntimeException e) {
+      // These errors do not bubble up to RN as we don't want failed width/height retrieval to prevent selection.
+      Log.e("RNIP", "Could not retrieve width and height from video: " + e.getMessage());
+    }
+
+    return null;
+  }
+}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/ImageConfig.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/ImageConfig.java
deleted file mode 100644
index 71258ff..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/ImageConfig.java
+++ /dev/null
@@ -1,162 +0,0 @@
-package com.imagepicker.media;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.webkit.MimeTypeMap;
-
-import com.facebook.react.bridge.ReadableMap;
-
-import java.io.File;
-
-/**
- * Created by rusfearuth on 15.03.17.
- */
-
-public class ImageConfig
-{
-    public @Nullable final File original;
-    public @Nullable final File resized;
-    public final int maxWidth;
-    public final int maxHeight;
-    public final int quality;
-    public final int rotation;
-    public final boolean saveToCameraRoll;
-
-    public ImageConfig(@Nullable final File original,
-                       @Nullable final File resized,
-                       final int maxWidth,
-                       final int maxHeight,
-                       final int quality,
-                       final int rotation,
-                       final boolean saveToCameraRoll)
-    {
-        this.original = original;
-        this.resized = resized;
-        this.maxWidth = maxWidth;
-        this.maxHeight = maxHeight;
-        this.quality = quality;
-        this.rotation = rotation;
-        this.saveToCameraRoll = saveToCameraRoll;
-    }
-
-    public @NonNull ImageConfig withMaxWidth(final int maxWidth)
-    {
-        return new ImageConfig(
-                this.original, this.resized, maxWidth,
-                this.maxHeight, this.quality, this.rotation,
-                this.saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig withMaxHeight(final int maxHeight)
-    {
-        return new ImageConfig(
-                this.original, this.resized, this.maxWidth,
-                maxHeight, this.quality, this.rotation,
-                this.saveToCameraRoll
-        );
-
-    }
-
-    public @NonNull ImageConfig withQuality(final int quality)
-    {
-        return new ImageConfig(
-                this.original, this.resized, this.maxWidth,
-                this.maxHeight, quality, this.rotation,
-                this.saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig withRotation(final int rotation)
-    {
-        return new ImageConfig(
-                this.original, this.resized, this.maxWidth,
-                this.maxHeight, this.quality, rotation,
-                this.saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig withOriginalFile(@Nullable final File original)
-    {
-        if (original != null) {
-            //if it is a GIF file, always set quality to 100 to prevent compression
-            String extension = MimeTypeMap.getFileExtensionFromUrl(original.getAbsolutePath());
-            int quality = this.quality;
-            if(extension.contains("gif")){
-                quality = 100;
-            }
-        }
-
-        return new ImageConfig(
-                original, this.resized, this.maxWidth,
-                this.maxHeight, quality, this.rotation,
-                this.saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig withResizedFile(@Nullable final File resized)
-    {
-        return new ImageConfig(
-                this.original, resized, this.maxWidth,
-                this.maxHeight, this.quality, this.rotation,
-                this.saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig withSaveToCameraRoll(@Nullable final boolean saveToCameraRoll)
-    {
-        return new ImageConfig(
-                this.original, this.resized, this.maxWidth,
-                this.maxHeight, this.quality, this.rotation,
-                saveToCameraRoll
-        );
-    }
-
-    public @NonNull ImageConfig updateFromOptions(@NonNull final ReadableMap options)
-    {
-        int maxWidth = 0;
-        if (options.hasKey("maxWidth"))
-        {
-            maxWidth = (int) options.getDouble("maxWidth");
-        }
-        int maxHeight = 0;
-        if (options.hasKey("maxHeight"))
-        {
-            maxHeight = (int) options.getDouble("maxHeight");
-        }
-        int quality = 100;
-        if (options.hasKey("quality"))
-        {
-            quality = (int) (options.getDouble("quality") * 100);
-        }
-        int rotation = 0;
-        if (options.hasKey("rotation"))
-        {
-            rotation = (int) options.getDouble("rotation");
-        }
-        boolean saveToCameraRoll = false;
-        if (options.hasKey("storageOptions"))
-        {
-            final ReadableMap storageOptions = options.getMap("storageOptions");
-            if (storageOptions.hasKey("cameraRoll"))
-            {
-                saveToCameraRoll = storageOptions.getBoolean("cameraRoll");
-            }
-        }
-        return new ImageConfig(this.original, this.resized, maxWidth, maxHeight, quality, rotation, saveToCameraRoll);
-    }
-
-    public boolean useOriginal(int initialWidth,
-                               int initialHeight,
-                               int currentRotation)
-    {
-        return ((initialWidth < maxWidth && maxWidth > 0) || maxWidth == 0) &&
-                ((initialHeight < maxHeight && maxHeight > 0) || maxHeight == 0) &&
-                quality == 100 && (rotation == 0 || currentRotation == rotation);
-    }
-
-    public File getActualFile()
-    {
-        return resized != null ? resized: original;
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/VideoConfig.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/VideoConfig.java
deleted file mode 100644
index 22145bb..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/media/VideoConfig.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.imagepicker.media;
-
-/**
- * Created by rusfearuth on 16.03.17.
- */
-
-public class VideoConfig
-{
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/OnImagePickerPermissionsCallback.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/OnImagePickerPermissionsCallback.java
deleted file mode 100644
index 4068288..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/OnImagePickerPermissionsCallback.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.imagepicker.permissions;
-
-import android.support.annotation.NonNull;
-import com.facebook.react.modules.core.PermissionListener;
-
-/**
- * Created by rusfearuth on 25.02.17.
- */
-public interface OnImagePickerPermissionsCallback
-{
-    void setPermissionListener(@NonNull PermissionListener listener);
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionUtils.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionUtils.java
deleted file mode 100644
index cb62cbf..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionUtils.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.imagepicker.permissions;
-
-import android.app.Activity;
-import android.content.DialogInterface;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AlertDialog;
-
-import com.facebook.react.bridge.ReadableMap;
-import com.facebook.react.bridge.ReadableNativeMap;
-import com.imagepicker.ImagePickerModule;
-import com.imagepicker.R;
-
-import java.lang.ref.WeakReference;
-import java.util.HashMap;
-
-/**
- * Created by rusfearuth on 03.03.17.
- */
-
-public class PermissionUtils
-{
-    public static @Nullable AlertDialog explainingDialog(@NonNull final ImagePickerModule module,
-                                                         @NonNull final ReadableMap options,
-                                                         @NonNull final OnExplainingPermissionCallback callback)
-    {
-        if (module.getContext() == null)
-        {
-            return null;
-        }
-        if (!options.hasKey("permissionDenied"))
-        {
-            return null;
-        }
-        final ReadableMap permissionDenied = options.getMap("permissionDenied");
-        if (((ReadableNativeMap) permissionDenied).toHashMap().size()  == 0)
-        {
-            return null;
-        }
-
-        final String title = permissionDenied.getString("title");
-        final String text = permissionDenied.getString("text");
-        final String btnReTryTitle = permissionDenied.getString("reTryTitle");
-        final String btnOkTitle = permissionDenied.getString("okTitle");
-        final WeakReference<ImagePickerModule> reference = new WeakReference<>(module);
-
-        final Activity activity = module.getActivity();
-
-        if (activity == null)
-        {
-            return null;
-        }
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(activity, module.getDialogThemeId());
-        builder
-                .setTitle(title)
-                .setMessage(text)
-                .setCancelable(false)
-                .setNegativeButton(btnOkTitle, new DialogInterface.OnClickListener()
-                {
-                    @Override
-                    public void onClick(final DialogInterface dialogInterface,
-                                        int i)
-                    {
-                        callback.onCancel(reference, dialogInterface);
-                    }
-                })
-                .setPositiveButton(btnReTryTitle, new DialogInterface.OnClickListener()
-                {
-                    @Override
-                    public void onClick(DialogInterface dialogInterface,
-                                        int i)
-                    {
-                        callback.onReTry(reference, dialogInterface);
-                    }
-                });
-
-        return builder.create();
-    }
-
-    public interface OnExplainingPermissionCallback {
-        void onCancel(WeakReference<ImagePickerModule> moduleInstance, DialogInterface dialogInterface);
-        void onReTry(WeakReference<ImagePickerModule> moduleInstance, DialogInterface dialogInterface);
-    }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionsHelper.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionsHelper.java
deleted file mode 100644
index 2d89834..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/permissions/PermissionsHelper.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.imagepicker.permissions;
-
-import android.support.annotation.NonNull;
-
-/**
- * Created by rusfearuth on 03.03.17.
- */
-
-public class PermissionsHelper
-{
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ButtonsHelper.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ButtonsHelper.java
deleted file mode 100644
index d8ad306..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ButtonsHelper.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.imagepicker.utils;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.facebook.react.bridge.ReadableArray;
-import com.facebook.react.bridge.ReadableMap;
-
-import java.util.LinkedList;
-import java.util.List;
-
-
-/**
- * Created by rusfearuth on 20.02.17.
- */
-
-public class ButtonsHelper
-{
-    public static class Item
-    {
-        public final String title;
-        public final String action;
-
-        public Item(@NonNull final String title,
-                    @NonNull final String action)
-        {
-            this.title = title;
-            this.action = action;
-        }
-    }
-
-    public final @Nullable Item btnCamera;
-    public final @Nullable Item btnLibrary;
-    public final @Nullable Item btnCancel;
-    public final List<Item> customButtons;
-
-    public ButtonsHelper(@Nullable final Item btnCamera,
-                         @Nullable final Item btnLibrary,
-                         @Nullable final Item btnCancel,
-                         @NonNull final LinkedList<Item> customButtons)
-    {
-        this.btnCamera = btnCamera;
-        this.btnLibrary = btnLibrary;
-        this.btnCancel = btnCancel;
-        this.customButtons = customButtons;
-    }
-
-    public List<String> getTitles()
-    {
-        List<String> result = new LinkedList<>();
-
-        if (btnCamera != null)
-        {
-            result.add(btnCamera.title);
-        }
-
-        if (btnLibrary != null)
-        {
-            result.add(btnLibrary.title);
-        }
-
-        for (int i = 0; i < customButtons.size(); i++)
-        {
-            result.add(customButtons.get(i).title);
-        }
-
-        return result;
-    }
-
-    public List<String> getActions()
-    {
-        List<String> result = new LinkedList<>();
-
-        if (btnCamera != null)
-        {
-            result.add(btnCamera.action);
-        }
-
-        if (btnLibrary != null)
-        {
-            result.add(btnLibrary.action);
-        }
-
-        for (int i = 0; i < customButtons.size(); i++)
-        {
-            result.add(customButtons.get(i).action);
-        }
-
-        return result;
-    }
-
-    public static ButtonsHelper newInstance(@NonNull final ReadableMap options)
-    {
-        Item btnCamera = getItemFromOption(options, "takePhotoButtonTitle", "photo");
-        Item btnLibrary = getItemFromOption(options, "chooseFromLibraryButtonTitle", "library");
-        Item btnCancel = getItemFromOption(options, "cancelButtonTitle", "cancel");
-        LinkedList<Item> customButtons = getCustomButtons(options);
-
-        return new ButtonsHelper(btnCamera, btnLibrary, btnCancel, customButtons);
-    }
-
-    private static @Nullable Item getItemFromOption(@NonNull final ReadableMap options,
-                                                    @NonNull final String key,
-                                                    @NonNull final String action)
-    {
-        if (!ReadableMapUtils.hasAndNotEmptyString(options, key))
-        {
-            return null;
-        }
-
-        final String title = options.getString(key);
-
-        return new Item(title, action);
-    }
-
-    private static @NonNull LinkedList<Item> getCustomButtons(@NonNull final ReadableMap options)
-    {
-        LinkedList<Item> result = new LinkedList<>();
-        if (!options.hasKey("customButtons"))
-        {
-            return result;
-        }
-
-        final ReadableArray customButtons = options.getArray("customButtons");
-        for (int i = 0; i < customButtons.size(); i++)
-        {
-            final ReadableMap button = customButtons.getMap(i);
-            final String title = button.getString("title");
-            final String action = button.getString("name");
-            result.add(new Item(title, action));
-        }
-
-        return result;
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java
deleted file mode 100644
index 2eedf7f..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java
+++ /dev/null
@@ -1,392 +0,0 @@
-package com.imagepicker.utils;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Matrix;
-import android.media.ExifInterface;
-import android.media.MediaScannerConnection;
-import android.net.Uri;
-import android.os.Environment;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.facebook.react.bridge.ReadableMap;
-import com.imagepicker.ImagePickerModule;
-import com.imagepicker.ResponseHelper;
-import com.imagepicker.media.ImageConfig;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.nio.channels.FileChannel;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.TimeZone;
-import java.util.UUID;
-
-import static com.imagepicker.ImagePickerModule.REQUEST_LAUNCH_IMAGE_CAPTURE;
-
-/**
- * Created by rusfearuth on 15.03.17.
- */
-
-public class MediaUtils
-{
-    public static @Nullable File createNewFile(@NonNull final Context reactContext,
-                                               @NonNull final ReadableMap options,
-                                               @NonNull final boolean forceLocal)
-    {
-        final String filename = new StringBuilder("image-")
-                .append(UUID.randomUUID().toString())
-                .append(".jpg")
-                .toString();
-
-        final File path = ReadableMapUtils.hasAndNotNullReadableMap(options, "storageOptions")
-                && ReadableMapUtils.hasAndNotEmptyString(options.getMap("storageOptions"), "path")
-                ? new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), options.getMap("storageOptions").getString("path"))
-                : (!forceLocal ? Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)
-                              : reactContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES));
-
-        File result = new File(path, filename);
-
-        try
-        {
-            path.mkdirs();
-            result.createNewFile();
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-            result = null;
-        }
-
-        return result;
-    }
-
-    /**
-     * Create a resized image to fulfill the maxWidth/maxHeight, quality and rotation values
-     *
-     * @param context
-     * @param options
-     * @param imageConfig
-     * @param initialWidth
-     * @param initialHeight
-     * @return updated ImageConfig
-     */
-    public static @NonNull ImageConfig getResizedImage(@NonNull final Context context,
-                                                       @NonNull final ReadableMap options,
-                                                       @NonNull final ImageConfig imageConfig,
-                                                       int initialWidth,
-                                                       int initialHeight,
-                                                       final int requestCode)
-    {
-        BitmapFactory.Options imageOptions = new BitmapFactory.Options();
-        imageOptions.inScaled = false;
-        imageOptions.inSampleSize = 1;
-
-        if (imageConfig.maxWidth != 0 || imageConfig.maxHeight != 0) {
-            while ((imageConfig.maxWidth == 0 || initialWidth > 2 * imageConfig.maxWidth) &&
-                   (imageConfig.maxHeight == 0 || initialHeight > 2 * imageConfig.maxHeight)) {
-                imageOptions.inSampleSize *= 2;
-                initialHeight /= 2;
-                initialWidth /= 2;
-            }
-        }
-
-        Bitmap photo = BitmapFactory.decodeFile(imageConfig.original.getAbsolutePath(), imageOptions);
-
-        if (photo == null)
-        {
-            return null;
-        }
-
-        ImageConfig result = imageConfig;
-
-        Bitmap scaledPhoto = null;
-        if (imageConfig.maxWidth == 0 || imageConfig.maxWidth > initialWidth)
-        {
-            result = result.withMaxWidth(initialWidth);
-        }
-        if (imageConfig.maxHeight == 0 || imageConfig.maxWidth > initialHeight)
-        {
-            result = result.withMaxHeight(initialHeight);
-        }
-
-        double widthRatio = (double) result.maxWidth / initialWidth;
-        double heightRatio = (double) result.maxHeight / initialHeight;
-
-        double ratio = (widthRatio < heightRatio)
-                ? widthRatio
-                : heightRatio;
-
-        Matrix matrix = new Matrix();
-        matrix.postRotate(result.rotation);
-        matrix.postScale((float) ratio, (float) ratio);
-
-        ExifInterface exif;
-        try
-        {
-            exif = new ExifInterface(result.original.getAbsolutePath());
-
-            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);
-
-            switch (orientation)
-            {
-                case 6:
-                    matrix.postRotate(90);
-                    break;
-                case 3:
-                    matrix.postRotate(180);
-                    break;
-                case 8:
-                    matrix.postRotate(270);
-                    break;
-            }
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
-
-        scaledPhoto = Bitmap.createBitmap(photo, 0, 0, photo.getWidth(), photo.getHeight(), matrix, true);
-        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-        scaledPhoto.compress(Bitmap.CompressFormat.JPEG, result.quality, bytes);
-
-        final boolean forceLocal = requestCode == REQUEST_LAUNCH_IMAGE_CAPTURE;
-        final File resized = createNewFile(context, options, !forceLocal);
-
-        if (resized == null)
-        {
-            if (photo != null)
-            {
-                photo.recycle();
-                photo = null;
-            }
-            if (scaledPhoto != null)
-            {
-                scaledPhoto.recycle();
-                scaledPhoto = null;
-            }
-            return imageConfig;
-        }
-
-        result = result.withResizedFile(resized);
-
-        try (FileOutputStream fos = new FileOutputStream(result.resized))
-        {
-            bytes.writeTo(fos);
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-        }
-
-        if (photo != null)
-        {
-            photo.recycle();
-            photo = null;
-        }
-        if (scaledPhoto != null)
-        {
-            scaledPhoto.recycle();
-            scaledPhoto = null;
-        }
-        return result;
-    }
-
-    public static void removeUselessFiles(final int requestCode,
-                                          @NonNull final ImageConfig imageConfig)
-    {
-        if (requestCode != ImagePickerModule.REQUEST_LAUNCH_IMAGE_CAPTURE)
-        {
-            return;
-        }
-
-        if (imageConfig.original != null && imageConfig.original.exists())
-        {
-            imageConfig.original.delete();
-        }
-
-        if (imageConfig.resized != null && imageConfig.resized.exists())
-        {
-            imageConfig.resized.delete();
-        }
-    }
-
-    public static void fileScan(@Nullable final Context reactContext,
-                                @NonNull final String path)
-    {
-        if (reactContext == null)
-        {
-            return;
-        }
-        MediaScannerConnection.scanFile(reactContext,
-                new String[] { path }, null,
-                new MediaScannerConnection.OnScanCompletedListener()
-                {
-                    public void onScanCompleted(String path, Uri uri)
-                    {
-                        Log.i("TAG", new StringBuilder("Finished scanning ").append(path).toString());
-                    }
-                });
-    }
-
-    public static ReadExifResult readExifInterface(@NonNull ResponseHelper responseHelper,
-                                                   @NonNull final ImageConfig imageConfig)
-    {
-        ReadExifResult result;
-        int currentRotation = 0;
-
-        try
-        {
-            ExifInterface exif = new ExifInterface(imageConfig.original.getAbsolutePath());
-
-            // extract lat, long, and timestamp and add to the response
-            float[] latlng = new float[2];
-            exif.getLatLong(latlng);
-            float latitude = latlng[0];
-            float longitude = latlng[1];
-            if(latitude != 0f || longitude != 0f)
-            {
-                responseHelper.putDouble("latitude", latitude);
-                responseHelper.putDouble("longitude", longitude);
-            }
-
-            final String timestamp = exif.getAttribute(ExifInterface.TAG_DATETIME);
-            final SimpleDateFormat exifDatetimeFormat = new SimpleDateFormat("yyyy:MM:dd HH:mm:ss");
-
-            final DateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
-            isoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-
-            try
-            {
-                final String isoFormatString = new StringBuilder(isoFormat.format(exifDatetimeFormat.parse(timestamp)))
-                        .append("Z").toString();
-                responseHelper.putString("timestamp", isoFormatString);
-            }
-            catch (Exception e) {}
-
-            int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
-            boolean isVertical = true;
-            switch (orientation) {
-                case ExifInterface.ORIENTATION_ROTATE_270:
-                    isVertical = false;
-                    currentRotation = 270;
-                    break;
-                case ExifInterface.ORIENTATION_ROTATE_90:
-                    isVertical = false;
-                    currentRotation = 90;
-                    break;
-                case ExifInterface.ORIENTATION_ROTATE_180:
-                    currentRotation = 180;
-                    break;
-            }
-            responseHelper.putInt("originalRotation", currentRotation);
-            responseHelper.putBoolean("isVertical", isVertical);
-            result = new ReadExifResult(currentRotation, null);
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-            result = new ReadExifResult(currentRotation, e);
-        }
-
-        return result;
-    }
-
-    public static @Nullable RolloutPhotoResult rolloutPhotoFromCamera(@NonNull final ImageConfig imageConfig)
-    {
-        RolloutPhotoResult result = null;
-        final File oldFile = imageConfig.resized == null ? imageConfig.original: imageConfig.resized;
-        final File newDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);
-        final File newFile = new File(newDir.getPath(), oldFile.getName());
-
-        try
-        {
-            moveFile(oldFile, newFile);
-            ImageConfig newImageConfig;
-            if (imageConfig.resized != null)
-            {
-                newImageConfig = imageConfig.withResizedFile(newFile);
-            }
-            else
-            {
-                newImageConfig = imageConfig.withOriginalFile(newFile);
-            }
-            result = new RolloutPhotoResult(newImageConfig, null);
-        }
-        catch (IOException e)
-        {
-            e.printStackTrace();
-            result = new RolloutPhotoResult(imageConfig, e);
-        }
-        return result;
-    }
-
-    /**
-     * Move a file from one location to another.
-     *
-     * This is done via copy + deletion, because Android will throw an error
-     * if you try to move a file across mount points, e.g. to the SD card.
-     */
-    private static void moveFile(@NonNull final File oldFile,
-                                 @NonNull final File newFile) throws IOException
-    {
-        FileChannel oldChannel = null;
-        FileChannel newChannel = null;
-
-        try
-        {
-            oldChannel = new FileInputStream(oldFile).getChannel();
-            newChannel = new FileOutputStream(newFile).getChannel();
-            oldChannel.transferTo(0, oldChannel.size(), newChannel);
-
-            oldFile.delete();
-        }
-        finally
-        {
-            try
-            {
-                if (oldChannel != null) oldChannel.close();
-                if (newChannel != null) newChannel.close();
-            }
-            catch (IOException e)
-            {
-                e.printStackTrace();
-            }
-        }
-    }
-
-
-    public static class RolloutPhotoResult
-    {
-        public final ImageConfig imageConfig;
-        public final Throwable error;
-
-        public RolloutPhotoResult(@NonNull final ImageConfig imageConfig,
-                                  @Nullable final Throwable error)
-        {
-            this.imageConfig = imageConfig;
-            this.error = error;
-        }
-    }
-
-
-    public static class ReadExifResult
-    {
-        public final int currentRotation;
-        public final Throwable error;
-
-        public ReadExifResult(int currentRotation,
-                              @Nullable final Throwable error)
-        {
-            this.currentRotation = currentRotation;
-            this.error = error;
-        }
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ReadableMapUtils.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ReadableMapUtils.java
deleted file mode 100644
index d53a641..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/ReadableMapUtils.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.imagepicker.utils;
-
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-
-import com.facebook.react.bridge.ReadableMap;
-
-/**
- * Created by rusfearuth on 22.02.17.
- */
-
-public class ReadableMapUtils
-{
-    public static @NonNull boolean hasAndNotEmpty(@NonNull Class clazz,
-                                                  @NonNull final ReadableMap target,
-                                                  @NonNull final String key)
-    {
-        if (!target.hasKey(key))
-        {
-            return false;
-        }
-
-        if (target.isNull(key))
-        {
-            return false;
-        }
-
-        if (String.class.equals(clazz))
-        {
-            final String value = target.getString(key);
-            return !TextUtils.isEmpty(value);
-        }
-
-        return true;
-    }
-
-
-    public static @NonNull boolean hasAndNotNullReadableMap(@NonNull final ReadableMap target,
-                                                            @NonNull final String key)
-    {
-        return hasAndNotEmpty(ReadableMap.class, target, key);
-    }
-
-
-
-    public static @NonNull boolean hasAndNotEmptyString(@NonNull final ReadableMap target,
-                                                        @NonNull final String key)
-    {
-        return hasAndNotEmpty(String.class, target, key);
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/RealPathUtil.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/RealPathUtil.java
deleted file mode 100644
index 45189ce..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/RealPathUtil.java
+++ /dev/null
@@ -1,202 +0,0 @@
-package com.imagepicker.utils;
-
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.DocumentsContract;
-import android.provider.MediaStore;
-import android.content.ContentUris;
-import android.os.Environment;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.content.FileProvider;
-
-import java.io.File;
-
-public class RealPathUtil {
-
-	public static @Nullable Uri compatUriFromFile(@NonNull final Context context,
-												  @NonNull final File file) {
-		Uri result = null;
-		if (Build.VERSION.SDK_INT < 21) {
-			result = Uri.fromFile(file);
-		}
-		else {
-			final String packageName = context.getApplicationContext().getPackageName();
-			final String authority =  new StringBuilder(packageName).append(".provider").toString();
-			try {
-				result = FileProvider.getUriForFile(context, authority, file);
-			}
-			catch(IllegalArgumentException e) {
-				e.printStackTrace();
-			}
-		}
-		return result;
-	}
-
-	@SuppressLint("NewApi")
-	public static @Nullable String getRealPathFromURI(@NonNull final Context context,
-													  @NonNull final Uri uri) {
-
-		final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
-
-		// DocumentProvider
-		if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {
-			// ExternalStorageProvider
-			if (isExternalStorageDocument(uri)) {
-				final String docId = DocumentsContract.getDocumentId(uri);
-				final String[] split = docId.split(":");
-				final String type = split[0];
-
-				if ("primary".equalsIgnoreCase(type)) {
-					return Environment.getExternalStorageDirectory() + "/" + split[1];
-				}
-
-				// TODO handle non-primary volumes
-			}
-			// DownloadsProvider
-			else if (isDownloadsDocument(uri)) {
-
-				final String id = DocumentsContract.getDocumentId(uri);
-				final Uri contentUri = ContentUris.withAppendedId(
-						Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));
-
-				return getDataColumn(context, contentUri, null, null);
-			}
-			// MediaProvider
-			else if (isMediaDocument(uri)) {
-				final String docId = DocumentsContract.getDocumentId(uri);
-				final String[] split = docId.split(":");
-				final String type = split[0];
-
-				Uri contentUri = null;
-				if ("image".equals(type)) {
-					contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
-				} else if ("video".equals(type)) {
-					contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
-				} else if ("audio".equals(type)) {
-					contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
-				}
-
-				final String selection = "_id=?";
-				final String[] selectionArgs = new String[] {
-						split[1]
-				};
-
-				return getDataColumn(context, contentUri, selection, selectionArgs);
-			}
-		}
-		// MediaStore (and general)
-		else if ("content".equalsIgnoreCase(uri.getScheme())) {
-
-			// Return the remote address
-			if (isGooglePhotosUri(uri))
-				return uri.getLastPathSegment();
-
-			if (isFileProviderUri(context, uri))
-				return getFileProviderPath(context, uri);
-
-			return getDataColumn(context, uri, null, null);
-		}
-		// File
-		else if ("file".equalsIgnoreCase(uri.getScheme())) {
-			return uri.getPath();
-		}
-
-		return null;
-	}
-
-	/**
-	 * Get the value of the data column for this Uri. This is useful for
-	 * MediaStore Uris, and other file-based ContentProviders.
-	 *
-	 * @param context The context.
-	 * @param uri The Uri to query.
-	 * @param selection (Optional) Filter used in the query.
-	 * @param selectionArgs (Optional) Selection arguments used in the query.
-	 * @return The value of the _data column, which is typically a file path.
-	 */
-	public static String getDataColumn(Context context, Uri uri, String selection,
-	                                   String[] selectionArgs) {
-
-		Cursor cursor = null;
-		final String column = "_data";
-		final String[] projection = {
-				column
-		};
-
-		try {
-			cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,
-					null);
-			if (cursor != null && cursor.moveToFirst()) {
-				final int index = cursor.getColumnIndexOrThrow(column);
-				return cursor.getString(index);
-			}
-		} finally {
-			if (cursor != null)
-				cursor.close();
-		}
-		return null;
-	}
-
-
-	/**
-	 * @param uri The Uri to check.
-	 * @return Whether the Uri authority is ExternalStorageProvider.
-	 */
-	public static boolean isExternalStorageDocument(Uri uri) {
-		return "com.android.externalstorage.documents".equals(uri.getAuthority());
-	}
-
-	/**
-	 * @param uri The Uri to check.
-	 * @return Whether the Uri authority is DownloadsProvider.
-	 */
-	public static boolean isDownloadsDocument(Uri uri) {
-		return "com.android.providers.downloads.documents".equals(uri.getAuthority());
-	}
-
-	/**
-	 * @param uri The Uri to check.
-	 * @return Whether the Uri authority is MediaProvider.
-	 */
-	public static boolean isMediaDocument(Uri uri) {
-		return "com.android.providers.media.documents".equals(uri.getAuthority());
-	}
-
-	/**
-	 * @param uri The Uri to check.
-	 * @return Whether the Uri authority is Google Photos.
-	 */
-	public static boolean isGooglePhotosUri(@NonNull final Uri uri) {
-		return "com.google.android.apps.photos.content".equals(uri.getAuthority());
-	}
-
-	/**
-	 * @param context The Application context
-	 * @param uri The Uri is checked by functions
-	 * @return Whether the Uri authority is FileProvider
-	 */
-	public static boolean isFileProviderUri(@NonNull final Context context,
-	                                        @NonNull final Uri uri) {
-		final String packageName = context.getPackageName();
-		final String authority = new StringBuilder(packageName).append(".provider").toString();
-		return authority.equals(uri.getAuthority());
-	}
-
-	/**
-	 * @param context The Application context
-	 * @param uri The Uri is checked by functions
-	 * @return File path or null if file is missing
-	 */
-	public static @Nullable String getFileProviderPath(@NonNull final Context context,
-	                                                   @NonNull final Uri uri)
-	{
-		final File appDir = context.getExternalFilesDir(Environment.DIRECTORY_PICTURES);
-		final File file = new File(appDir, uri.getLastPathSegment());
-		return file.exists() ? file.toString(): null;
-	}
-}
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/UI.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/UI.java
deleted file mode 100644
index da0d2df..0000000
--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/UI.java
+++ /dev/null
@@ -1,105 +0,0 @@
-package com.imagepicker.utils;
-
-import android.content.Context;
-import android.content.DialogInterface;
-import android.graphics.drawable.ColorDrawable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AlertDialog;
-import android.widget.ArrayAdapter;
-
-import com.facebook.react.bridge.ReadableMap;
-import com.imagepicker.ImagePickerModule;
-import com.imagepicker.R;
-
-import java.lang.ref.WeakReference;
-import java.util.List;
-
-/**
- * @author Alexander Ustinov
- */
-public class UI
-{
-    public static @NonNull AlertDialog chooseDialog(@Nullable final ImagePickerModule module,
-                                                    @NonNull final ReadableMap options,
-                                                    @Nullable final OnAction callback)
-    {
-        final Context context = module.getActivity();
-        if (context == null)
-        {
-            return null;
-        }
-        final WeakReference<ImagePickerModule> reference = new WeakReference<>(module);
-
-        final ButtonsHelper buttons = ButtonsHelper.newInstance(options);
-        final List<String> titles = buttons.getTitles();
-        final List<String> actions = buttons.getActions();
-        ArrayAdapter<String> adapter = new ArrayAdapter<>(
-                context,
-                R.layout.list_item,
-                titles
-        );
-        AlertDialog.Builder builder = new AlertDialog.Builder(context, module.getDialogThemeId() /*android.R.style.Theme_Holo_Light_Dialog*/);
-        if (ReadableMapUtils.hasAndNotEmptyString(options, "title"))
-        {
-            builder.setTitle(options.getString("title"));
-        }
-
-        builder.setAdapter(adapter, new DialogInterface.OnClickListener() {
-            public void onClick(DialogInterface dialog, int index) {
-                final String action = actions.get(index);
-
-                switch (action) {
-                    case "photo":
-                        callback.onTakePhoto(reference.get());
-                        break;
-
-                    case "library":
-                        callback.onUseLibrary(reference.get());
-                        break;
-
-                    case "cancel":
-                        callback.onCancel(reference.get());
-                        break;
-
-                    default:
-                        callback.onCustomButton(reference.get(), action);
-                }
-            }
-        });
-
-        builder.setNegativeButton(buttons.btnCancel.title, new DialogInterface.OnClickListener()
-        {
-            @Override
-            public void onClick(DialogInterface dialogInterface,
-                                int i)
-            {
-                callback.onCancel(reference.get());
-                dialogInterface.dismiss();
-            }
-        });
-
-        final AlertDialog dialog = builder.create();
-
-        dialog.setOnCancelListener(new DialogInterface.OnCancelListener()
-        {
-            @Override
-            public void onCancel(@NonNull final DialogInterface dialog)
-            {
-                callback.onCancel(reference.get());
-                dialog.dismiss();
-            }
-        });
-
-        //dialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));
-        return dialog;
-    }
-
-    public interface OnAction
-    {
-        void onTakePhoto(@Nullable ImagePickerModule module);
-        void onUseLibrary(@Nullable ImagePickerModule module);
-        void onCancel(@Nullable ImagePickerModule module);
-        void onCustomButton(@Nullable ImagePickerModule module, String action);
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/main/res/layout/list_item.xml b/node_modules/react-native-image-picker/android/src/main/res/layout/list_item.xml
deleted file mode 100644
index 2530f04..0000000
--- a/node_modules/react-native-image-picker/android/src/main/res/layout/list_item.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<TextView
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@android:id/text1"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:textAppearance="?android:attr/textAppearanceMedium"
-    android:textColor="?android:attr/textColorAlertDialogListItem"
-    android:gravity="center_vertical"
-    android:paddingTop="15dp"
-    android:paddingBottom="15dp"
-    android:paddingLeft="25dp"
-    android:paddingRight="25dp"
-    android:ellipsize="marquee"
-    />
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/main/res/values/themes.xml b/node_modules/react-native-image-picker/android/src/main/res/values/themes.xml
deleted file mode 100644
index 6befbd0..0000000
--- a/node_modules/react-native-image-picker/android/src/main/res/values/themes.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <style name="DefaultExplainingPermissionsTheme" parent="Theme.AppCompat.Light.Dialog.Alert">
-        <!-- Used for the buttons -->
-        <item name="colorAccent">#61c3e7</item>
-        <!-- Used for the title and text -->
-        <item name="android:textColorPrimary">#3d3d3d</item>
-        <!-- Used for the background -->
-        <item name="android:background">@android:color/white</item>
-    </style>
-</resources>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/main/res/xml/imagepicker_provider_paths.xml b/node_modules/react-native-image-picker/android/src/main/res/xml/imagepicker_provider_paths.xml
new file mode 100644
index 0000000..ce57598
--- /dev/null
+++ b/node_modules/react-native-image-picker/android/src/main/res/xml/imagepicker_provider_paths.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths>
+  <cache-path name="cacheDir" path="." />
+</paths>
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/main/res/xml/provider_paths.xml b/node_modules/react-native-image-picker/android/src/main/res/xml/provider_paths.xml
deleted file mode 100644
index 36356a0..0000000
--- a/node_modules/react-native-image-picker/android/src/main/res/xml/provider_paths.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<paths xmlns:android="http://schemas.android.com/apk/res/android">
-  <files-path name="shared" path="."/>
-  <external-path name="shared" path="."/>
-  <external-files-path name="shared" path="."/>
-  <root-path name="root" path="."/>
-</paths>
diff --git a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/ImagePickerModuleTest.java b/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/ImagePickerModuleTest.java
deleted file mode 100644
index 3945e1f..0000000
--- a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/ImagePickerModuleTest.java
+++ /dev/null
@@ -1,114 +0,0 @@
-package com.imagepicker.testing;
-
-import android.app.Activity;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.Callback;
-import com.facebook.react.bridge.JavaOnlyArray;
-import com.facebook.react.bridge.JavaOnlyMap;
-import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.common.build.ReactBuildConfig;
-import com.imagepicker.ImagePickerModule;
-import com.imagepicker.R;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
-import org.powermock.modules.junit4.rule.PowerMockRule;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.android.controller.ActivityController;
-import org.robolectric.annotation.Config;
-
-import java.io.File;
-
-import static junit.framework.Assert.assertFalse;
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertTrue;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-/**
- * Created by rusfearuth on 10.04.17.
- */
-
-@RunWith(RobolectricTestRunner.class)
-@SuppressStaticInitializationFor("com.facebook.react.common.build.ReactBuildConfig")
-@PrepareForTest({Arguments.class})
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
-@Config(manifest = Config.NONE)
-public class ImagePickerModuleTest
-{
-    private static final int DEFAULT_THEME = R.style.DefaultExplainingPermissionsTheme;
-
-    @Rule
-    public PowerMockRule rule = new PowerMockRule();
-
-    private ActivityController<Activity> activityController;
-    private Activity activity;
-    private ReactApplicationContext reactContext;
-
-    private TestableImagePickerModule module;
-
-    @Before
-    public void setUp() throws Exception
-    {
-        nativeMock();
-
-        activityController = Robolectric.buildActivity(Activity.class);
-        activity = activityController.create().start().resume().get();
-        reactContext = mock(ReactApplicationContext.class);
-
-        module = new TestableImagePickerModule(reactContext, DEFAULT_THEME);
-        assertNotNull("Module was created", module);
-        when(reactContext.getCurrentActivity()).thenReturn(activity);
-    }
-
-
-
-    @After
-    public void tearDown()
-    {
-        activityController.pause().stop().destroy();
-        activity = null;
-    }
-
-
-    @Test
-    public void testCancelTakingPhoto()
-    {
-        final SampleCallback callback = new SampleCallback();
-        module.setCallback(callback);
-        module.setCameraCaptureUri(Uri.fromFile(new File("")));
-        module.onActivityResult(activity, ImagePickerModule.REQUEST_LAUNCH_IMAGE_CAPTURE, Activity.RESULT_CANCELED, null);
-        assertFalse("Camera's been launched", callback.hasError());
-        assertTrue("User's cancelled of taking a photo", callback.didCancel());
-    }
-
-    private void nativeMock()
-    {
-        PowerMockito.mockStatic(Arguments.class);
-        when(Arguments.createArray()).thenAnswer(new Answer<Object>() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                return new JavaOnlyArray();
-            }
-        });
-        when(Arguments.createMap()).thenAnswer(new Answer<Object>() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                return new JavaOnlyMap();
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/SampleCallback.java b/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/SampleCallback.java
deleted file mode 100644
index ce201e8..0000000
--- a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/SampleCallback.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.imagepicker.testing;
-
-import com.facebook.react.bridge.Callback;
-import com.facebook.react.bridge.JavaOnlyMap;
-
-/**
- * Created by rusfearuth on 10.04.17.
- */
-
-public class SampleCallback implements Callback
-{
-    private boolean hasError;
-    private boolean didCancel;
-
-    @Override
-    public void invoke(Object... args)
-    {
-        System.out.println(args.length);
-        System.out.println(String.valueOf(args[0]));
-        System.out.println(args[0].getClass());
-        for (int i = 0; i < args.length; i++) {
-            if (lookingForError(args[i])) {
-                break;
-            }
-        }
-        for (int i = 0; i < args.length; i++) {
-            if (lookingForCancelation(args[i])) {
-                break;
-            }
-        }
-    }
-
-    public boolean hasError()
-    {
-        return hasError;
-    }
-
-    public boolean didCancel()
-    {
-        return didCancel;
-    }
-
-    private boolean lookingForError(Object arg)
-    {
-        hasError = false;
-        if (arg == null)
-        {
-            return hasError;
-        }
-
-        if (arg instanceof String)
-        {
-            hasError = arg.equals("error") || ((String) arg).contains("error");
-        }
-        else if (arg instanceof JavaOnlyMap)
-        {
-            hasError = ((JavaOnlyMap) arg).hasKey("error");
-        }
-        return hasError;
-    }
-
-    private boolean lookingForCancelation(Object arg)
-    {
-        didCancel = false;
-        if (arg == null)
-        {
-            return didCancel;
-        }
-
-        if (arg instanceof String)
-        {
-            didCancel = arg.equals("didCancel") || ((String) arg).contains("didCancel");
-        }
-        else if (arg instanceof JavaOnlyMap)
-        {
-            didCancel = ((JavaOnlyMap) arg).hasKey("didCancel");
-        }
-        return didCancel;
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/TestableImagePickerModule.java b/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/TestableImagePickerModule.java
deleted file mode 100644
index 264420e..0000000
--- a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/TestableImagePickerModule.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.imagepicker.testing;
-
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.StyleRes;
-
-import com.facebook.react.bridge.Callback;
-import com.facebook.react.bridge.ReactApplicationContext;
-import com.imagepicker.ImagePickerModule;
-import com.imagepicker.ResponseHelper;
-
-import java.lang.reflect.Field;
-
-/**
- * Created by rusfearuth on 10.04.17.
- */
-
-public class TestableImagePickerModule extends ImagePickerModule
-{
-    public TestableImagePickerModule(ReactApplicationContext reactContext,
-                                     @StyleRes int dialogThemeId)
-    {
-        super(reactContext, dialogThemeId);
-    }
-
-    public void setCallback(@NonNull final Callback callback)
-    {
-        this.callback = callback;
-    }
-
-    public void setCameraCaptureUri(@Nullable final Uri uri)
-    {
-        this.cameraCaptureURI = uri;
-    }
-}
diff --git a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/media/ImageConfigTest.java b/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/media/ImageConfigTest.java
deleted file mode 100644
index eef6289..0000000
--- a/node_modules/react-native-image-picker/android/src/test/java/com/imagepicker/testing/media/ImageConfigTest.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package com.imagepicker.testing.media;
-
-import com.facebook.react.bridge.JavaOnlyMap;
-import com.facebook.react.bridge.WritableMap;
-import com.imagepicker.media.ImageConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.File;
-
-import static junit.framework.Assert.assertEquals;
-import static junit.framework.Assert.assertNotNull;
-import static junit.framework.Assert.assertNull;
-import static junit.framework.Assert.assertTrue;
-
-/**
- * Created by rusfearuth on 11.04.17.
- */
-
-@RunWith(RobolectricTestRunner.class)
-public class ImageConfigTest
-{
-    @Test
-    public void testOnImmutable()
-    {
-        ImageConfig original = new ImageConfig(new File("original.txt"), new File("resized.txt"), 0, 0, 0, 0, false);
-        ImageConfig updated = original.withOriginalFile(null);
-
-        assertNotNull("Original has got original file", original.original);
-        assertNull("Updated hasn't got original file", updated.original);
-
-        updated = original.withResizedFile(null);
-
-        assertNotNull("Original has got resized file", original.resized);
-        assertNull("Updated hasn't got resized file", updated.resized);
-
-        updated = original.withMaxWidth(1);
-
-        assertEquals("Original max width", 0, original.maxWidth);
-        assertEquals("Updated max width", 1, updated.maxWidth);
-
-        updated = original.withMaxHeight(2);
-
-        assertEquals("Original max height", 0, original.maxHeight);
-        assertEquals("Updated max height", 2, updated.maxHeight);
-
-        updated = original.withQuality(29);
-
-        assertEquals("Original quality", 0, original.quality);
-        assertEquals("Updated quality", 29, updated.quality);
-
-        updated = original.withRotation(135);
-
-        assertEquals("Original rotation", 0, original.rotation);
-        assertEquals("Updated rotation", 135, updated.rotation);
-
-        updated = original.withSaveToCameraRoll(true);
-
-        assertEquals("Original saveToCameraRoll", false, original.saveToCameraRoll);
-        assertEquals("Updated saveToCameraRoll", true, updated.saveToCameraRoll);
-    }
-
-    @Test
-    public void testParsingOptions()
-    {
-        WritableMap options = defaultOptions();
-        ImageConfig config = new ImageConfig(null, null, 0, 0, 0, 0, false);
-        config = config.updateFromOptions(options);
-        assertEquals("maxWidth", 1000, config.maxWidth);
-        assertEquals("maxHeight", 600, config.maxHeight);
-        assertEquals("quality", 50, config.quality);
-        assertEquals("rotation", 135, config.rotation);
-        assertTrue("storageOptions.cameraRoll", config.saveToCameraRoll);
-    }
-
-    @Test
-    public void testUseOriginal()
-    {
-        ImageConfig config = new ImageConfig(null, null, 800, 600, 100, 90, false);
-
-        assertEquals("Image wont be resized", true, config.useOriginal(100, 100, 90));
-        assertEquals("Image will be resized because of rotation", false, config.useOriginal(100, 100, 80));
-        assertEquals("Image will be resized because of initial width", false, config.useOriginal(1000, 100, 80));
-        assertEquals("Image will be resized because of initial height", false, config.useOriginal(100, 1000, 80));
-
-        ImageConfig qualityIsLow = config.withQuality(90);
-        assertEquals("Image will be resized because of quality is low", false, qualityIsLow.useOriginal(100, 100, 90));
-    }
-
-    @Test
-    public void testGetActualFile()
-    {
-        ImageConfig originalConfig = new ImageConfig(new File("original.txt"), null, 0, 0, 0, 0, false);
-        ImageConfig resizedConfig = originalConfig.withResizedFile(new File("resized.txt"));
-
-        assertEquals("For config which has got only original file", "original.txt", originalConfig.getActualFile().getName());
-        assertEquals("For config which has got resized file too", "resized.txt", resizedConfig.getActualFile().getName());
-    }
-
-    private JavaOnlyMap defaultOptions()
-    {
-        JavaOnlyMap options = new JavaOnlyMap();
-        options.putInt("maxWidth", 1000);
-        options.putInt("maxHeight", 600);
-        options.putDouble("quality", 0.5);
-        options.putInt("rotation", 135);
-
-        JavaOnlyMap storage = new JavaOnlyMap();
-        storage.putBoolean("cameraRoll", true);
-
-        options.putMap("storageOptions", storage);
-
-        return options;
-    }
-}
diff --git a/node_modules/react-native-image-picker/docs/Install.md b/node_modules/react-native-image-picker/docs/Install.md
deleted file mode 100644
index 4ed335d..0000000
--- a/node_modules/react-native-image-picker/docs/Install.md
+++ /dev/null
@@ -1,190 +0,0 @@
-# Install
-
-```
-yarn add react-native-image-picker
-react-native link react-native-image-picker
-```
-
-⚠️ If you need to support React Native < 0.40, you must install this package: `react-native-image-picker@0.24`.
-
-## Post-install Steps
-
-### iOS
-
-For iOS 10+:
-
-Add the `NSPhotoLibraryUsageDescription`, `NSCameraUsageDescription`, `NSPhotoLibraryAddUsageDescription` and `NSMicrophoneUsageDescription` (if allowing video) keys to your `Info.plist` with strings describing why your app needs these permissions.
-
-**Note: You will get a SIGABRT crash if you don't complete this step**
-
-```xml
-<plist version="1.0">
-  <dict>
-    ...
-    <key>NSPhotoLibraryUsageDescription</key>
-    <string>$(PRODUCT_NAME) would like access to your photo gallery</string>
-    <key>NSCameraUsageDescription</key>
-    <string>$(PRODUCT_NAME) would like to use your camera</string>
-    <key>NSPhotoLibraryAddUsageDescription</key>
-    <string>$(PRODUCT_NAME) would like to save photos to your photo gallery</string>
-    <key>NSMicrophoneUsageDescription</key>
-    <string>$(PRODUCT_NAME) would like to your microphone (for videos)</string>
-  </dict>
-</plist>
-```
-
-⚠️ If you are planning on submitting your application to app store:
-
-To be compliant with Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage, the permission request alert should specify how your app will use this feature to help users understand why your app is requesting access to their personal data.
-
-```
-$(PRODUCT_NAME) would like access to your photo gallery to change your profile picture
-```
-
-
-### Android
-
-Add the required permissions in `AndroidManifest.xml`:
-
-```xml
-<uses-permission android:name="android.permission.CAMERA" />
-<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-```
-
-### Android (Optional)
-
-If you've defined _[project-wide properties](https://developer.android.com/studio/build/gradle-tips.html)_ (**recommended**) in your root `build.gradle`, this library will detect the presence of the following properties:
-
-```groovy
-buildscript {...}
-allprojects {...}
-
-/**
-  + Project-wide Gradle configuration properties
-  */
-ext {
-    compileSdkVersion   = 27
-    targetSdkVersion    = 27
-    buildToolsVersion   = "27.0.3"
-}
-```
-
-Customization settings of dialog `android/app/res/values/themes.xml` (`android/app/res/values/style.xml` is a valid path as well):
-
-```xml
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <style name="DefaultExplainingPermissionsTheme" parent="Theme.AppCompat.Light.Dialog.Alert">
-        <!-- Used for the buttons -->
-        <item name="colorAccent">@color/your_color</item>
-
-        <!-- Used for the title and text -->
-        <item name="android:textColorPrimary">@color/your_color</item>
-
-        <!-- Used for the background -->
-        <item name="android:background">@color/your_color</item>
-    </style>
-</resources>
-```
-
-## Manual Installation
-
-### iOS
-
-1. In the XCode's "Project navigator", right click on your project's Libraries folder ➜ `Add Files to <...>`.
-1. Go to `node_modules` ➜ `react-native-image-picker` ➜ `ios` ➜ select `RNImagePicker.xcodeproj`.
-1. Add `libRNImagePicker.a` to `Build Phases -> Link Binary With Libraries`.
-1. Refer to [Post-install Steps](Install.md#post-install-steps).
-1. Compile and have fun.
-
-### Android
-
-1. Add the following lines to `android/settings.gradle`:
-
-   ```gradle
-   include ':react-native-image-picker'
-   project(':react-native-image-picker').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-image-picker/android')
-   ```
-
-2. Update the android build tools version to `2.2.+` in `android/build.gradle`:
-
-   ```gradle
-   buildscript {
-       ...
-       dependencies {
-           classpath 'com.android.tools.build:gradle:2.2.+' // <- USE 2.2.+ version
-       }
-       ...
-   }
-   ...
-   ```
-
-3. Update the gradle version to `2.14.1` in `android/gradle/wrapper/gradle-wrapper.properties`:
-
-   ```
-   ...
-   distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
-   ```
-
-4. Add the compile line to the dependencies in `android/app/build.gradle`:
-
-   ```gradle
-   dependencies {
-       compile project(':react-native-image-picker')
-   }
-   ```
-
-5. Add the import and link the package in `MainApplication.java`:
-
-   ```java
-   import com.imagepicker.ImagePickerPackage; // <-- add this import
-
-   public class MainApplication extends Application implements ReactApplication {
-       @Override
-       protected List<ReactPackage> getPackages() {
-           return Arrays.<ReactPackage>asList(
-               new MainReactPackage(),
-               new ImagePickerPackage(), // <-- add this line
-               // OR if you want to customize dialog style
-               new ImagePickerPackage(R.style.my_dialog_style)
-           );
-       }
-   }
-   ```
-
-6. If `MainActivity` is not instance of `ReactActivity`, you will need to implement `OnImagePickerPermissionsCallback` to `MainActivity`:
-
-   ```java
-   import com.imagepicker.permissions.OnImagePickerPermissionsCallback; // <- add this import
-   import com.facebook.react.modules.core.PermissionListener; // <- add this import
-
-   public class MainActivity extends YourActivity implements OnImagePickerPermissionsCallback {
-     private PermissionListener listener; // <- add this attribute
-
-     // Your methods here
-
-     // Copy from here
-
-     @Override
-     public void setPermissionListener(PermissionListener listener)
-     {
-       this.listener = listener;
-     }
-
-     @Override
-     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults)
-     {
-       if (listener != null)
-       {
-         listener.onRequestPermissionsResult(requestCode, permissions, grantResults);
-       }
-       super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-     }
-
-     // To here
-   }
-   ```
-
-   This code allows to pass result of request permissions to native part.
-
-7. Refer to [Post-install Steps](Install.md#post-install-steps).
diff --git a/node_modules/react-native-image-picker/docs/Reference.md b/node_modules/react-native-image-picker/docs/Reference.md
deleted file mode 100644
index 2c2e0a0..0000000
--- a/node_modules/react-native-image-picker/docs/Reference.md
+++ /dev/null
@@ -1,92 +0,0 @@
-# API Reference
-
-This document lays out the current public properties and methods for the React Native Image Picker.
-
-## Methods
-
-### `showImagePicker()`
-
-```js
-static showImagePicker(options?, callback)
-```
-
-Display the image picker.
-
-See [Options](#options) for further information on `options`.
-
-The `callback` will be called with a response object, refer to [The Response Object](#the-response-object).
-
-### `launchCamera()`
-
-```js
-static launchCamera(options?, callback)
-```
-
-Skip the alert dialog and launch the camera directly.
-
-See [Options](#options) for further information on `options`.
-
-The `callback` will be called with a response object, refer to [The Response Object](#the-response-object).
-
-### `launchImageLibrary()`
-
-```js
-static launchImageLibrary(options?, callback)
-```
-
-Skip the alert dialog and launch the image library directly.
-
-See [Options](#options) for further information on `options`.
-
-The `callback` will be called with a response object, refer to [The Response Object](#the-response-object).
-
-## Options
-
-| option                        | iOS | Android | Info                                                                                                                                                                                                                                                                 |
-| ----------------------------- | --- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
-| title                         | OK  | OK      | Specify `null` or empty string to remove the title                                                                                                                                                                                                                   |
-| cancelButtonTitle             | OK  | OK      | Specify `null` or empty string to remove this button                                                                                                                                                                                                                 |
-| takePhotoButtonTitle          | OK  | OK      | Specify `null` or empty string to remove this button                                                                                                                                                                                                                 |
-| chooseFromLibraryButtonTitle  | OK  | OK      | Specify `null` or empty string to remove this button                                                                                                                                                                                                                 |
-| customButtons                 | OK  | OK      | An array containing objects with the name and title of buttons                                                                                                                                                                                                       |
-| cameraType                    | OK  | -       | 'front' or 'back'                                                                                                                                                                                                                                                    |
-| mediaType                     | OK  | OK      | 'photo', 'video', or 'mixed' on iOS, 'photo' or 'video' on Android                                                                                                                                                                                                   |
-| maxWidth                      | OK  | OK      | Photos only                                                                                                                                                                                                                                                          |
-| maxHeight                     | OK  | OK      | Photos only                                                                                                                                                                                                                                                          |
-| quality                       | OK  | OK      | 0 to 1, photos only                                                                                                                                                                                                                                                  |
-| videoQuality                  | OK  | OK      | 'low', 'medium', or 'high' on iOS, 'low' or 'high' on Android                                                                                                                                                                                                        |
-| durationLimit                 | OK  | OK      | Max video recording time, in seconds                                                                                                                                                                                                                                 |
-| rotation                      | -   | OK      | Photos only, 0 to 360 degrees of rotation                                                                                                                                                                                                                            |
-| allowsEditing                 | OK  | -       | bool - enables built-in iOS functionality to resize the image after selection                                                                                                                                                                                        |
-| noData                        | OK  | OK      | If true, disables the base64 `data` field from being generated (greatly improves performance on large photos)                                                                                                                                                        |
-| storageOptions                | OK  | OK      | If this key is provided, the image will be saved in your app's `Documents` directory on iOS, or your app's `Pictures` directory on Android (rather than a temporary directory)                                                                                       |
-| storageOptions.skipBackup     | OK  | -       | If true, the photo will NOT be backed up to iCloud                                                                                                                                                                                                                   |
-| storageOptions.path           | OK  | OK      | If set, will save the image at `Documents/[path]/` rather than the root `Documents` for iOS, and `Pictures/[path]/` on Android.                                                                                                                                      |
-| storageOptions.cameraRoll     | OK  | OK      | If true, the cropped photo will be saved to the iOS Camera Roll or Android DCIM folder.                                                                                                                                                                              |
-| storageOptions.waitUntilSaved | OK  | -       | If true, will delay the response callback until after the photo/video was saved to the Camera Roll. If the photo or video was just taken, then the file name and timestamp fields are only provided in the response object when this AND `cameraRoll` are both true. |
-| permissionDenied.title        | -   | OK      | Title of explaining permissions dialog. By default `Permission denied`.                                                                                                                                                                                              |
-| permissionDenied.text         | -   | OK      | Message of explaining permissions dialog. By default `To be able to take pictures with your camera and choose images from your library.`.                                                                                                                            |
-| permissionDenied.reTryTitle   | -   | OK      | Title of re-try button. By default `re-try`                                                                                                                                                                                                                          |
-| permissionDenied.okTitle      | -   | OK      | Title of ok button. By default `I'm sure`                                                                                                                                                                                                                            |
-
-## The Response Object
-
-| key              | iOS                    | Android     | Description                                                            |
-| ---------------- | ---------------------- | ----------- | ---------------------------------------------------------------------- |
-| didCancel        | OK                     | OK          | Informs you if the user cancelled the process                          |
-| error            | OK                     | OK          | Contains an error message, if there is one                             |
-| customButton     | OK                     | OK          | If the user tapped one of your custom buttons, contains the name of it |
-| data             | OK                     | OK          | The base64 encoded image data (photos only)                            |
-| uri              | OK                     | OK          | The uri to the local file asset on the device (photo or video)         |
-| origURL          | OK                     | -           | The URL of the original asset in photo library, if it exists           |
-| isVertical       | OK                     | OK          | Will be true if the image is vertically oriented                       |
-| width            | OK                     | OK          | Image dimensions (photos only)                                         |
-| height           | OK                     | OK          | Image dimensions (photos only)                                         |
-| fileSize         | OK                     | OK          | The file size (photos only)                                            |
-| type             | OK                     | OK          | The file type (photos only)                                            |
-| fileName         | OK (photos and videos) | OK (photos) | The file name, if available
-| path             | -                      | OK          | The file path                                                          |
-| latitude         | OK                     | OK          | Latitude metadata, if available                                        |
-| longitude        | OK                     | OK          | Longitude metadata, if available                                       |
-| timestamp        | OK                     | OK          | Timestamp metadata, if available, in ISO8601 UTC format                |
-| originalRotation | -                      | OK          | Rotation degrees (photos only) _See [#109](/../../issues/199)_         |
diff --git a/node_modules/react-native-image-picker/index.d.ts b/node_modules/react-native-image-picker/index.d.ts
deleted file mode 100644
index b75e7e5..0000000
--- a/node_modules/react-native-image-picker/index.d.ts
+++ /dev/null
@@ -1,62 +0,0 @@
-declare module "react-native-image-picker" {
-
-    interface Response {
-        customButton: string;
-        didCancel: boolean;
-        error: string;
-        data: string;
-        uri: string;
-        origURL?: string;
-        isVertical: boolean;
-        width: number;
-        height: number;
-        fileSize: number;
-        type?: string;
-        fileName?: string;
-        path?: string;
-        latitude?: number;
-        longitude?: number;
-        timestamp?: string;
-    }
-
-    interface CustomButtonOptions {
-        name?: string;
-        title?: string;
-    }
-
-    interface Options {
-        title?: string;
-        cancelButtonTitle?: string;
-        takePhotoButtonTitle?: string;
-        chooseFromLibraryButtonTitle?: string;
-        customButtons?: Array<CustomButtonOptions>;
-        cameraType?: 'front' | 'back';
-        mediaType?: 'photo' | 'video' | 'mixed';
-        maxWidth?: number;
-        maxHeight?: number;
-        quality?: number;
-        videoQuality?: 'low' | 'medium' | 'high';
-        durationLimit?: number;
-        rotation?: number;
-        allowsEditing?: boolean;
-        noData?: boolean;
-        storageOptions?: StorageOptions;
-    }
-
-    interface StorageOptions {
-        skipBackup?: boolean;
-        path?: string;
-        cameraRoll?: boolean;
-        waitUntilSaved?: boolean;
-    }
-
-
-    class ImagePicker {
-        static showImagePicker(options: Options, callback: (response: Response) => void): void;
-        static launchCamera(options: Options, callback: (response: Response) => void): void;
-        static launchImageLibrary(options: Options, callback: (response: Response) => void): void;
-    }
-
-    export = ImagePicker;
-
-}
diff --git a/node_modules/react-native-image-picker/index.js b/node_modules/react-native-image-picker/index.js
deleted file mode 100644
index 4aa2bd2..0000000
--- a/node_modules/react-native-image-picker/index.js
+++ /dev/null
@@ -1,33 +0,0 @@
-import { NativeModules } from 'react-native';
-
-const { ImagePickerManager } = NativeModules;
-
-const DEFAULT_OPTIONS = {
-  title: 'Select a Photo',
-  cancelButtonTitle: 'Cancel',
-  takePhotoButtonTitle: 'Take Photo…',
-  chooseFromLibraryButtonTitle: 'Choose from Library…',
-  quality: 1.0,
-  allowsEditing: false,
-  permissionDenied: {
-    title: 'Permission denied',
-    text:
-      'To be able to take pictures with your camera and choose images from your library.',
-    reTryTitle: 're-try',
-    okTitle: "I'm sure",
-  },
-};
-
-module.exports = {
-  ...ImagePickerManager,
-  showImagePicker: function showImagePicker(options, callback) {
-    if (typeof options === 'function') {
-      callback = options;
-      options = {};
-    }
-    return ImagePickerManager.showImagePicker(
-      { ...DEFAULT_OPTIONS, ...options },
-      callback,
-    );
-  },
-};
diff --git a/node_modules/react-native-image-picker/index.js.flow b/node_modules/react-native-image-picker/index.js.flow
deleted file mode 100644
index 0df21bf..0000000
--- a/node_modules/react-native-image-picker/index.js.flow
+++ /dev/null
@@ -1,66 +0,0 @@
-// @flow
-
-export type Response = {
-    customButton: string;
-    didCancel: boolean;
-    error: string;
-    data: string;
-    uri: string;
-    origURL?: string;
-    isVertical: boolean;
-    width: number;
-    height: number;
-    fileSize: number;
-    type?: string;
-    fileName?: string;
-    path?: string;
-    latitude?: number;
-    longitude?: number;
-    timestamp?: string;
-}
-
-export type CustomButtonOptions = {
-    name?: string;
-    title?: string;
-}
-
-export type Options = {
-    title?: string;
-    cancelButtonTitle?: string;
-    takePhotoButtonTitle?: string;
-    chooseFromLibraryButtonTitle?: string;
-    customButtons?: Array<CustomButtonOptions>;
-    cameraType?: 'front' | 'back';
-    mediaType?: 'photo' | 'video' | 'mixed';
-    maxWidth?: number;
-    maxHeight?: number;
-    quality?: number;
-    videoQuality?: 'low' | 'medium' | 'high';
-    durationLimit?: number;
-    rotation?: number;
-    allowsEditing?: boolean;
-    noData?: boolean;
-    storageOptions?: StorageOptions;
-}
-
-export type StorageOptions = {
-    skipBackup?: boolean;
-    path?: string;
-    cameraRoll?: boolean;
-    waitUntilSaved?: boolean;
-}
-
-declare export function showImagePicker(options: ?Options, callback: (response: Response) => any): void;
-declare export function showImagePicker(callback: (response: Response) => any): void;
-
-declare export function launchCamera(options: ?Options, callback: (response: Response) => any): void;
-declare export function launchCamera(callback: (response: Response) => any): void;
-
-declare export function launchImageLibrary(options: ?Options, callback: (response: Response) => any): void;
-declare export function launchImageLibrary(callback: (response: Response) => any): void;
-
-declare export default {
-  showImagePicker(options: ?Options, callback: (response: Response) => any): void,
-  launchCamera(options: ?Options, callback: (response: Response) => any): void,
-  launchImageLibrary(callback: (response: Response) => any): void,
-};
diff --git a/node_modules/react-native-image-picker/ios/ImagePickerManager.h b/node_modules/react-native-image-picker/ios/ImagePickerManager.h
index 541b70f..311f2d2 100644
--- a/node_modules/react-native-image-picker/ios/ImagePickerManager.h
+++ b/node_modules/react-native-image-picker/ios/ImagePickerManager.h
@@ -1,11 +1,31 @@
 #import <React/RCTBridgeModule.h>
 #import <UIKit/UIKit.h>
+#import <React/RCTConvert.h>
 
 typedef NS_ENUM(NSInteger, RNImagePickerTarget) {
-  RNImagePickerTargetCamera = 1,
-  RNImagePickerTargetLibrarySingleImage,
+  camera = 1,
+  library
 };
 
-@interface ImagePickerManager : NSObject <RCTBridgeModule, UINavigationControllerDelegate, UIActionSheetDelegate, UIImagePickerControllerDelegate>
+@implementation RCTConvert(PresentationStyle)
+
+// see: https://developer.apple.com/documentation/uikit/uimodalpresentationstyle?language=objc
+RCT_ENUM_CONVERTER(
+    UIModalPresentationStyle,
+    (@{
+      @"currentContext": @(UIModalPresentationCurrentContext),
+      @"fullScreen": @(UIModalPresentationFullScreen),
+      @"pageSheet": @(UIModalPresentationPageSheet),
+      @"formSheet": @(UIModalPresentationFormSheet),
+      @"popover": @(UIModalPresentationPopover),
+      @"overFullScreen": @(UIModalPresentationOverFullScreen),
+      @"overCurrentContext": @(UIModalPresentationOverCurrentContext)
+    }),
+    UIModalPresentationCurrentContext,
+    integerValue)
+
+@end
+
+@interface ImagePickerManager : NSObject <RCTBridgeModule>
 
 @end
diff --git a/node_modules/react-native-image-picker/ios/ImagePickerManager.m b/node_modules/react-native-image-picker/ios/ImagePickerManager.m
index 28d5870..f311a98 100644
--- a/node_modules/react-native-image-picker/ios/ImagePickerManager.m
+++ b/node_modules/react-native-image-picker/ios/ImagePickerManager.m
@@ -1,549 +1,247 @@
 #import "ImagePickerManager.h"
+#import "ImagePickerUtils.h"
 #import <React/RCTConvert.h>
-#import <AssetsLibrary/AssetsLibrary.h>
 #import <AVFoundation/AVFoundation.h>
 #import <Photos/Photos.h>
-#import <React/RCTUtils.h>
+#import <PhotosUI/PhotosUI.h>
 
 @import MobileCoreServices;
 
 @interface ImagePickerManager ()
 
-@property (nonatomic, strong) UIImagePickerController *picker;
 @property (nonatomic, strong) RCTResponseSenderBlock callback;
-@property (nonatomic, strong) NSDictionary *defaultOptions;
-@property (nonatomic, retain) NSDictionary *options;
-@property (nonatomic, retain) NSMutableDictionary *response;
-@property (nonatomic, strong) NSArray *customButtons;
+@property (nonatomic, copy) NSDictionary *options;
 
 @end
 
+@interface ImagePickerManager (UIImagePickerControllerDelegate) <UINavigationControllerDelegate, UIImagePickerControllerDelegate>
+@end
+
+@interface ImagePickerManager (UIAdaptivePresentationControllerDelegate) <UIAdaptivePresentationControllerDelegate>
+@end
+
+#if __has_include(<PhotosUI/PHPicker.h>)
+@interface ImagePickerManager (PHPickerViewControllerDelegate) <PHPickerViewControllerDelegate>
+@end
+#endif
+
 @implementation ImagePickerManager
 
+NSString *errCameraUnavailable = @"camera_unavailable";
+NSString *errPermission = @"permission";
+NSString *errOthers = @"others";
+RNImagePickerTarget target;
+
+BOOL photoSelected = NO;
+
 RCT_EXPORT_MODULE();
 
 RCT_EXPORT_METHOD(launchCamera:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback)
 {
-    self.callback = callback;
-    [self launchImagePicker:RNImagePickerTargetCamera options:options];
+    target = camera;
+    photoSelected = NO;
+    dispatch_async(dispatch_get_main_queue(), ^{
+        [self launchImagePicker:options callback:callback];
+    });
 }
 
 RCT_EXPORT_METHOD(launchImageLibrary:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback)
 {
-    self.callback = callback;
-    [self launchImagePicker:RNImagePickerTargetLibrarySingleImage options:options];
-}
-
-RCT_EXPORT_METHOD(showImagePicker:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback)
-{
-    self.callback = callback; // Save the callback so we can use it from the delegate methods
-    self.options = options;
-
+    target = library;
+    photoSelected = NO;
     dispatch_async(dispatch_get_main_queue(), ^{
-
-        NSString *title = [self.options valueForKey:@"title"];
-        if ([title isEqual:[NSNull null]] || title.length == 0) {
-            title = nil; // A more visually appealing UIAlertControl is displayed with a nil title rather than title = @""
-        }
-        NSString *cancelTitle = [self.options valueForKey:@"cancelButtonTitle"];
-        NSString *takePhotoButtonTitle = [self.options valueForKey:@"takePhotoButtonTitle"];
-        NSString *chooseFromLibraryButtonTitle = [self.options valueForKey:@"chooseFromLibraryButtonTitle"];
-
-
-        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title message:nil preferredStyle:UIAlertControllerStyleActionSheet];
-
-        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:cancelTitle style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {
-            self.callback(@[@{@"didCancel": @YES}]); // Return callback for 'cancel' action (if is required)
-        }];
-        [alertController addAction:cancelAction];
-
-        if (![takePhotoButtonTitle isEqual:[NSNull null]] && takePhotoButtonTitle.length > 0) {
-            UIAlertAction *takePhotoAction = [UIAlertAction actionWithTitle:takePhotoButtonTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
-                [self actionHandler:action];
-            }];
-            [alertController addAction:takePhotoAction];
-        }
-        if (![chooseFromLibraryButtonTitle isEqual:[NSNull null]] && chooseFromLibraryButtonTitle.length > 0) {
-            UIAlertAction *chooseFromLibraryAction = [UIAlertAction actionWithTitle:chooseFromLibraryButtonTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
-                [self actionHandler:action];
-            }];
-            [alertController addAction:chooseFromLibraryAction];
-        }
-
-        // Add custom buttons to action sheet
-        if ([self.options objectForKey:@"customButtons"] && [[self.options objectForKey:@"customButtons"] isKindOfClass:[NSArray class]]) {
-            self.customButtons = [self.options objectForKey:@"customButtons"];
-            for (NSString *button in self.customButtons) {
-                NSString *title = [button valueForKey:@"title"];
-                UIAlertAction *customAction = [UIAlertAction actionWithTitle:title style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
-                    [self actionHandler:action];
-                }];
-                [alertController addAction:customAction];
-            }
-        }
-
-        UIViewController *root = RCTPresentedViewController();
-
-        /* On iPad, UIAlertController presents a popover view rather than an action sheet like on iPhone. We must provide the location
-        of the location to show the popover in this case. For simplicity, we'll just display it on the bottom center of the screen
-        to mimic an action sheet */
-        alertController.popoverPresentationController.sourceView = root.view;
-        alertController.popoverPresentationController.sourceRect = CGRectMake(root.view.bounds.size.width / 2.0, root.view.bounds.size.height, 1.0, 1.0);
-
-        if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
-            alertController.popoverPresentationController.permittedArrowDirections = 0;
-            for (id subview in alertController.view.subviews) {
-                if ([subview isMemberOfClass:[UIView class]]) {
-                    ((UIView *)subview).backgroundColor = [UIColor whiteColor];
-                }
-            }
-        }
-
-        [root presentViewController:alertController animated:YES completion:nil];
+        [self launchImagePicker:options callback:callback];
     });
 }
 
-- (void)actionHandler:(UIAlertAction *)action
+- (void)launchImagePicker:(NSDictionary *)options callback:(RCTResponseSenderBlock)callback
 {
-    // If button title is one of the keys in the customButtons dictionary return the value as a callback
-    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"title==%@", action.title];
-    NSArray *results = [self.customButtons filteredArrayUsingPredicate:predicate];
-    if (results.count > 0) {
-        NSString *customButtonStr = [[results objectAtIndex:0] objectForKey:@"name"];
-        if (customButtonStr) {
-            self.callback(@[@{@"customButton": customButtonStr}]);
-            return;
-        }
-    }
+    self.callback = callback;
     
-    if ([action.title isEqualToString:[self.options valueForKey:@"takePhotoButtonTitle"]]) { // Take photo
-        [self launchImagePicker:RNImagePickerTargetCamera];
-    }
-    else if ([action.title isEqualToString:[self.options valueForKey:@"chooseFromLibraryButtonTitle"]]) { // Choose from library
-        [self launchImagePicker:RNImagePickerTargetLibrarySingleImage];
+    if (target == camera && [ImagePickerUtils isSimulator]) {
+        self.callback(@[@{@"errorCode": errCameraUnavailable}]);
+        return;
     }
-}
     
-- (void)launchImagePicker:(RNImagePickerTarget)target options:(NSDictionary *)options
-{
     self.options = options;
-    [self launchImagePicker:target];
-}
-
-- (void)launchImagePicker:(RNImagePickerTarget)target
-{
-    self.picker = [[UIImagePickerController alloc] init];
 
-    if (target == RNImagePickerTargetCamera) {
-#if TARGET_IPHONE_SIMULATOR
-        self.callback(@[@{@"error": @"Camera not available on simulator"}]);
-        return;
-#else
-        self.picker.sourceType = UIImagePickerControllerSourceTypeCamera;
-        if ([[self.options objectForKey:@"cameraType"] isEqualToString:@"front"]) {
-            self.picker.cameraDevice = UIImagePickerControllerCameraDeviceFront;
-        }
-        else { // "back"
-            self.picker.cameraDevice = UIImagePickerControllerCameraDeviceRear;
-        }
-#endif
-    }
-    else { // RNImagePickerTargetLibrarySingleImage
-        self.picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
-    }
+#if __has_include(<PhotosUI/PHPicker.h>)
+    if (@available(iOS 14, *)) {
+        if (target == library) {
+            PHPickerConfiguration *configuration = [ImagePickerUtils makeConfigurationFromOptions:options target:target];
+            PHPickerViewController *picker = [[PHPickerViewController alloc] initWithConfiguration:configuration];
+            picker.delegate = self;
+            picker.modalPresentationStyle = [RCTConvert UIModalPresentationStyle:options[@"presentationStyle"]];
+            picker.presentationController.delegate = self;
 
-    if ([[self.options objectForKey:@"mediaType"] isEqualToString:@"video"]
-        || [[self.options objectForKey:@"mediaType"] isEqualToString:@"mixed"]) {
+            if([self.options[@"includeExtra"] boolValue]) {
                 
-        if ([[self.options objectForKey:@"videoQuality"] isEqualToString:@"high"]) {
-            self.picker.videoQuality = UIImagePickerControllerQualityTypeHigh;
-        }
-        else if ([[self.options objectForKey:@"videoQuality"] isEqualToString:@"low"]) {
-            self.picker.videoQuality = UIImagePickerControllerQualityTypeLow;
-        }
-        else {
-            self.picker.videoQuality = UIImagePickerControllerQualityTypeMedium;
-        }
+                [self checkPhotosPermissions:^(BOOL granted) {
+                    if (!granted) {
+                        self.callback(@[@{@"errorCode": errPermission}]);
+                        return;
+                    }
+                    [self showPickerViewController:picker];
+                }];
+            } else {
+                [self showPickerViewController:picker];
+            }
             
-        id durationLimit = [self.options objectForKey:@"durationLimit"];
-        if (durationLimit) {
-            self.picker.videoMaximumDuration = [durationLimit doubleValue];
-            self.picker.allowsEditing = NO;
+            return;
         }
     }
-    if ([[self.options objectForKey:@"mediaType"] isEqualToString:@"video"]) {
-        self.picker.mediaTypes = @[(NSString *)kUTTypeMovie];
-    } else if ([[self.options objectForKey:@"mediaType"] isEqualToString:@"mixed"]) {
-        self.picker.mediaTypes = @[(NSString *)kUTTypeMovie, (NSString *)kUTTypeImage];
-    } else {
-        self.picker.mediaTypes = @[(NSString *)kUTTypeImage];
-    }
-
-    if ([[self.options objectForKey:@"allowsEditing"] boolValue]) {
-        self.picker.allowsEditing = true;
-    }
-    self.picker.modalPresentationStyle = UIModalPresentationCurrentContext;
-    self.picker.delegate = self;
-
-    // Check permissions
-    void (^showPickerViewController)() = ^void() {
-        dispatch_async(dispatch_get_main_queue(), ^{
-            UIViewController *root = RCTPresentedViewController();
-            [root presentViewController:self.picker animated:YES completion:nil];
-        });
-    };
-
-    if (target == RNImagePickerTargetCamera) {
-        [self checkCameraPermissions:^(BOOL granted) {
-            if (!granted) {
-                self.callback(@[@{@"error": @"Camera permissions not granted"}]);
-                return;
-            }
+#endif
+    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
+    [ImagePickerUtils setupPickerFromOptions:picker options:self.options target:target];
+    picker.delegate = self;
     
-            showPickerViewController();
-        }];
-    }
-    else { // RNImagePickerTargetLibrarySingleImage
+    if([self.options[@"includeExtra"] boolValue]) {
         [self checkPhotosPermissions:^(BOOL granted) {
             if (!granted) {
-                self.callback(@[@{@"error": @"Photo library permissions not granted"}]);
+                self.callback(@[@{@"errorCode": errPermission}]);
                 return;
             }
-
-            showPickerViewController();
+            [self showPickerViewController:picker];
         }];
+    } else {
+      [self showPickerViewController:picker];
     }
 }
 
-- (NSString * _Nullable)originalFilenameForAsset:(PHAsset * _Nullable)asset assetType:(PHAssetResourceType)type {
-    if (!asset) { return nil; }
-
-    PHAssetResource *originalResource;
-    // Get the underlying resources for the PHAsset (PhotoKit)
-    NSArray<PHAssetResource *> *pickedAssetResources = [PHAssetResource assetResourcesForAsset:asset];
-
-    // Find the original resource (underlying image) for the asset, which has the desired filename
-    for (PHAssetResource *resource in pickedAssetResources) {
-        if (resource.type == type) {
-            originalResource = resource;
-        }
-    }
-
-    return originalResource.originalFilename;
-}
-
-- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info
+- (void) showPickerViewController:(UIViewController *)picker
 {
-    dispatch_block_t dismissCompletionBlock = ^{
-
-        NSURL *imageURL = [info valueForKey:UIImagePickerControllerReferenceURL];
-        NSString *mediaType = [info objectForKey:UIImagePickerControllerMediaType];
+    dispatch_async(dispatch_get_main_queue(), ^{
+        UIViewController *root = RCTPresentedViewController();
+        [root presentViewController:picker animated:YES completion:nil];
+    });
+}
 
-        NSString *fileName;
-        if ([mediaType isEqualToString:(NSString *)kUTTypeImage]) {
-            NSString *tempFileName = [[NSUUID UUID] UUIDString];
-            if (imageURL && [[imageURL absoluteString] rangeOfString:@"ext=GIF"].location != NSNotFound) {
-                fileName = [tempFileName stringByAppendingString:@".gif"];
-            }
-            else if ([[self.options objectForKey:@"imageFileType"] isEqualToString:@"png"]) {
-                fileName = [tempFileName stringByAppendingString:@".png"];
-            }
-            else {
-                fileName = [tempFileName stringByAppendingString:@".jpg"];
-            }
-        }
-        else {
-            NSURL *videoURL = info[UIImagePickerControllerMediaURL];
-            fileName = videoURL.lastPathComponent;
-        }
+#pragma mark - Helpers
 
-        // We default to path to the temporary directory
-        NSString *path = [[NSTemporaryDirectory()stringByStandardizingPath] stringByAppendingPathComponent:fileName];
-
-        // If storage options are provided, we use the documents directory which is persisted
-        if ([self.options objectForKey:@"storageOptions"] && [[self.options objectForKey:@"storageOptions"] isKindOfClass:[NSDictionary class]]) {
-            NSDictionary *storageOptions = [self.options objectForKey:@"storageOptions"];
-
-            NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-            NSString *documentsDirectory = [paths objectAtIndex:0];
-            path = [documentsDirectory stringByAppendingPathComponent:fileName];
-
-            // Creates documents subdirectory, if provided
-            if ([storageOptions objectForKey:@"path"]) {
-                NSString *newPath = [documentsDirectory stringByAppendingPathComponent:[storageOptions objectForKey:@"path"]];
-                NSError *error;
-                [[NSFileManager defaultManager] createDirectoryAtPath:newPath withIntermediateDirectories:YES attributes:nil error:&error];
-                if (error) {
-                    NSLog(@"Error creating documents subdirectory: %@", error);
-                    self.callback(@[@{@"error": error.localizedFailureReason}]);
-                    return;
-                }
-                else {
-                    path = [newPath stringByAppendingPathComponent:fileName];
-                }
-            }
-        }
+-(NSMutableDictionary *)mapImageToAsset:(UIImage *)image data:(NSData *)data phAsset:(PHAsset * _Nullable)phAsset {
+    NSString *fileType = [ImagePickerUtils getFileType:data];
     
-        // Create the response object
-        self.response = [[NSMutableDictionary alloc] init];
+    if ((target == camera) && [self.options[@"saveToPhotos"] boolValue]) {
+        UIImageWriteToSavedPhotosAlbum(image, nil, nil, nil);
+    }
     
-        if ([mediaType isEqualToString:(NSString *)kUTTypeImage]) { // PHOTOS
-            UIImage *originalImage;
-            if ([[self.options objectForKey:@"allowsEditing"] boolValue]) {
-                originalImage = [info objectForKey:UIImagePickerControllerEditedImage];
-            }
-            else {
-                originalImage = [info objectForKey:UIImagePickerControllerOriginalImage];
-            }
+    if (![fileType isEqualToString:@"gif"]) {
+        image = [ImagePickerUtils resizeImage:image
+                                     maxWidth:[self.options[@"maxWidth"] floatValue]
+                                    maxHeight:[self.options[@"maxHeight"] floatValue]];
+    }
 
-            if (imageURL) {
-                PHAsset *pickedAsset = [PHAsset fetchAssetsWithALAssetURLs:@[imageURL] options:nil].lastObject;
-                NSString *originalFilename = [self originalFilenameForAsset:pickedAsset assetType:PHAssetResourceTypePhoto];
-                self.response[@"fileName"] = originalFilename ?: [NSNull null];
-                if (pickedAsset.location) {
-                    self.response[@"latitude"] = @(pickedAsset.location.coordinate.latitude);
-                    self.response[@"longitude"] = @(pickedAsset.location.coordinate.longitude);
-                }
-                if (pickedAsset.creationDate) {
-                    self.response[@"timestamp"] = [[ImagePickerManager ISO8601DateFormatter] stringFromDate:pickedAsset.creationDate];
-                }
-            }
+    if ([fileType isEqualToString:@"jpg"]) {
+        data = UIImageJPEGRepresentation(image, [self.options[@"quality"] floatValue]);
+    } else if ([fileType isEqualToString:@"png"]) {
+        data = UIImagePNGRepresentation(image);
+    }
     
-            // GIFs break when resized, so we handle them differently
-            if (imageURL && [[imageURL absoluteString] rangeOfString:@"ext=GIF"].location != NSNotFound) {
-                ALAssetsLibrary* assetsLibrary = [[ALAssetsLibrary alloc] init];
-                [assetsLibrary assetForURL:imageURL resultBlock:^(ALAsset *asset) {
-                    ALAssetRepresentation *rep = [asset defaultRepresentation];
-                    const NSUInteger repSize = (NSUInteger)[rep size];
-                    Byte *buffer = (Byte*)malloc(repSize);
-                    NSUInteger buffered = [rep getBytes:buffer fromOffset:0.0 length:repSize error:nil];
-                    NSData *data = [NSData dataWithBytesNoCopy:buffer length:buffered freeWhenDone:YES];
-                    [data writeToFile:path atomically:YES];
-
-                    NSMutableDictionary *gifResponse = [[NSMutableDictionary alloc] init];
-                    [gifResponse setObject:@(originalImage.size.width) forKey:@"width"];
-                    [gifResponse setObject:@(originalImage.size.height) forKey:@"height"];
-
-                    BOOL vertical = (originalImage.size.width < originalImage.size.height) ? YES : NO;
-                    [gifResponse setObject:@(vertical) forKey:@"isVertical"];
-
-                    if (![[self.options objectForKey:@"noData"] boolValue]) {
-                        NSString *dataString = [data base64EncodedStringWithOptions:0];
-                        [gifResponse setObject:dataString forKey:@"data"];
-                    }
+    NSMutableDictionary *asset = [[NSMutableDictionary alloc] init];
+    asset[@"type"] = [@"image/" stringByAppendingString:fileType];
 
-                    NSURL *fileURL = [NSURL fileURLWithPath:path];
-                    [gifResponse setObject:[fileURL absoluteString] forKey:@"uri"];
+    NSString *fileName = [self getImageFileName:fileType];
+    NSString *path = [[NSTemporaryDirectory() stringByStandardizingPath] stringByAppendingPathComponent:fileName];
+    [data writeToFile:path atomically:YES];
 
-                    NSNumber *fileSizeValue = nil;
-                    NSError *fileSizeError = nil;
-                    [fileURL getResourceValue:&fileSizeValue forKey:NSURLFileSizeKey error:&fileSizeError];
-                    if (fileSizeValue){
-                        [gifResponse setObject:fileSizeValue forKey:@"fileSize"];
-                    }
+    if ([self.options[@"includeBase64"] boolValue]) {
+        asset[@"base64"] = [data base64EncodedStringWithOptions:0];
+    }
 
-                    self.callback(@[gifResponse]);
-                } failureBlock:^(NSError *error) {
-                    self.callback(@[@{@"error": error.localizedFailureReason}]);
-                }];
-                return;
-            }
+    NSURL *fileURL = [NSURL fileURLWithPath:path];
+    asset[@"uri"] = [fileURL absoluteString];
 
-            UIImage *editedImage = [self fixOrientation:originalImage];  // Rotate the image for upload to web
+    NSNumber *fileSizeValue = nil;
+    NSError *fileSizeError = nil;
+    [fileURL getResourceValue:&fileSizeValue forKey:NSURLFileSizeKey error:&fileSizeError];
+    if (fileSizeValue){
+        asset[@"fileSize"] = fileSizeValue;
+    }
 
-            // If needed, downscale image
-            float maxWidth = editedImage.size.width;
-            float maxHeight = editedImage.size.height;
-            if ([self.options valueForKey:@"maxWidth"]) {
-                maxWidth = [[self.options valueForKey:@"maxWidth"] floatValue];
-            }
-            if ([self.options valueForKey:@"maxHeight"]) {
-                maxHeight = [[self.options valueForKey:@"maxHeight"] floatValue];
-            }
-            editedImage = [self downscaleImageIfNecessary:editedImage maxWidth:maxWidth maxHeight:maxHeight];
+    asset[@"fileName"] = fileName;
+    asset[@"width"] = @(image.size.width);
+    asset[@"height"] = @(image.size.height);
     
-            NSData *data;
-            NSString *mimeType;
-            if ([[self.options objectForKey:@"imageFileType"] isEqualToString:@"png"]) {
-                data = UIImagePNGRepresentation(editedImage);
-                mimeType = (__bridge_transfer NSString *)(UTTypeCopyPreferredTagWithClass(kUTTypePNG, kUTTagClassMIMEType));
-            }
-            else {
-                data = UIImageJPEGRepresentation(editedImage, [[self.options valueForKey:@"quality"] floatValue]);
-                mimeType = (__bridge_transfer NSString *)(UTTypeCopyPreferredTagWithClass(kUTTypeJPEG, kUTTagClassMIMEType));
-            }
-            [self.response setObject:mimeType forKey:@"type"];
-            [data writeToFile:path atomically:YES];
+    if(phAsset){
+        asset[@"timestamp"] = [self getDateTimeInUTC:phAsset.creationDate];
+        asset[@"id"] = phAsset.localIdentifier;
+        // Add more extra data here ...
+    }
     
-            if (![[self.options objectForKey:@"noData"] boolValue]) {
-                NSString *dataString = [data base64EncodedStringWithOptions:0]; // base64 encoded image string
-                [self.response setObject:dataString forKey:@"data"];
-            }
+    return asset;
+}
 
-            BOOL vertical = (editedImage.size.width < editedImage.size.height) ? YES : NO;
-            [self.response setObject:@(vertical) forKey:@"isVertical"];
-            NSURL *fileURL = [NSURL fileURLWithPath:path];
-            NSString *filePath = [fileURL absoluteString];
-            [self.response setObject:filePath forKey:@"uri"];
+-(NSMutableDictionary *)mapVideoToAsset:(NSURL *)url phAsset:(PHAsset * _Nullable)phAsset error:(NSError **)error {
+    NSString *fileName = [url lastPathComponent];
+    NSString *path = [[NSTemporaryDirectory() stringByStandardizingPath] stringByAppendingPathComponent:fileName];
+    NSURL *videoDestinationURL = [NSURL fileURLWithPath:path];
 
-            // add ref to the original image
-            NSString *origURL = [imageURL absoluteString];
-            if (origURL) {
-              [self.response setObject:origURL forKey:@"origURL"];
-            }
+    if ((target == camera) && [self.options[@"saveToPhotos"] boolValue]) {
+        UISaveVideoAtPathToSavedPhotosAlbum(url.path, nil, nil, nil);
+    }
     
-            NSNumber *fileSizeValue = nil;
-            NSError *fileSizeError = nil;
-            [fileURL getResourceValue:&fileSizeValue forKey:NSURLFileSizeKey error:&fileSizeError];
-            if (fileSizeValue){
-                [self.response setObject:fileSizeValue forKey:@"fileSize"];
-            }
+    if (![url.URLByResolvingSymlinksInPath.path isEqualToString:videoDestinationURL.URLByResolvingSymlinksInPath.path]) {
+        NSFileManager *fileManager = [NSFileManager defaultManager];
         
-            [self.response setObject:@(editedImage.size.width) forKey:@"width"];
-            [self.response setObject:@(editedImage.size.height) forKey:@"height"];
-
-            NSDictionary *storageOptions = [self.options objectForKey:@"storageOptions"];
-            if (storageOptions && [[storageOptions objectForKey:@"cameraRoll"] boolValue] == YES && self.picker.sourceType == UIImagePickerControllerSourceTypeCamera) {
-                ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];
-                if ([[storageOptions objectForKey:@"waitUntilSaved"] boolValue]) {
-                    [library writeImageToSavedPhotosAlbum:originalImage.CGImage metadata:[info valueForKey:UIImagePickerControllerMediaMetadata] completionBlock:^(NSURL *assetURL, NSError *error) {
-                        if (error) {
-                            NSLog(@"Error while saving picture into photo album");
-                        } else {
-                            // when the image has been saved in the photo album
-                            if (assetURL) {
-                                PHAsset *capturedAsset = [PHAsset fetchAssetsWithALAssetURLs:@[assetURL] options:nil].lastObject;
-                                NSString *originalFilename = [self originalFilenameForAsset:capturedAsset assetType:PHAssetResourceTypePhoto];
-                                self.response[@"fileName"] = originalFilename ?: [NSNull null];
-                                // This implementation will never have a location for the captured image, it needs to be added manually with CoreLocation code here.
-                                if (capturedAsset.creationDate) {
-                                    self.response[@"timestamp"] = [[ImagePickerManager ISO8601DateFormatter] stringFromDate:capturedAsset.creationDate];
-                                }
-                            }
-                            self.callback(@[self.response]);
-                        }
-                    }];
-                } else {
-                    [library writeImageToSavedPhotosAlbum:originalImage.CGImage metadata:[info valueForKey:UIImagePickerControllerMediaMetadata] completionBlock:nil];
-                }
-            }
+        // Delete file if it already exists
+        if ([fileManager fileExistsAtPath:videoDestinationURL.path]) {
+            [fileManager removeItemAtURL:videoDestinationURL error:nil];
         }
-        else { // VIDEO
-            NSURL *videoRefURL = info[UIImagePickerControllerReferenceURL];
-            NSURL *videoURL = info[UIImagePickerControllerMediaURL];
-            NSURL *videoDestinationURL = [NSURL fileURLWithPath:path];
-
-            if (videoRefURL) {
-                PHAsset *pickedAsset = [PHAsset fetchAssetsWithALAssetURLs:@[videoRefURL] options:nil].lastObject;
-                NSString *originalFilename = [self originalFilenameForAsset:pickedAsset assetType:PHAssetResourceTypeVideo];
-                self.response[@"fileName"] = originalFilename ?: [NSNull null];
-                if (pickedAsset.location) {
-                    self.response[@"latitude"] = @(pickedAsset.location.coordinate.latitude);
-                    self.response[@"longitude"] = @(pickedAsset.location.coordinate.longitude);
-                }
-                if (pickedAsset.creationDate) {
-                    self.response[@"timestamp"] = [[ImagePickerManager ISO8601DateFormatter] stringFromDate:pickedAsset.creationDate];
-                }
-            }
-
-            if ([videoURL.URLByResolvingSymlinksInPath.path isEqualToString:videoDestinationURL.URLByResolvingSymlinksInPath.path] == NO) {
-                NSFileManager *fileManager = [NSFileManager defaultManager];
 
-                // Delete file if it already exists
-                if ([fileManager fileExistsAtPath:videoDestinationURL.path]) {
-                    [fileManager removeItemAtURL:videoDestinationURL error:nil];
-                }
-
-                if (videoURL) { // Protect against reported crash
-                  NSError *error = nil;
-                  [fileManager moveItemAtURL:videoURL toURL:videoDestinationURL error:&error];
-                  if (error) {
-                      self.callback(@[@{@"error": error.localizedFailureReason}]);
-                      return;
-                  }
-                }
-            }
+        if (url) { // Protect against reported crash
 
-            [self.response setObject:videoDestinationURL.absoluteString forKey:@"uri"];
-            if (videoRefURL.absoluteString) {
-                [self.response setObject:videoRefURL.absoluteString forKey:@"origURL"];
-            }
+          // If we have write access to the source file, move it. Otherwise use copy.
+          if ([fileManager isWritableFileAtPath:[url path]]) {
+            [fileManager moveItemAtURL:url toURL:videoDestinationURL error:error];
+          } else {
+            [fileManager copyItemAtURL:url toURL:videoDestinationURL error:error];
+          }
 
-            NSDictionary *storageOptions = [self.options objectForKey:@"storageOptions"];
-            if (storageOptions && [[storageOptions objectForKey:@"cameraRoll"] boolValue] == YES && self.picker.sourceType == UIImagePickerControllerSourceTypeCamera) {
-                ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];
-                [library writeVideoAtPathToSavedPhotosAlbum:videoDestinationURL completionBlock:^(NSURL *assetURL, NSError *error) {
-                    if (error) {
-                        self.callback(@[@{@"error": error.localizedFailureReason}]);
-                        return;
-                    } else {
-                        NSLog(@"Save video succeed.");
-                        if ([[storageOptions objectForKey:@"waitUntilSaved"] boolValue]) {
-                            if (assetURL) {
-                                PHAsset *capturedAsset = [PHAsset fetchAssetsWithALAssetURLs:@[assetURL] options:nil].lastObject;
-                                NSString *originalFilename = [self originalFilenameForAsset:capturedAsset assetType:PHAssetResourceTypeVideo];
-                                self.response[@"fileName"] = originalFilename ?: [NSNull null];
-                                // This implementation will never have a location for the captured image, it needs to be added manually with CoreLocation code here.
-                                if (capturedAsset.creationDate) {
-                                    self.response[@"timestamp"] = [[ImagePickerManager ISO8601DateFormatter] stringFromDate:capturedAsset.creationDate];
-                                }
-                            }
-
-                            self.callback(@[self.response]);
-                        }
-                    }
-                }];
-            }
+          if (error && *error) {
+              return nil;
+          }
         }
+    }
 
-        // If storage options are provided, check the skipBackup flag
-        if ([self.options objectForKey:@"storageOptions"] && [[self.options objectForKey:@"storageOptions"] isKindOfClass:[NSDictionary class]]) {
-            NSDictionary *storageOptions = [self.options objectForKey:@"storageOptions"];
-
-            if ([[storageOptions objectForKey:@"skipBackup"] boolValue]) {
-                [self addSkipBackupAttributeToItemAtPath:path]; // Don't back up the file to iCloud
-            }
-
-            if ([[storageOptions objectForKey:@"waitUntilSaved"] boolValue] == NO ||
-                [[storageOptions objectForKey:@"cameraRoll"] boolValue] == NO ||
-                self.picker.sourceType != UIImagePickerControllerSourceTypeCamera)
-            {
-                self.callback(@[self.response]);
-            }
-        }
-        else {
-            self.callback(@[self.response]);
-        }
-    };
+    NSMutableDictionary *asset = [[NSMutableDictionary alloc] init];
+    CGSize dimentions = [ImagePickerUtils getVideoDimensionsFromUrl:videoDestinationURL];
+    asset[@"fileName"] = fileName;
+    asset[@"duration"] = [NSNumber numberWithDouble:CMTimeGetSeconds([AVAsset assetWithURL:videoDestinationURL].duration)];
+    asset[@"uri"] = videoDestinationURL.absoluteString;
+    asset[@"type"] = [ImagePickerUtils getFileTypeFromUrl:videoDestinationURL];
+    asset[@"fileSize"] = [ImagePickerUtils getFileSizeFromUrl:videoDestinationURL];
+    asset[@"width"] = @(dimentions.width);
+    asset[@"height"] = @(dimentions.height);
+
+    if(phAsset){
+        asset[@"timestamp"] = [self getDateTimeInUTC:phAsset.creationDate];
+        asset[@"id"] = phAsset.localIdentifier;
+        // Add more extra data here ...
+    }
 
-    dispatch_async(dispatch_get_main_queue(), ^{
-        [picker dismissViewControllerAnimated:YES completion:dismissCompletionBlock];
-    });
+    return asset;
 }
 
-- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
-{
-    dispatch_async(dispatch_get_main_queue(), ^{
-        [picker dismissViewControllerAnimated:YES completion:^{
-            self.callback(@[@{@"didCancel": @YES}]);
-        }];
-    });
+- (NSString *) getDateTimeInUTC:(NSDate *)date {
+    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
+    [formatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSSZ"];
+    return [formatter stringFromDate:date];
 }
 
-#pragma mark - Helpers
-
 - (void)checkCameraPermissions:(void(^)(BOOL granted))callback
 {
     AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
     if (status == AVAuthorizationStatusAuthorized) {
         callback(YES);
         return;
-    } else if (status == AVAuthorizationStatusNotDetermined){
+    }
+    else if (status == AVAuthorizationStatusNotDetermined){
         [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) {
             callback(granted);
             return;
         }];
-    } else {
+    }
+    else {
         callback(NO);
     }
 }
@@ -571,140 +269,224 @@ - (void)checkPhotosPermissions:(void(^)(BOOL granted))callback
     }
 }
 
-- (UIImage*)downscaleImageIfNecessary:(UIImage*)image maxWidth:(float)maxWidth maxHeight:(float)maxHeight
+// Both camera and photo write permission is required to take picture/video and store it to public photos
+- (void)checkCameraAndPhotoPermission:(void(^)(BOOL granted))callback
 {
-    UIImage* newImage = image;
+    [self checkCameraPermissions:^(BOOL cameraGranted) {
+        if (!cameraGranted) {
+            callback(NO);
+            return;
+        }
 
-    // Nothing to do here
-    if (image.size.width <= maxWidth && image.size.height <= maxHeight) {
-        return newImage;
-    }
+        [self checkPhotosPermissions:^(BOOL photoGranted) {
+            if (!photoGranted) {
+                callback(NO);
+                return;
+            }
+            callback(YES);
+        }];
+    }];
+}
+
+- (void)checkPermission:(void(^)(BOOL granted)) callback
+{
+    void (^permissionBlock)(BOOL) = ^(BOOL permissionGranted) {
+        if (!permissionGranted) {
+            callback(NO);
+            return;
+        }
+        callback(YES);
+    };
 
-    CGSize scaledSize = CGSizeMake(image.size.width, image.size.height);
-    if (maxWidth < scaledSize.width) {
-        scaledSize = CGSizeMake(maxWidth, (maxWidth / scaledSize.width) * scaledSize.height);
+    if (target == camera && [self.options[@"saveToPhotos"] boolValue]) {
+        [self checkCameraAndPhotoPermission:permissionBlock];
     }
-    if (maxHeight < scaledSize.height) {
-        scaledSize = CGSizeMake((maxHeight / scaledSize.height) * scaledSize.width, maxHeight);
+    else if (target == camera) {
+        [self checkCameraPermissions:permissionBlock];
     }
-
-    // If the pixels are floats, it causes a white line in iOS8 and probably other versions too
-    scaledSize.width = (int)scaledSize.width;
-    scaledSize.height = (int)scaledSize.height;
-
-    UIGraphicsBeginImageContext(scaledSize); // this will resize
-    [image drawInRect:CGRectMake(0, 0, scaledSize.width, scaledSize.height)];
-    newImage = UIGraphicsGetImageFromCurrentImageContext();
-    if (newImage == nil) {
-        NSLog(@"could not scale image");
+    else {
+        if (@available(iOS 11.0, *)) {
+            callback(YES);
+        }
+        else {
+            [self checkPhotosPermissions:permissionBlock];
+        }
     }
-    UIGraphicsEndImageContext();
+}
 
-    return newImage;
+- (NSString *)getImageFileName:(NSString *)fileType
+{
+    NSString *fileName = [[NSUUID UUID] UUIDString];
+    fileName = [fileName stringByAppendingString:@"."];
+    return [fileName stringByAppendingString:fileType];
 }
 
-- (UIImage *)fixOrientation:(UIImage *)srcImg {
-    if (srcImg.imageOrientation == UIImageOrientationUp) {
-        return srcImg;
++ (UIImage *)getUIImageFromInfo:(NSDictionary *)info
+{
+    UIImage *image = info[UIImagePickerControllerEditedImage];
+    if (!image) {
+        image = info[UIImagePickerControllerOriginalImage];
     }
+    return image;
+}
 
-    CGAffineTransform transform = CGAffineTransformIdentity;
-    switch (srcImg.imageOrientation) {
-        case UIImageOrientationDown:
-        case UIImageOrientationDownMirrored:
-            transform = CGAffineTransformTranslate(transform, srcImg.size.width, srcImg.size.height);
-            transform = CGAffineTransformRotate(transform, M_PI);
-            break;
-
-        case UIImageOrientationLeft:
-        case UIImageOrientationLeftMirrored:
-            transform = CGAffineTransformTranslate(transform, srcImg.size.width, 0);
-            transform = CGAffineTransformRotate(transform, M_PI_2);
-            break;
-
-        case UIImageOrientationRight:
-        case UIImageOrientationRightMirrored:
-            transform = CGAffineTransformTranslate(transform, 0, srcImg.size.height);
-            transform = CGAffineTransformRotate(transform, -M_PI_2);
-            break;
-        case UIImageOrientationUp:
-        case UIImageOrientationUpMirrored:
-            break;
++ (NSURL *)getNSURLFromInfo:(NSDictionary *)info {
+    if (@available(iOS 11.0, *)) {
+        return info[UIImagePickerControllerImageURL];
     }
-
-    switch (srcImg.imageOrientation) {
-        case UIImageOrientationUpMirrored:
-        case UIImageOrientationDownMirrored:
-            transform = CGAffineTransformTranslate(transform, srcImg.size.width, 0);
-            transform = CGAffineTransformScale(transform, -1, 1);
-            break;
-
-        case UIImageOrientationLeftMirrored:
-        case UIImageOrientationRightMirrored:
-            transform = CGAffineTransformTranslate(transform, srcImg.size.height, 0);
-            transform = CGAffineTransformScale(transform, -1, 1);
-            break;
-        case UIImageOrientationUp:
-        case UIImageOrientationDown:
-        case UIImageOrientationLeft:
-        case UIImageOrientationRight:
-            break;
+    else {
+        return info[UIImagePickerControllerReferenceURL];
     }
+}
 
-    CGContextRef ctx = CGBitmapContextCreate(NULL, srcImg.size.width, srcImg.size.height, CGImageGetBitsPerComponent(srcImg.CGImage), 0, CGImageGetColorSpace(srcImg.CGImage), CGImageGetBitmapInfo(srcImg.CGImage));
-    CGContextConcatCTM(ctx, transform);
-    switch (srcImg.imageOrientation) {
-        case UIImageOrientationLeft:
-        case UIImageOrientationLeftMirrored:
-        case UIImageOrientationRight:
-        case UIImageOrientationRightMirrored:
-            CGContextDrawImage(ctx, CGRectMake(0,0,srcImg.size.height,srcImg.size.width), srcImg.CGImage);
-            break;
-
-        default:
-            CGContextDrawImage(ctx, CGRectMake(0,0,srcImg.size.width,srcImg.size.height), srcImg.CGImage);
-            break;
-    }
+@end
 
-    CGImageRef cgimg = CGBitmapContextCreateImage(ctx);
-    UIImage *img = [UIImage imageWithCGImage:cgimg];
-    CGContextRelease(ctx);
-    CGImageRelease(cgimg);
-    return img;
-}
+@implementation ImagePickerManager (UIImagePickerControllerDelegate)
 
-- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString
+- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info
 {
-    NSURL* URL= [NSURL fileURLWithPath: filePathString];
-    if ([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]) {
-        NSError *error = nil;
-        BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]
-                                      forKey: NSURLIsExcludedFromBackupKey error: &error];
-
-        if(!success){
-            NSLog(@"Error excluding %@ from backup %@", [URL lastPathComponent], error);
+    dispatch_block_t dismissCompletionBlock = ^{
+        NSMutableArray<NSDictionary *> *assets = [[NSMutableArray alloc] initWithCapacity:1];
+        PHAsset *asset = nil;
+
+        if (photoSelected == YES) {
+           return;
         }
-        return success;
+        photoSelected = YES;
+
+        // If include extra, we fetch the PHAsset, this required library permissions
+        if([self.options[@"includeExtra"] boolValue]) {
+          asset = [ImagePickerUtils fetchPHAssetOnIOS13:info];
+        }
+
+        if ([info[UIImagePickerControllerMediaType] isEqualToString:(NSString *) kUTTypeImage]) {
+            UIImage *image = [ImagePickerManager getUIImageFromInfo:info];
+            
+            [assets addObject:[self mapImageToAsset:image data:[NSData dataWithContentsOfURL:[ImagePickerManager getNSURLFromInfo:info]] phAsset:asset]];
+        } else {
+            NSError *error;
+            NSDictionary *videoAsset = [self mapVideoToAsset:info[UIImagePickerControllerMediaURL] phAsset:asset error:&error];
+                        
+            if (videoAsset == nil) {
+                NSString *errorMessage = error.localizedFailureReason;
+                if (errorMessage == nil) errorMessage = @"Video asset not found";
+                self.callback(@[@{@"errorCode": errOthers, @"errorMessage": errorMessage}]);
+                return;
+            }
+            [assets addObject:videoAsset];
+        }
+
+        NSMutableDictionary *response = [[NSMutableDictionary alloc] init];
+        response[@"assets"] = assets;
+        self.callback(@[response]);
+    };
+
+    dispatch_async(dispatch_get_main_queue(), ^{
+        [picker dismissViewControllerAnimated:YES completion:dismissCompletionBlock];
+    });
+}
+
+- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
+{
+    dispatch_async(dispatch_get_main_queue(), ^{
+        [picker dismissViewControllerAnimated:YES completion:^{
+            self.callback(@[@{@"didCancel": @YES}]);
+        }];
+    });
+}
+
+@end
+
+@implementation ImagePickerManager (presentationControllerDidDismiss)
+
+- (void)presentationControllerDidDismiss:(UIPresentationController *)presentationController
+{
+    self.callback(@[@{@"didCancel": @YES}]);
+}
+
+@end
+
+#if __has_include(<PhotosUI/PHPicker.h>)
+@implementation ImagePickerManager (PHPickerViewControllerDelegate)
+
+- (void)picker:(PHPickerViewController *)picker didFinishPicking:(NSArray<PHPickerResult *> *)results API_AVAILABLE(ios(14))
+{
+    [picker dismissViewControllerAnimated:YES completion:nil];
+
+    if (photoSelected == YES) {
+        return;
     }
-    else {
-        NSLog(@"Error setting skip backup attribute: file not found");
-        return NO;
+    photoSelected = YES;
+    
+    if (results.count == 0) {
+        dispatch_async(dispatch_get_main_queue(), ^{
+            self.callback(@[@{@"didCancel": @YES}]);
+        });
+        return;
     }
-}
 
-#pragma mark - Class Methods
-
-+ (NSDateFormatter * _Nonnull)ISO8601DateFormatter {
-    static NSDateFormatter *ISO8601DateFormatter;
-    static dispatch_once_t onceToken;
-    dispatch_once(&onceToken, ^{
-        ISO8601DateFormatter = [[NSDateFormatter alloc] init];
-        NSLocale *enUSPOSIXLocale = [NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"];
-        ISO8601DateFormatter.locale = enUSPOSIXLocale;
-        ISO8601DateFormatter.timeZone = [NSTimeZone timeZoneWithAbbreviation:@"GMT"];
-        ISO8601DateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ssZZZZZ";
+    dispatch_group_t completionGroup = dispatch_group_create();
+    NSMutableArray<NSDictionary *> *assets = [[NSMutableArray alloc] initWithCapacity:results.count];
+    for (int i = 0; i < results.count; i++) {
+        [assets addObject:(NSDictionary *)[NSNull null]];
+    }
+
+    [results enumerateObjectsUsingBlock:^(PHPickerResult *result, NSUInteger index, BOOL *stop) {
+        PHAsset *asset = nil;
+        NSItemProvider *provider = result.itemProvider;
+
+        // If include extra, we fetch the PHAsset, this required library permissions
+        if([self.options[@"includeExtra"] boolValue] && result.assetIdentifier != nil) {
+            PHFetchResult* fetchResult = [PHAsset fetchAssetsWithLocalIdentifiers:@[result.assetIdentifier] options:nil];
+            asset = fetchResult.firstObject;
+        }
+        
+        dispatch_group_enter(completionGroup);
+
+        if ([provider canLoadObjectOfClass:[UIImage class]]) {
+            NSString *identifier = provider.registeredTypeIdentifiers.firstObject;
+            // Matches both com.apple.live-photo-bundle and com.apple.private.live-photo-bundle
+            if ([identifier containsString:@"live-photo-bundle"]) {
+                // Handle live photos
+                identifier = @"public.jpeg";
+            }
+
+            [provider loadFileRepresentationForTypeIdentifier:identifier completionHandler:^(NSURL * _Nullable url, NSError * _Nullable error) {
+                NSData *data = [[NSData alloc] initWithContentsOfURL:url];
+                UIImage *image = [[UIImage alloc] initWithData:data];
+                
+                assets[index] = [self mapImageToAsset:image data:data phAsset:asset];
+                dispatch_group_leave(completionGroup);
+            }];
+        } else if ([provider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeMovie]) {
+            [provider loadFileRepresentationForTypeIdentifier:(NSString *)kUTTypeMovie completionHandler:^(NSURL * _Nullable url, NSError * _Nullable error) {
+                NSDictionary *mappedAsset = [self mapVideoToAsset:url phAsset:asset error:nil];
+                if (nil != mappedAsset) {
+                    assets[index] = mappedAsset;
+                }
+                dispatch_group_leave(completionGroup);
+            }];
+        } else {
+            // The provider didn't have an item matching photo or video (fails on M1 Mac Simulator)
+            dispatch_group_leave(completionGroup);
+        }
+    }];
+
+    dispatch_group_notify(completionGroup, dispatch_get_main_queue(), ^{
+        //  mapVideoToAsset can fail and return nil, leaving asset NSNull.
+        for (NSDictionary *asset in assets) {
+            if ([asset isEqual:[NSNull null]]) {
+                self.callback(@[@{@"errorCode": errOthers}]);
+                return;
+            }
+        }
+
+        NSMutableDictionary *response = [[NSMutableDictionary alloc] init];
+        [response setObject:assets forKey:@"assets"];
+
+        self.callback(@[response]);
     });
-    return ISO8601DateFormatter;
 }
 
 @end
+#endif
diff --git a/node_modules/react-native-image-picker/ios/ImagePickerUtils.h b/node_modules/react-native-image-picker/ios/ImagePickerUtils.h
new file mode 100644
index 0000000..3cd8bfc
--- /dev/null
+++ b/node_modules/react-native-image-picker/ios/ImagePickerUtils.h
@@ -0,0 +1,26 @@
+#import "ImagePickerManager.h"
+#import <Photos/Photos.h>
+
+@class PHPickerConfiguration;
+
+@interface ImagePickerUtils : NSObject
+
++ (BOOL)isSimulator;
+
++ (void)setupPickerFromOptions:(UIImagePickerController *)picker options:(NSDictionary *)options target:(RNImagePickerTarget)target;
+
++ (PHPickerConfiguration *)makeConfigurationFromOptions:(NSDictionary *)options target:(RNImagePickerTarget)target API_AVAILABLE(ios(14));
+
++ (NSString*)getFileType:(NSData*)imageData;
+
++ (UIImage*)resizeImage:(UIImage*)image maxWidth:(float)maxWidth maxHeight:(float)maxHeight;
+
++ (CGSize)getVideoDimensionsFromUrl:(NSURL *)url;
+
++ (NSString *) getFileTypeFromUrl:(NSURL *)url;
+
++ (NSString *) getFileSizeFromUrl:(NSURL *)url;
+
++ (PHAsset *)fetchPHAssetOnIOS13:(NSDictionary<NSString *,id> *)info;
+    
+@end
diff --git a/node_modules/react-native-image-picker/ios/ImagePickerUtils.m b/node_modules/react-native-image-picker/ios/ImagePickerUtils.m
new file mode 100644
index 0000000..620ddc9
--- /dev/null
+++ b/node_modules/react-native-image-picker/ios/ImagePickerUtils.m
@@ -0,0 +1,185 @@
+#import "ImagePickerUtils.h"
+#import <CoreServices/CoreServices.h>
+#import <PhotosUI/PhotosUI.h>
+
+@implementation ImagePickerUtils
+
++ (void) setupPickerFromOptions:(UIImagePickerController *)picker options:(NSDictionary *)options target:(RNImagePickerTarget)target
+{
+    if ([[options objectForKey:@"mediaType"] isEqualToString:@"video"]) {
+
+        if ([[options objectForKey:@"videoQuality"] isEqualToString:@"high"]) {
+            picker.videoQuality = UIImagePickerControllerQualityTypeHigh;
+        }
+        else if ([[options objectForKey:@"videoQuality"] isEqualToString:@"low"]) {
+            picker.videoQuality = UIImagePickerControllerQualityTypeLow;
+        }
+        else {
+            picker.videoQuality = UIImagePickerControllerQualityTypeMedium;
+        }
+    }
+    
+    if (target == camera) {
+        picker.sourceType = UIImagePickerControllerSourceTypeCamera;
+
+        if (options[@"durationLimit"] > 0) {
+            picker.videoMaximumDuration = [options[@"durationLimit"] doubleValue];
+        }
+
+        if ([options[@"cameraType"] isEqualToString:@"front"]) {
+            picker.cameraDevice = UIImagePickerControllerCameraDeviceFront;
+        } else {
+            picker.cameraDevice = UIImagePickerControllerCameraDeviceRear;
+        }
+    } else {
+        picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
+    }
+
+    if ([options[@"mediaType"] isEqualToString:@"video"]) {
+        picker.mediaTypes = @[(NSString *)kUTTypeMovie];
+    } else if ([options[@"mediaType"] isEqualToString:@"photo"]) {
+        picker.mediaTypes = @[(NSString *)kUTTypeImage];
+    } else if ((target == library) && ([options[@"mediaType"] isEqualToString:@"mixed"])) {
+        picker.mediaTypes = @[(NSString *)kUTTypeImage, (NSString *)kUTTypeMovie];
+    }
+
+    picker.modalPresentationStyle = [RCTConvert UIModalPresentationStyle:options[@"presentationStyle"]];
+}
+
++ (PHPickerConfiguration *)makeConfigurationFromOptions:(NSDictionary *)options target:(RNImagePickerTarget)target API_AVAILABLE(ios(14))
+{
+#if __has_include(<PhotosUI/PHPicker.h>)
+    PHPickerConfiguration *configuration;
+    
+    if(options[@"includeExtra"]) {
+        PHPhotoLibrary *photoLibrary = [PHPhotoLibrary sharedPhotoLibrary];
+        configuration = [[PHPickerConfiguration alloc] initWithPhotoLibrary:photoLibrary];
+    } else {
+        configuration = [[PHPickerConfiguration alloc] init];
+    }
+    
+    configuration.preferredAssetRepresentationMode = PHPickerConfigurationAssetRepresentationModeCurrent;
+    configuration.selectionLimit = [options[@"selectionLimit"] integerValue];
+
+    if ([options[@"mediaType"] isEqualToString:@"video"]) {
+        configuration.filter = [PHPickerFilter videosFilter];
+    } else if ([options[@"mediaType"] isEqualToString:@"photo"]) {
+        configuration.filter = [PHPickerFilter imagesFilter];
+    } else if ((target == library) && ([options[@"mediaType"] isEqualToString:@"mixed"])) {
+        configuration.filter = [PHPickerFilter anyFilterMatchingSubfilters: @[PHPickerFilter.imagesFilter, PHPickerFilter.videosFilter]];
+    }
+    return configuration;
+#else
+    return nil;
+#endif
+}
+
+
++ (BOOL) isSimulator
+{
+    #if TARGET_OS_SIMULATOR
+        return YES;
+    #endif
+    return NO;
+}
+
++ (NSString*) getFileType:(NSData *)imageData
+{
+    const uint8_t firstByteJpg = 0xFF;
+    const uint8_t firstBytePng = 0x89;
+    const uint8_t firstByteGif = 0x47;
+    
+    uint8_t firstByte;
+    [imageData getBytes:&firstByte length:1];
+    switch (firstByte) {
+      case firstByteJpg:
+        return @"jpg";
+      case firstBytePng:
+        return @"png";
+      case firstByteGif:
+        return @"gif";
+      default:
+        return @"jpg";
+    }
+}
+
++ (NSString *) getFileTypeFromUrl:(NSURL *)url {
+    CFStringRef fileExtension = (__bridge CFStringRef)[url pathExtension];
+    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, fileExtension, NULL);
+    CFStringRef MIMEType = UTTypeCopyPreferredTagWithClass(UTI, kUTTagClassMIMEType);
+    CFRelease(UTI);
+    return (__bridge_transfer NSString *)MIMEType;
+}
+
++ (NSNumber *) getFileSizeFromUrl:(NSURL *)url {
+    NSError *attributesError;
+    NSDictionary *fileAttributes = [[NSFileManager defaultManager] attributesOfItemAtPath:[url path] error:&attributesError];
+    NSNumber *fileSizeNumber = [fileAttributes objectForKey:NSFileSize];
+    long fileSize = [fileSizeNumber longLongValue];
+
+    if (attributesError) {
+        return nil;
+    }
+
+    return [NSNumber numberWithLong:fileSize];
+}
+
++ (CGSize)getVideoDimensionsFromUrl:(NSURL *)url {
+    AVURLAsset *asset = [AVURLAsset URLAssetWithURL:url options:nil];
+    NSArray *tracks = [asset tracksWithMediaType:AVMediaTypeVideo];
+    
+    if ([tracks count] > 0) {
+        AVAssetTrack *track = [tracks objectAtIndex:0];
+        return track.naturalSize;
+    }
+    
+    return CGSizeMake(0, 0);
+}
+
++ (UIImage*)resizeImage:(UIImage*)image maxWidth:(float)maxWidth maxHeight:(float)maxHeight
+{
+    if ((maxWidth == 0) || (maxHeight == 0)) {
+        return image;
+    }
+    
+    if (image.size.width <= maxWidth && image.size.height <= maxHeight) {
+        return image;
+    }
+
+    CGSize newSize = CGSizeMake(image.size.width, image.size.height);
+    if (maxWidth < newSize.width) {
+        newSize = CGSizeMake(maxWidth, (maxWidth / newSize.width) * newSize.height);
+    }
+    if (maxHeight < newSize.height) {
+        newSize = CGSizeMake((maxHeight / newSize.height) * newSize.width, maxHeight);
+    }
+    
+    newSize.width = (int)newSize.width;
+    newSize.height = (int)newSize.height;
+
+    UIGraphicsBeginImageContext(newSize);
+    [image drawInRect:CGRectMake(0, 0, newSize.width, newSize.height)];
+    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
+    if (newImage == nil) {
+        NSLog(@"could not scale image");
+    }
+    UIGraphicsEndImageContext();
+
+    return newImage;
+}
+
++ (PHAsset *)fetchPHAssetOnIOS13:(NSDictionary<NSString *,id> *)info
+{
+    NSURL *referenceURL = [info objectForKey:UIImagePickerControllerReferenceURL];
+
+    if(!referenceURL) {
+      return nil;
+    }
+
+    // We fetch the asset like this to support iOS 10 and lower
+    // see: https://stackoverflow.com/a/52529904/4177049
+    PHFetchResult* fetchResult = [PHAsset fetchAssetsWithALAssetURLs:@[referenceURL] options:nil];
+    return fetchResult.firstObject;
+}
+
+@end
diff --git a/node_modules/react-native-image-picker/ios/RNImagePicker.xcodeproj/project.pbxproj b/node_modules/react-native-image-picker/ios/RNImagePicker.xcodeproj/project.pbxproj
index d6cdada..6cceb89 100644
--- a/node_modules/react-native-image-picker/ios/RNImagePicker.xcodeproj/project.pbxproj
+++ b/node_modules/react-native-image-picker/ios/RNImagePicker.xcodeproj/project.pbxproj
@@ -26,6 +26,8 @@
 		014A3B5C1C6CF33500B6D375 /* libRNImagePicker.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libRNImagePicker.a; sourceTree = BUILT_PRODUCTS_DIR; };
 		014A3B681C6CF34500B6D375 /* ImagePickerManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ImagePickerManager.h; sourceTree = "<group>"; };
 		014A3B691C6CF34500B6D375 /* ImagePickerManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = ImagePickerManager.m; sourceTree = "<group>"; };
+		C1D0CF202509FCCD00304E19 /* ImagePickerUtils.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ImagePickerUtils.h; sourceTree = "<group>"; };
+		C1D0CF212509FD5E00304E19 /* ImagePickerUtils.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = ImagePickerUtils.m; sourceTree = "<group>"; };
 /* End PBXFileReference section */
 
 /* Begin PBXFrameworksBuildPhase section */
@@ -42,6 +44,8 @@
 		014A3B531C6CF33500B6D375 = {
 			isa = PBXGroup;
 			children = (
+				C1D0CF212509FD5E00304E19 /* ImagePickerUtils.m */,
+				C1D0CF202509FCCD00304E19 /* ImagePickerUtils.h */,
 				014A3B681C6CF34500B6D375 /* ImagePickerManager.h */,
 				014A3B691C6CF34500B6D375 /* ImagePickerManager.m */,
 				014A3B5D1C6CF33500B6D375 /* Products */,
@@ -95,6 +99,7 @@
 			developmentRegion = English;
 			hasScannedForEncodings = 0;
 			knownRegions = (
+				English,
 				en,
 			);
 			mainGroup = 014A3B531C6CF33500B6D375;
@@ -155,7 +160,7 @@
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
-				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
+				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
 				MTL_ENABLE_DEBUG_INFO = YES;
 				ONLY_ACTIVE_ARCH = YES;
 				SDKROOT = iphoneos;
@@ -192,7 +197,7 @@
 				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
 				GCC_WARN_UNUSED_FUNCTION = YES;
 				GCC_WARN_UNUSED_VARIABLE = YES;
-				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
+				IPHONEOS_DEPLOYMENT_TARGET = 9.0;
 				MTL_ENABLE_DEBUG_INFO = NO;
 				SDKROOT = iphoneos;
 				VALIDATE_PRODUCT = YES;
diff --git a/node_modules/react-native-image-picker/lib/typescript/index.d.ts b/node_modules/react-native-image-picker/lib/typescript/index.d.ts
new file mode 100644
index 0000000..bc113e9
--- /dev/null
+++ b/node_modules/react-native-image-picker/lib/typescript/index.d.ts
@@ -0,0 +1,4 @@
+import { CameraOptions, ImageLibraryOptions, Callback, ImagePickerResponse } from './types';
+export * from './types';
+export declare function launchCamera(options: CameraOptions, callback?: Callback): Promise<ImagePickerResponse>;
+export declare function launchImageLibrary(options: ImageLibraryOptions, callback?: Callback): Promise<ImagePickerResponse>;
diff --git a/node_modules/react-native-image-picker/lib/typescript/types.d.ts b/node_modules/react-native-image-picker/lib/typescript/types.d.ts
new file mode 100644
index 0000000..3432e6f
--- /dev/null
+++ b/node_modules/react-native-image-picker/lib/typescript/types.d.ts
@@ -0,0 +1,42 @@
+export declare type Callback = (response: ImagePickerResponse) => any;
+export interface ImageLibraryOptions {
+    selectionLimit?: number;
+    mediaType: MediaType;
+    maxWidth?: number;
+    maxHeight?: number;
+    quality?: PhotoQuality;
+    videoQuality?: AndroidVideoOptions | iOSVideoOptions;
+    includeBase64?: boolean;
+    includeExtra?: boolean;
+    presentationStyle?: 'currentContext' | 'fullScreen' | 'pageSheet' | 'formSheet' | 'popover' | 'overFullScreen' | 'overCurrentContext';
+}
+export interface CameraOptions extends Omit<ImageLibraryOptions, 'selectionLimit'> {
+    durationLimit?: number;
+    saveToPhotos?: boolean;
+    cameraType?: CameraType;
+}
+export interface Asset {
+    base64?: string;
+    uri?: string;
+    width?: number;
+    height?: number;
+    fileSize?: number;
+    type?: string;
+    fileName?: string;
+    duration?: number;
+    bitrate?: number;
+    timestamp?: string;
+    id?: string;
+}
+export interface ImagePickerResponse {
+    didCancel?: boolean;
+    errorCode?: ErrorCode;
+    errorMessage?: string;
+    assets?: Asset[];
+}
+export declare type PhotoQuality = 0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1;
+export declare type CameraType = 'back' | 'front';
+export declare type MediaType = 'photo' | 'video' | 'mixed';
+export declare type AndroidVideoOptions = 'low' | 'high';
+export declare type iOSVideoOptions = 'low' | 'medium' | 'high';
+export declare type ErrorCode = 'camera_unavailable' | 'permission' | 'others';
diff --git a/node_modules/react-native-image-picker/react-native-image-picker.podspec b/node_modules/react-native-image-picker/react-native-image-picker.podspec
index 5e29526..7e38d64 100644
--- a/node_modules/react-native-image-picker/react-native-image-picker.podspec
+++ b/node_modules/react-native-image-picker/react-native-image-picker.podspec
@@ -6,14 +6,14 @@ Pod::Spec.new do |s|
   s.name         = package['name']
   s.version      = package['version']
   s.summary      = package['description']
+  s.license      = package['license']
 
-  s.authors      = { 'Marc Shilling' => 'marcshilling@gmail.com' }
+  s.authors      = package['author']
   s.homepage     = package['homepage']
-  s.license      = package['license']
-  s.platform     = :ios, "7.0"
+  s.platform     = :ios, "9.0"
 
-  s.source       = { :git => "https://github.com/marcshilling/react-native-image-picker" }
+  s.source       = { :git => "https://github.com/react-native-image-picker/react-native-image-picker.git", :tag => "v#{s.version}" }
   s.source_files  = "ios/*.{h,m}"
 
-  s.dependency 'React'
+  s.dependency 'React-Core'
 end
diff --git a/node_modules/react-native-image-picker/src/index.ts b/node_modules/react-native-image-picker/src/index.ts
new file mode 100644
index 0000000..f76c78b
--- /dev/null
+++ b/node_modules/react-native-image-picker/src/index.ts
@@ -0,0 +1,47 @@
+import {NativeModules} from 'react-native';
+
+import {CameraOptions, ImageLibraryOptions, Callback, ImagePickerResponse} from './types';
+export * from './types';
+
+const DEFAULT_OPTIONS: ImageLibraryOptions & CameraOptions = {
+  mediaType: 'photo',
+  videoQuality: 'high',
+  quality: 1,
+  maxWidth: 0,
+  maxHeight: 0,
+  includeBase64: false,
+  cameraType: 'back',
+  selectionLimit: 1,
+  saveToPhotos: false,
+  durationLimit: 0,
+  includeExtra: false,
+  presentationStyle: 'pageSheet'
+};
+
+export function launchCamera(options: CameraOptions, callback?: Callback) : Promise<ImagePickerResponse> {
+  return new Promise(resolve => {
+    NativeModules.ImagePickerManager.launchCamera(
+      {...DEFAULT_OPTIONS, ...options},
+      (result: ImagePickerResponse) => {
+        if(callback) callback(result);
+        resolve(result);
+      },
+    );
+  });  
+}
+
+export function launchImageLibrary(
+  options: ImageLibraryOptions,
+  callback?: Callback,
+) : Promise<ImagePickerResponse> {
+  return new Promise(resolve => {
+    NativeModules.ImagePickerManager.launchImageLibrary(
+      {...DEFAULT_OPTIONS, ...options},
+      (result: ImagePickerResponse) => {
+        if(callback) callback(result);
+        resolve(result);
+      },
+    );
+  })
+  
+}
diff --git a/node_modules/react-native-image-picker/src/types.ts b/node_modules/react-native-image-picker/src/types.ts
new file mode 100644
index 0000000..6e678ce
--- /dev/null
+++ b/node_modules/react-native-image-picker/src/types.ts
@@ -0,0 +1,66 @@
+export type Callback = (response: ImagePickerResponse) => any;
+
+export interface ImageLibraryOptions {
+  selectionLimit?: number;
+  mediaType: MediaType;
+  maxWidth?: number;
+  maxHeight?: number;
+  quality?: PhotoQuality;
+  videoQuality?: AndroidVideoOptions | iOSVideoOptions;
+  includeBase64?: boolean;
+  includeExtra?: boolean;
+  presentationStyle?:
+    | 'currentContext'
+    | 'fullScreen'
+    | 'pageSheet'
+    | 'formSheet'
+    | 'popover'
+    | 'overFullScreen'
+    | 'overCurrentContext';
+}
+
+export interface CameraOptions
+  extends Omit<ImageLibraryOptions, 'selectionLimit'> {
+  durationLimit?: number;
+  saveToPhotos?: boolean;
+  cameraType?: CameraType;
+}
+
+export interface Asset {
+  base64?: string;
+  uri?: string;
+  width?: number;
+  height?: number;
+  fileSize?: number;
+  type?: string;
+  fileName?: string;
+  duration?: number;
+  bitrate?: number;
+  timestamp?: string;
+  id?: string;
+}
+
+export interface ImagePickerResponse {
+  didCancel?: boolean;
+  errorCode?: ErrorCode;
+  errorMessage?: string;
+  assets?: Asset[];
+}
+
+export type PhotoQuality =
+  | 0
+  | 0.1
+  | 0.2
+  | 0.3
+  | 0.4
+  | 0.5
+  | 0.6
+  | 0.7
+  | 0.8
+  | 0.9
+  | 1;
+export type CameraType = 'back' | 'front';
+export type MediaType = 'photo' | 'video' | 'mixed';
+export type AndroidVideoOptions = 'low' | 'high';
+export type iOSVideoOptions = 'low' | 'medium' | 'high';
+export type ErrorCode = 'camera_unavailable' | 'permission' | 'others';
