import ComplicationsBuilder from "../rules/complicationsBuilder";
import RuleCondition from "../rules/RuleCondition";

const getEnrolmentDecisions = (programEnrolment) => {
    let enrolmentDecisions = [];

    function getComplicationsBuilderFor(concept) {
        return new ComplicationsBuilder({
                programEnrolment: programEnrolment,
                complicationsConcept: concept
            }
        );
    }

    const vulnerabilitiesBuilder = getComplicationsBuilderFor('Adolescent Vulnerabilities');
    const schoolDropoutVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for School Dropout Vulnerability');
    const addictionVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Addiction Vulnerability');
    const earlyMarriageVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Early Marriage Vulnerability');
    const earlyPregnancyVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Early Pregnancy & RTI Vulnerability');
    const poorPerformanceInSchoolVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Poor Performance in School Vulnerability');
    const malnutritionVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Malnutrition Vulnerability');
    const hivVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for HIV Vulnerability');
    const stdVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for STD Vulnerability');

    function reasonsBuilderFor(vulnerability) {
        switch (vulnerability) {
            case 'School dropout':
                return schoolDropoutVulnerabilityReasonsBuilder;
            case 'Addiction':
                return addictionVulnerabilityReasonsBuilder;
            case 'Early Marriage':
                return earlyMarriageVulnerabilityReasonsBuilder;
            case 'Early Pregnancy & RTI':
                return earlyPregnancyVulnerabilityReasonsBuilder;
            case 'Poor Performance in School':
                return poorPerformanceInSchoolVulnerabilityReasonsBuilder;
            case 'Malnutrition':
                return malnutritionVulnerabilityReasonsBuilder;
            case 'HIV':
                return hivVulnerabilityReasonsBuilder;
            case 'STD':
                return stdVulnerabilityReasonsBuilder;
        }
    }

    function addVulnerabilityAndReason(vulnerability, reason) {
        vulnerabilitiesBuilder.addComplication(vulnerability);
        reasonsBuilderFor(vulnerability).addComplication(reason);
    }

    let analyseAndAddSchoolDropoutVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEnrolment: programEnrolment});
        ruleCondition
            .when.valueInEnrolment("Parents' life status").containsAnyAnswerConceptName("Only Father Alive", "Only Mother Alive", "Both Expired", "Separated")
            .then(() => {
                addVulnerabilityAndReason("School dropout", "Single or No Parents");
            });

        ruleCondition.when.valueInEnrolment("Addiction Details").containsAnyAnswerConceptName("Alcohol", "Tobacco")
            .then(() => {
                addVulnerabilityAndReason("School dropout", "Self Addiction");
            });

        ruleCondition.when.valueInEnrolment("Chronic sickness in family").containsAnyAnswerConceptName("Diabetes", "Hypertension", "TB", "Cancer", "Sicklecell Disease", "Other")
            .then(() => {
                addVulnerabilityAndReason("School dropout", "Chronic sickness in family");
            });

        ruleCondition.when.valueInEnrolment("Number of family members").greaterThan(6)
            .then(() => {
                addVulnerabilityAndReason("School dropout", "Family Size > 6")
            });

        return ruleCondition;
    };

    let analyseAndAddAddictionVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEnrolment: programEnrolment});
        ruleCondition
            .when.valueInEnrolment("Father's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco")
            .and.valueInEnrolment("Mother's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco")
            .then(() => {
                addVulnerabilityAndReason("Addiction", "Parents' Addiction")
            });

        // ruleCondition
        //     .when.valueInEnrolment("Are friends addicted?").containsAnyAnswerConceptName("Yes")
        //     .then(() => {
        //         addVulnerabilityAndReason("Addiction", "Friends Addiction");
        //         });
        //
        // ruleCondition
        //     .when.valueInEnrolment("Addiction Details").containsAnyAnswerConceptName("Alcohol", "Tobacco", "Both")
        //     .then(() => {
        //         addVulnerabilityAndReason("Addiction", "Self Addiction");
        //         });
    };

    let analyseAndAddMalnutritionVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEnrolment: programEnrolment});

        ruleCondition.when.valueInEnrolment("Number of family members").greaterThan(6)
            .then(() => {
                addVulnerabilityAndReason("Malnutrition", "Family Size > 6")
            });


    };

    analyseAndAddSchoolDropoutVulnerabilityAndReasons();
    analyseAndAddAddictionVulnerabilityAndReasons();
    analyseAndAddMalnutritionVulnerabilityAndReasons();

    enrolmentDecisions.push(vulnerabilitiesBuilder.getComplications());
    enrolmentDecisions.push(schoolDropoutVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(addictionVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(earlyMarriageVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(earlyPregnancyVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(malnutritionVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(poorPerformanceInSchoolVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(hivVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(stdVulnerabilityReasonsBuilder.getComplications());

    return enrolmentDecisions;
};

const getEncounterDecisions = (programEncounter) => {
    let enrolmentDecisions = [];

    function getComplicationsBuilderFor(concept) {
        return new ComplicationsBuilder({
                programEncounter: programEncounter,
                complicationsConcept: concept
            }
        );
    }

    const vulnerabilitiesBuilder = getComplicationsBuilderFor('Adolescent Vulnerabilities');
    const schoolDropoutVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for School Dropout Vulnerability');
    const addictionVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Addiction Vulnerability');
    const earlyMarriageVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Early Marriage Vulnerability');
    const earlyPregnancyVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Early Pregnancy & RTI Vulnerability');
    const poorPerformanceInSchoolVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Poor Performance in School Vulnerability');
    const malnutritionVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Malnutrition Vulnerability');
    const hivVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for HIV Vulnerability');
    const stdVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for STD Vulnerability');
    const roadTrafficAccidentVulnerabilityReasonsBuilder = getComplicationsBuilderFor('Reason for Road Traffic Accident Vulnerability');

    function reasonsBuilderFor(vulnerability) {
        switch (vulnerability) {
            case 'School dropout':
                return schoolDropoutVulnerabilityReasonsBuilder;
            case 'Addiction':
                return addictionVulnerabilityReasonsBuilder;
            case 'Early Marriage':
                return earlyMarriageVulnerabilityReasonsBuilder;
            case 'Early Pregnancy & RTI':
                return earlyPregnancyVulnerabilityReasonsBuilder;
            case 'Poor Performance in School':
                return poorPerformanceInSchoolVulnerabilityReasonsBuilder;
            case 'Malnutrition':
                return malnutritionVulnerabilityReasonsBuilder;
            case 'HIV':
                return hivVulnerabilityReasonsBuilder;
            case 'STD':
                return stdVulnerabilityReasonsBuilder;
            case 'Road Traffic Accident':
                return roadTrafficAccidentVulnerabilityReasonsBuilder;
        }
    }

    function addVulnerabilityAndReason(vulnerability, reason) {
        vulnerabilitiesBuilder.addComplication(vulnerability);
        reasonsBuilderFor(vulnerability).addComplication(reason);
    }

    let analyseAndAddSchoolDropoutVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.valueInEncounter("Hb").lessThan(7)
            .then(() => {
            addVulnerabilityAndReason("School dropout", "Severe Anemia");
            });

        ruleCondition
            .when.valueInEncounter("Sickness in last 3 months").containsAnyAnswerConceptName("Fever", "Diarrhoea", "Abdominal Pain", "Jaundice",
            "Common cold")
            .then(() => {
            addVulnerabilityAndReason("School dropout", "Sickness");
            });

        ruleCondition
            .when.valueInEncounter("Menstrual disorders").containsAnyAnswerConceptName("Lower Abdominal Pain", "Backache", "Leg Pain", "Nausea and Vomiting",
            "Headache", "Abnormal Vaginal Discharge", "Heavy Bleeding", "Irregular Menses")
            .then(() => {
            addVulnerabilityAndReason("School dropout", "Menstrual Disorder");
            });

        ruleCondition
            .when.valueInEncounter("Sickling Test Result").containsAnyAnswerConceptName("Trait", "Disease")
            .then(() => {
            addVulnerabilityAndReason("School dropout", "Sickle Cell Anemia");
            });

        ruleCondition
            .when.valueInEncounter("Do you drive vehicle (2 wheeler)?").containsAnyAnswerConceptName("Yes")
            .then(() => {
            addVulnerabilityAndReason("School dropout", "Road Traffic Accident");
            });


        return ruleCondition;
    };

    let analyseAndAddAddictionVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        // ruleCondition
        //     .when.valueInEnrolment("Father's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco")
        //     .and.valueInEnrolment("Mother's Addiction").containsAnyAnswerConceptName("Alcohol", "Tobacco")
        //     .then(() => {
        //         addVulnerabilityAndReason("Addiction", "Parents' Addiction")
        //     });

        ruleCondition
            .when.valueInEncounter("Are friends addicted?").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("Addiction", "Friends Addiction");
                });

        ruleCondition
            .when.valueInEncounter("Addiction Details").containsAnyAnswerConceptName("Alcohol", "Tobacco", "Both")
            .then(() => {
                addVulnerabilityAndReason("Addiction", "Self Addiction");
                });
    };


    let analyseAndAddEarlyMarriageVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.valueInEncounter("School going").containsAnyAnswerConceptName("Dropped Out")
            .then(() => {
                addVulnerabilityAndReason("Early Marriage", "School dropped out");
            });

        ruleCondition
            .when.valueInEncounter("Sexually active").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("Early Marriage", "Sexual Activity");
            });

    };

    let analyseAndAddEarlyPregnancyVulnerabilityAndReasons = function () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.female.and.valueInEncounter("Sexually active").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("Early Pregnancy & RTI", "Sexual Activity");
            });

    };

    function analyseAndAddRoadTrafficAccidentVulnerabilityAndReasons() {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.valueInEncounter("Do you drive vehicle (2 wheeler)?").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("Road Traffic Accident", "Driving Vehicle");
            });

    }

    function analysePoorPerformanceInSchoolVulnerabilityAndReasons() {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.valueInEncounter("Sickling Test Result").containsAnyAnswerConceptName("Trait", "Disease")
            .then(() => {
                addVulnerabilityAndReason("Poor Performance in School", "Sickle Cell Anemia");
            });

        ruleCondition
            .when.valueInEncounter("Hb").lessThan(7)
            .then(() => {
                addVulnerabilityAndReason("School dropout", "Severe Anemia");
            });
    }

    function analyseHIVVulnerabilityAndReasons () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.female.and.valueInEncounter("Sexually active").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("HIV", "Sexual Activity");
            });

    }

    function analyseSTDVulnerabilityAndReasons () {
        let ruleCondition = new RuleCondition({programEncounter: programEncounter});
        ruleCondition
            .when.female.and.valueInEncounter("Sexually active").containsAnyAnswerConceptName("Yes")
            .then(() => {
                addVulnerabilityAndReason("STD", "Sexual Activity");
            });
    }



    analyseAndAddSchoolDropoutVulnerabilityAndReasons();
    analyseAndAddAddictionVulnerabilityAndReasons();
    analyseAndAddEarlyMarriageVulnerabilityAndReasons();
    analyseAndAddEarlyPregnancyVulnerabilityAndReasons();
    analysePoorPerformanceInSchoolVulnerabilityAndReasons();
    analyseHIVVulnerabilityAndReasons();
    analyseSTDVulnerabilityAndReasons();
    analyseAndAddRoadTrafficAccidentVulnerabilityAndReasons();

    enrolmentDecisions.push(vulnerabilitiesBuilder.getComplications());
    enrolmentDecisions.push(schoolDropoutVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(addictionVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(earlyMarriageVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(earlyPregnancyVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(malnutritionVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(poorPerformanceInSchoolVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(hivVulnerabilityReasonsBuilder.getComplications());
    enrolmentDecisions.push(stdVulnerabilityReasonsBuilder.getComplications());

    return enrolmentDecisions;
};

export {getEnrolmentDecisions, getEncounterDecisions}